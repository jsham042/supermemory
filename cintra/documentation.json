{
    ".eslintrc.js": "File Summary: eslint-config.js\n\nModule Overview:\n\n  Purpose: This configuration file sets up the ESLint rules for the package manager root in the application.\n  Dependencies: \n  - eslint: The ESLint library for linting JavaScript code.\n  - @typescript-eslint/parser: The TypeScript parser for ESLint.\n\nRules:\n- ignorePatterns: Ignores specific file patterns in the linting process.\n- extends: Extends the rules from the specified ESLint configuration file.\n- parser: Specifies the parser to be used for TypeScript code.\n- parserOptions: Configures parser options, such as project setup.\n- rules: Defines specific ESLint rules and their configurations.\n\nFunctions: \n- N/A\n\nClasses:\n- N/A\n\nThis file is responsible for setting up the ESLint configuration for the package manager root, ignoring certain file patterns, extending rules from a specific configuration file, and defining custom ESLint rules for TypeScript code.",
    "apps/cf-ai-backend/src/helper.ts": "File Summary: initQuery.ts\n\nModule Overview:\n\nPurpose: The initQuery module is responsible for initializing a query with specific models based on the input provided. It creates instances of different AI models (OpenAI, Google Generative AI, Anthropic) and returns the selected model along with a CloudflareVectorizeStore instance.\n\nDependencies:\n- hono: Importing the Context class from the hono library.\n- types: Importing Env, vectorObj, and Chunks from the types module.\n- @langchain/cloudflare: Importing the CloudflareVectorizeStore class from the @langchain/cloudflare library.\n- utils/OpenAIEmbedder: Importing the OpenAIEmbeddings class from the OpenAIEmbedder module.\n- @ai-sdk/openai: Importing the createOpenAI function from the @ai-sdk/openai library.\n- @ai-sdk/google: Importing the createGoogleGenerativeAI function from the @ai-sdk/google library.\n- @ai-sdk/anthropic: Importing the createAnthropic function from the @ai-sdk/anthropic library.\n- zod: Importing the z function from the zod library.\n- utils/seededRandom: Importing the seededRandom function from the seededRandom module.\n- utils/kvBulkInsert: Importing the bulkInsertKv function from the kvBulkInsert module.\n\nFunctions:\n\ninitQuery:\n- Purpose: Initializes a query with a specified model and creates instances of AI models and a CloudflareVectorizeStore.\n- Arguments:\n  - c: Context<{ Bindings: Env }> - The context object containing environment bindings.\n  - model: string (optional) - The model to be used for the query (default is \"gpt-4o\").\n- Returns:\n  - Promise<{ store: CloudflareVectorizeStore, model: selectedModel }> - An object containing the CloudflareVectorizeStore instance and the selected AI model instance.\n- Exceptions: None\n\ndeleteDocument:\n- Purpose: Deletes a document based on the provided URL, user, context, and CloudflareVectorizeStore instance.\n- Arguments:\n  - url: string - The URL of the document to be deleted.\n  - user: string - The user associated with the document.\n  - c: Context<{ Bindings: Env }> - The context object containing environment bindings.\n  - store: CloudflareVectorizeStore - The CloudflareVectorizeStore instance.\n- Returns: None\n- Exceptions: None\n\nbatchCreateChunksAndEmbeddings:\n- Purpose: Creates chunks and embeddings for a given body, chunks, and context, and stores them in the CloudflareVectorizeStore.\n- Arguments:\n  - store: CloudflareVectorizeStore - The CloudflareVectorizeStore instance.\n  - body: vectorObj - The body object containing vector information.\n  - chunks: Chunks - The Chunks object containing chunk information.\n  - context: Context<{ Bindings: Env }> - The context object containing environment bindings.\n- Returns: None\n- Exceptions: None\n\nOverall, the initQuery module provides functionality for initializing queries with different AI models, deleting documents, and creating chunks and embeddings in the CloudflareVectorizeStore.",
    "apps/cf-ai-backend/src/index.ts": "Module Overview:\n\nPurpose: This file serves as the main entry point for the application, defining various routes and middleware for handling API requests. It also includes functions for adding, searching, and deleting content, as well as interacting with an AI chatbot.\n\nDependencies:\n- zod: A library for data validation.\n- hono: Custom modules for logging, timing, authentication, and more.\n- ai: Modules for generating text, streaming text, and other AI-related tasks.\n- types: Custom types used in the application.\n- helper: Functions for batch processing and initialization.\n- utils: Utility functions for chunking text and handling images.\n- prompts: Templates for chat prompts.\n- swagger-ui: Module for displaying API documentation.\n\nFunctions:\n\n- app.get(\"/\", c): Handles the root endpoint and returns a simple message.\n- app.get(\"/api/health\", c): Returns a JSON object indicating the health status.\n- app.post(\"/api/add\", c): Adds content to the database based on the provided type (tweet, page, or note).\n- app.post(\"/api/add-with-image\", c): Adds content with images to the database, processing the images and generating descriptions.\n- app.get(\"/api/ask\", c): Processes a query and returns a response using an AI model.\n- app.get(\"/api/search\", c): Searches for content based on a query and user, returning relevant results.\n- app.post(\"/api/autoChatOrAdd\", c): Determines whether to add content to the database or chat with an AI based on the query.\n- app.post(\"/api/chat\", c): Handles chat interactions with an AI model, providing responses based on the query and context.\n- app.delete(\"/api/delete\", c): Deletes a document from the database based on the provided URL and user.\n\nClasses: N/A\n\nOverall, this file serves as the central hub for handling API requests, interacting with AI models, and managing content within the application.",
    "apps/cf-ai-backend/src/prompts/prompt1.ts": "Module Overview:\n\nPurpose: The designated file contains a constant export named systemPrompt, which defines an AI assistant called Supermemory. This AI assistant acts as a \"Second Brain\" by answering questions based on provided context.\n\nDependencies: There are no external dependencies listed for this file.\n\nFunctions:\n\n- template({ contexts, question }): This function generates a prompt based on the provided contexts and question. It maps over the contexts to extract context and score parts, then constructs a final prompt with the given context and question.\n\nJustification:\nThe purpose of this file is to provide a template for generating prompts for the AI assistant based on provided contexts and questions. It serves as a crucial component in the functionality of the AI assistant by structuring the information needed to generate responses accurately.",
    "apps/cf-ai-backend/src/types.ts": "Module Overview:\n\nPurpose: This module defines various types and interfaces related to tweet data, key-value pairs, and content objects used within the application.\n\nDependencies:\n- zod: A library for data validation and schema definition.\n- \"@repo/shared-types\": A module providing shared types used across the application.\n- \"./utils/chunkTweet\": A utility module for chunking tweet data.\n\nClasses:\n\nTweetData:\n- Purpose: Represents a single tweet data object.\n- Attributes:\n  - tweetText (string): The text content of the tweet.\n  - postUrl (string): The URL of the tweet post.\n  - authorName (string): The name of the tweet author.\n  - handle (string): The Twitter handle of the author.\n  - time (string): The timestamp of the tweet.\n  - saveToUser (string): The user to save the tweet to.\n\nBaseChunks:\n- Purpose: Represents the base structure of different types of chunks.\n- Attributes:\n  - type (\"tweet\" | \"page\" | \"note\" | \"image\"): The type of chunk.\n\nTweetChunks:\n- Purpose: Represents tweet chunks.\n- Attributes:\n  - type: \"tweet\"\n  - chunks: An array of ThreadTweetData objects.\n\nPageOrNoteChunks:\n- Purpose: Represents page or note chunks.\n- Attributes:\n  - type: \"page\" | \"note\"\n  - chunks: An array of strings.\n\nImageChunks:\n- Purpose: Represents image chunks.\n- Attributes:\n  - type: \"image\"\n  - chunks: An array of strings.\n\nKVBulkItem:\n- Purpose: Represents a key-value pair for bulk operations.\n- Attributes:\n  - key (string): The key of the item.\n  - value (string): The value of the item.\n  - base64 (boolean): Indicates if the value is base64 encoded.\n\nFunctions:\n\ncontentObj:\n- Purpose: Defines a schema for content objects.\n- Arguments: None\n- Returns: A zod object schema for content objects.\n- Exceptions: None\n\nchatObj:\n- Purpose: Defines a schema for chat objects.\n- Arguments: None\n- Returns: A zod object schema for chat objects.\n- Exceptions: None\n\nvectorObj:\n- Purpose: Defines a schema for vector objects.\n- Arguments: None\n- Returns: A zod object schema for vector objects.\n- Exceptions: None\n\nOverall, this file provides type definitions for tweet data, key-value pairs, and content objects used in the application, along with validation schemas using the zod library.",
    "apps/cf-ai-backend/src/utils/OpenAIEmbedder.ts": "Page Title: OpenAIEmbeddings.ts\n\nModule Overview:\n\n  Purpose: This module provides functionality for embedding text documents using the OpenAI API.\n  Dependencies: \n  - zod: A library for data validation.\n  - fetch: A built-in function for making HTTP requests.\n\nClasses:\n\n  OpenAIEmbeddings:\n  - Purpose: Represents a service for embedding text documents using the OpenAI API.\n  - Attributes:\n    - apiKey (string): The API key required for authentication.\n    - modelName (string): The name of the model to use for embedding.\n  - Methods:\n    - constructor({ apiKey, modelName }: OpenAIEmbeddingsParams): Initializes the OpenAIEmbeddings instance with the provided apiKey and modelName.\n    - async embedDocuments(texts: string[]): Promise<number[][]>: Embeds an array of text documents and returns an array of embeddings.\n    - async embedQuery(text: string): Promise<number[]>: Embeds a single text document and returns its embedding.\n\nFunctions: N/A",
    "apps/cf-ai-backend/src/utils/chonker.ts": "File Summary: chunkText.ts\n\nModule Overview:\n\n  Purpose: This module provides a function to split text into chunks of a specified maximum size with some overlap for continuity.\n  Dependencies: \n  - compromise: A library for natural language processing.\n\nFunctions:\n\n  chunkText(text: string, maxChunkSize: number, overlap: number = 0.2) -> string[]:\n  - Purpose: Splits the input text into chunks of specified max size with overlap.\n  - Arguments:\n    - text (string): The input text to be chunked.\n    - maxChunkSize (number): The maximum size of each chunk.\n    - overlap (number): The percentage of overlap between chunks (default is 0.2).\n  - Returns:\n    - string[]: An array of chunked text strings.\n  - Exceptions:\n    - None.",
    "apps/cf-ai-backend/src/utils/chunkPageOrNotes.ts": "Module Overview:\n\n  Purpose: This module provides functions for chunking text content into smaller chunks for better handling and processing within the application.\n  \n  Dependencies: \n  - \"./chonker\": The module providing the chunkText function for splitting text into chunks.\n  - \"../types\": The module containing the PageOrNoteChunks type definition.\n\nFunctions:\n\n  chunkPage(pageContent: string) -> PageOrNoteChunks:\n  - Purpose: Chunks the provided page content into smaller segments.\n  - Arguments:\n    - pageContent (string): The content of the page to be chunked.\n  - Returns:\n    - PageOrNoteChunks: An object containing the type \"page\" and the chunks of the page content.\n  \n  chunkNote(noteContent: string) -> PageOrNoteChunks:\n  - Purpose: Chunks the provided note content into smaller segments.\n  - Arguments:\n    - noteContent (string): The content of the note to be chunked.\n  - Returns:\n    - PageOrNoteChunks: An object containing the type \"note\" and the chunks of the note content.",
    "apps/cf-ai-backend/src/utils/chunkTweet.ts": "Page Title: thread_tweet_data.ts\n\nModule Overview:\n\n  Purpose: This module handles the processing of thread tweet data, including chunking text, extracting metadata, and formatting the data for display.\n  Dependencies: \n  - types: Importing the TweetChunks type from the types module.\n  - chonker: Importing the chunkText function from the chonker module.\n  - @repo/shared-types/utils: Importing the getRawTweet function from the shared-types/utils module.\n\nClasses:\n\n  Tweet:\n  - Purpose: Represents a single tweet with its text, links, images, and videos.\n  - Attributes:\n    - id (string): The unique identifier of the tweet.\n    - text (string): The content of the tweet.\n    - links (Array<string>): An array of URLs included in the tweet.\n    - images (Array<string>): An array of image URLs included in the tweet.\n    - videos (Array<string>): An array of video URLs included in the tweet.\n\n  Metadata:\n  - Purpose: Contains metadata related to a tweet, such as IDs, links, images, and videos.\n  - Attributes:\n    - tweetId (string): The ID of the tweet.\n    - tweetLinks (any[]): An array of expanded URLs from the tweet.\n    - tweetVids (any[]): An array of video URLs from the tweet.\n    - tweetImages (any[]): An array of image URLs from the tweet.\n\n  ThreadTweetData:\n  - Purpose: Represents the data structure for a thread tweet, including chunked text and metadata.\n  - Attributes:\n    - chunkedTweet (string[]): An array of text chunks from the tweet.\n    - metadata (Metadata): Metadata related to the tweet.\n\nFunctions:\n\n  chunkThread(threadText: string) -> TweetChunks:\n  - Purpose: Processes the thread text, extracts metadata, and chunks the text for display.\n  - Arguments:\n    - threadText (string): The text of the thread tweet.\n  - Returns:\n    - TweetChunks: An object containing the type \"tweet\" and an array of chunked tweets with metadata.\n  - Exceptions:\n    - JSON.parse error: If the thread text is not valid JSON.\n    - TypeError: If the thread text is not a string.\n\nOverall, this file is responsible for handling the processing of thread tweet data, including chunking text, extracting metadata, and formatting the data for display. It relies on external modules for type definitions and utility functions.",
    "apps/cf-ai-backend/src/utils/kvBulkInsert.ts": "Page Title: bulkInsertKv.ts\n\nModule Overview:\n\n  Purpose: This module handles the bulk insertion of key-value pairs into a Cloudflare KV namespace.\n  Dependencies: \n  - fetch: A built-in JavaScript function for making HTTP requests.\n  - KVBulkItem: A custom type defined in \"../types\" for representing key-value pairs.\n\nFunctions:\n\n  bulkInsertKv(credentials: { CF_KV_AUTH_TOKEN: string, KV_NAMESPACE_ID: string, CF_ACCOUNT_ID: string }, keyData: { chunkIds: Array<string>, urlid: string }) -> Promise<any>:\n  - Purpose: Inserts multiple key-value pairs into a Cloudflare KV namespace.\n  - Arguments:\n    - credentials (object): An object containing Cloudflare authentication credentials.\n      - CF_KV_AUTH_TOKEN (string): The authentication token for Cloudflare KV.\n      - KV_NAMESPACE_ID (string): The ID of the Cloudflare KV namespace.\n      - CF_ACCOUNT_ID (string): The ID of the Cloudflare account.\n    - keyData (object): An object containing data for the key-value pairs to be inserted.\n      - chunkIds (Array<string>): An array of chunk IDs to be used as keys.\n      - urlid (string): The value to be associated with the keys.\n  - Returns:\n    - Promise<any>: A promise that resolves with the response data from the API call.\n  - Exceptions:\n    - Error: If the API call fails, an error is thrown with details of the failure.\n\nThis summary provides an overview of the bulkInsertKv.ts file, detailing its purpose, dependencies, and the functionality of the bulkInsertKv function.",
    "apps/cf-ai-backend/src/utils/seededRandom.ts": "Page Title: randomGenerator.ts\n\nModule Overview:\n\n  Purpose: This module provides functions for generating seeded random numbers between 0 and 1 using the Mersenne Twister algorithm.\n  Dependencies: \n  - random-js: Library for generating random numbers.\n\nFunctions:\n\n  hashString(seed: string) -> number:\n  - Purpose: Hashes a string to a 32-bit integer.\n  - Arguments:\n    - seed (string): The input string to hash.\n  - Returns:\n    - number: The hashed 32-bit integer value.\n  \n  seededRandom(seed: string) -> () => number:\n  - Purpose: Returns a function that generates the same sequence of random numbers for a given seed between 0 and 1.\n  - Arguments:\n    - seed (string): The seed for generating random numbers.\n  - Returns:\n    - () => number: A function that generates random numbers between 0 and 1.\n  - Exceptions:\n    - None\n\nDependencies:\n  - MersenneTwister19937: Random number generator engine.\n  - integer: Function for generating random integers within a specified range.",
    "apps/cf-ai-backend/vite.config.ts": "File Summary: vite.config.js\n\nModule Overview:\n\n  Purpose: This module configures the Vite build tool for the application.\n  Dependencies: \n  - vite: The Vite build tool.\n  - honox: A plugin for Vite.\n\nFunctions:\n\n  defineConfig(config: object) -> object:\n  - Purpose: Defines the configuration for the Vite build tool.\n  - Arguments:\n    - config (object): The configuration object for Vite.\n    - Returns:\n       - object: The updated configuration object.",
    "apps/extension/background.ts": "File Summary: batchImportAll.ts\n\nModule Overview:\n\nPurpose: This file contains the batchImportAll function, which is responsible for fetching and importing tweets from a specified URL to the backend server. It also handles pagination and rate limiting to prevent exceeding API limits.\n\nDependencies:\n- chrome: Chrome extension API for storage and messaging.\n- fetch: Web API for making HTTP requests.\n- helpers: Helper functions for transforming tweet data.\n- react-tweet/api: Importing the Tweet type for type checking.\n\nFunctions:\n\nbatchImportAll(cursor: string, totalImported: number) => void:\n- Purpose: Fetches tweets from a specified URL, transforms them into Markdown format, and sends them to the backend server for storage. Handles pagination and rate limiting.\n- Arguments:\n  - cursor (string): The cursor for pagination.\n  - totalImported (number): Total count of imported tweets.\n- Returns: void\n- Exceptions: None\n\ngetAllTweets(rawJson: any) => Tweet[]:\n- Purpose: Extracts and transforms tweet data from the raw JSON response.\n- Arguments:\n  - rawJson (any): Raw JSON data containing tweet information.\n- Returns: An array of Tweet objects.\n- Exceptions: None\n\nfetchData(params: FetchDataParams) => Promise<void>:\n- Purpose: Sends data to the backend server for storage.\n- Arguments:\n  - params (FetchDataParams): Object containing content, URL, title, description, image, and other metadata.\n- Returns: Promise<void>\n- Exceptions: None\n\nEvent Listeners:\n\nchrome.webRequest.onBeforeSendHeaders.addListener:\n- Purpose: Listens for outgoing requests to specific URLs and sets headers for authentication.\n- Dependencies: cookie, csrf, auth from chrome storage.\n- Exceptions: None\n\nchrome.runtime.onMessage.addListener:\n- Purpose: Listens for messages from the extension popup and background scripts to trigger specific actions.\n- Dependencies: jwt from chrome storage.\n- Exceptions: None\n\nchrome.runtime.onInstalled.addListener:\n- Purpose: Listens for the extension being installed and creates context menus for saving content to Supermemory.\n- Dependencies: None\n- Exceptions: None\n\nchrome.contextMenus.onClicked.addListener:\n- Purpose: Listens for context menu clicks and triggers actions to save selected content or entire pages to Supermemory.\n- Dependencies: None\n- Exceptions: None\n\nOverall, this file handles the batch importing of tweets, data fetching, event listeners for web requests and messages, and context menu actions for saving content to Supermemory.",
    "apps/extension/content/ContentApp.tsx": "Module Overview:\n\nPurpose: The ContentApp module is responsible for managing user interactions and data processing related to the supermemory.ai extension. It handles user authentication, data storage, and interaction with the backend API.\n\nDependencies:\n- React: A JavaScript library for building user interfaces.\n- @mozilla/readability: A library for parsing and extracting content from web pages.\n- \"./ui/shadcn/tooltip\": Tooltip components for user interface interactions.\n- \"./ui/shadcn/popover\": Popover components for user interface interactions.\n- \"./ui/shadcn/toaster\": Toaster component for displaying notifications.\n- \"./ui/shadcn/select\": Select components for user interface interactions.\n- \"./ui/shadcn/use-toast\": Custom hook for displaying toast notifications.\n- \"./ui/shadcn/input\": Input component for user input.\n- \"./ui/shadcn/label\": Label component for form labels.\n- \"./ui/shadcn/textarea\": Textarea component for multi-line text input.\n\nClasses:\n\n- ContentApp:\n  - Purpose: Represents the main component of the extension, handling user interactions and data processing.\n  - Attributes:\n    - token (string | undefined): Authentication token for accessing the backend API.\n    - shadowRoot (ShadowRoot): The shadow DOM root element for encapsulating styles and scripts.\n    - hover (boolean): Flag indicating if the user is hovering over a specific area.\n    - loading (boolean): Flag indicating if data is being loaded.\n    - webNote (string): User input for adding notes to web content.\n    - importedCount (number): Count of imported bookmarks.\n    - isImporting (boolean): Flag indicating if bookmarks are being imported.\n    - importDone (boolean): Flag indicating if bookmark import is completed.\n    - portalContainer (HTMLElement | null): Container element for rendering popover content.\n    - isPopoverOpen (boolean): Flag indicating if the popover is open.\n    - isPopover2Open (boolean): Flag indicating if the second popover is open.\n    - spacesOptions ({ id: number, name: string }[]): Array of space options for user selection.\n    - selectedSpace (string): Selected space for storing web content.\n    - userNotLoggedIn (boolean): Flag indicating if the user is not logged in.\n\n  - Methods:\n    - showLoginToast(): Displays a toast notification prompting the user to log in.\n    - getSpaces(): Fetches space options from the backend API.\n    - sendUrlToAPI(spaces: string[]): Sends the current URL and content to the backend API for storage.\n    - useEffect(): Handles side effects like event listeners and API calls.\n    - handleKeyDown(e: KeyboardEvent): Handles keydown events for popover interactions.\n\nFunctions:\n\n- None\n\nOverall, the ContentApp module serves as the core component for managing user interactions, data processing, and API communication within the supermemory.ai extension. It provides a seamless user experience for saving web content to the supermemory.ai platform.",
    "apps/extension/content/base.css": "File Title: supermemory-extension-host.css\n\nModule Overview:\n\n  Purpose: This file contains CSS rules for styling the supermemory extension host element within the application. The element is positioned fixed at the bottom right corner of the screen with a high z-index value to ensure it stays on top of other elements.\n\n  Dependencies: \n  - None\n\nClasses:\n\n  None\n\nFunctions:\n\n  None\n\nOverall, this file is responsible for styling the supermemory extension host element to ensure it is always visible and easily accessible to users.",
    "apps/extension/content/content.tsx": "Page Title: contentApp.js\n\nModule Overview:\n\n  Purpose: This module is responsible for rendering the ContentApp component using React and managing the styling of the app using Tailwind CSS.\n  \n  Dependencies: \n  - react-dom/client: Library for rendering React components.\n  - ContentApp: Component for the main content of the app.\n  - base.css: CSS file for basic styling.\n  - tailwindcss: Library for utility-first CSS framework.\n\nFunctions:\n\n  appendTailwindStyleData(shadowRoot: ShadowRoot) -> void:\n  - Purpose: Fetches and appends custom CSS styles to the shadow DOM.\n  - Arguments:\n    - shadowRoot (ShadowRoot): The shadow DOM element to append the styles to.\n  - Returns: void\n  - Exceptions: None\n\n  appendTailwindStyleLink(shadowRoot: ShadowRoot) -> void:\n  - Purpose: Appends the Tailwind CSS stylesheet link to the shadow DOM.\n  - Arguments:\n    - shadowRoot (ShadowRoot): The shadow DOM element to append the link to.\n  - Returns: void\n  - Exceptions: None\n\n  initial() -> void:\n  - Purpose: Initializes the app by creating the necessary DOM elements and rendering the ContentApp component.\n  - Arguments: None\n  - Returns: void\n  - Exceptions: None\n\n  window.addEventListener(\"message\", (event) -> void:\n  - Purpose: Listens for messages from the window and handles JWT token updates.\n  - Arguments:\n    - event (MessageEvent): The message event received.\n  - Returns: void\n  - Exceptions: None\n\nOverall, the contentApp.js file is crucial for setting up the initial environment for the app, including styling and rendering the main content component. It also handles JWT token updates for authentication purposes.",
    "apps/extension/content/ui/shadcn/input.tsx": "Module Overview:\n\n  Purpose: This module defines an Input component that can be used for user input forms in the application.\n  Dependencies: \n  - React: The React library for building user interfaces.\n  - cn: A utility function for combining class names.\n\nClasses:\n\n  Input:\n  - Purpose: Represents an input element for user input forms.\n  - Attributes:\n    - className (string): Additional class names for styling.\n    - type (string): The type of input element (e.g., text, password).\n  - Methods:\n    - None\n\nFunctions:\n  None\n\nOverall, this file provides a reusable Input component that can be easily integrated into forms for user input.",
    "apps/extension/content/ui/shadcn/label.tsx": "Module Overview:\n\nPurpose: The \"use client\" module is responsible for defining and exporting the Label component, which is a customized label element used in the application.\n\nDependencies:\n- React: A JavaScript library for building user interfaces.\n- @radix-ui/react-label: A library for creating accessible label components.\n- class-variance-authority: A library for defining and managing component variants.\n- \"../../utils\": A utility module for common functions.\n\nClasses:\n\nLabel:\n- Purpose: Represents a customized label component used in the application.\n- Attributes: None\n- Methods:\n  - None\n\nFunctions:\n- None\n\nOverall, the \"use client\" module provides a reusable Label component that enhances the accessibility and styling of labels in the application.",
    "apps/extension/content/ui/shadcn/popover.tsx": "Module Overview:\n\nPurpose: The \"use client\" module provides functionality for handling popovers in a React application.\n\nDependencies:\n- React: A JavaScript library for building user interfaces.\n- @radix-ui/react-popover: A library for creating accessible popovers in React applications.\n- \"../../utils\": A utility module for common functions.\n\nClasses:\n\nPopover:\n- Purpose: Represents the root element of a popover component.\n- Attributes: None.\n- Methods: None.\n\nPopoverTrigger:\n- Purpose: Represents the trigger element that activates the popover.\n- Attributes: None.\n- Methods: None.\n\nPopoverContent:\n- Purpose: Represents the content of the popover.\n- Attributes:\n  - align (string): The alignment of the popover content.\n  - sideOffset (number): The offset of the popover from the trigger element.\n- Methods: None.\n\nFunctions: None.",
    "apps/extension/content/ui/shadcn/select.tsx": "File Summary: \"use client\"\n\nModule Overview:\n\nPurpose: This file provides components for creating custom select dropdowns in React applications.\nDependencies:\n- React: A JavaScript library for building user interfaces.\n- @radix-ui/react-select: A library for building accessible select components.\n- lucide-react: A library of icons for use in React applications.\n- \"../../utils\": A utility module for common functions.\n\nClasses:\n\nSelect:\n- Purpose: Represents the root select component.\n- Attributes: N/A\n- Methods: N/A\n\nSelectGroup:\n- Purpose: Represents a group of options within the select component.\n- Attributes: N/A\n- Methods: N/A\n\nSelectValue:\n- Purpose: Represents the selected value within the select component.\n- Attributes: N/A\n- Methods: N/A\n\nSelectTrigger:\n- Purpose: Represents the trigger element that opens the select dropdown.\n- Attributes: className, children\n- Methods: N/A\n\nSelectScrollUpButton:\n- Purpose: Represents the scroll up button within the select dropdown.\n- Attributes: className\n- Methods: N/A\n\nSelectScrollDownButton:\n- Purpose: Represents the scroll down button within the select dropdown.\n- Attributes: className\n- Methods: N/A\n\nSelectContent:\n- Purpose: Represents the content of the select dropdown.\n- Attributes: className, children, position, container\n- Methods: N/A\n\nSelectLabel:\n- Purpose: Represents the label for the select component.\n- Attributes: className\n- Methods: N/A\n\nSelectItem:\n- Purpose: Represents an individual selectable item within the select component.\n- Attributes: className, children\n- Methods: N/A\n\nSelectSeparator:\n- Purpose: Represents a separator within the select component.\n- Attributes: className\n- Methods: N/A\n\nFunctions: N/A\n\nOverall, this file provides a set of components for creating customizable select dropdowns in React applications, utilizing various dependencies for styling and functionality.",
    "apps/extension/content/ui/shadcn/textarea.tsx": "Module Overview:\n\nPurpose: The Textarea module provides a reusable component for rendering a textarea input field with customizable styling.\n\nDependencies: \n- React: The React library for building user interfaces.\n- cn: A utility function for combining class names.\n\nClasses:\n\nTextarea:\n- Purpose: Represents a textarea input field component.\n- Attributes:\n  - className (string): Additional class names for styling.\n- Methods:\n  - None\n\nFunctions:\n- None\n\nOverall, the Textarea module serves as a convenient way to implement textarea input fields with consistent styling across the application.",
    "apps/extension/content/ui/shadcn/toast.tsx": "Module Overview:\n\nPurpose: The \"use client\" module provides components for displaying toast notifications in a React application.\n\nDependencies:\n- React: A JavaScript library for building user interfaces.\n- @radix-ui/react-toast: A library for creating accessible toast notifications.\n- class-variance-authority: A library for managing variant styles in components.\n- lucide-react: A library of icons for use in React applications.\n- \"../../utils\": A utility module for common functions.\n\nClasses:\n\nToastProvider:\n- Purpose: A provider component for managing toast notifications.\n- Attributes: None.\n- Methods: None.\n\nToastViewport:\n- Purpose: A viewport component for displaying toast notifications.\n- Attributes:\n  - className (string): The CSS class name for styling the component.\n- Methods: None.\n\nToast:\n- Purpose: A toast notification component.\n- Attributes:\n  - className (string): The CSS class name for styling the component.\n  - variant (string): The variant style for the toast.\n- Methods: None.\n\nToastAction:\n- Purpose: An action component for interacting with toast notifications.\n- Attributes:\n  - className (string): The CSS class name for styling the component.\n- Methods: None.\n\nToastClose:\n- Purpose: A close button component for dismissing toast notifications.\n- Attributes:\n  - className (string): The CSS class name for styling the component.\n- Methods: None.\n\nToastTitle:\n- Purpose: A title component for displaying the title of a toast notification.\n- Attributes:\n  - className (string): The CSS class name for styling the component.\n- Methods: None.\n\nToastDescription:\n- Purpose: A description component for displaying the content of a toast notification.\n- Attributes:\n  - className (string): The CSS class name for styling the component.\n- Methods: None.\n\nFunctions: None.\n\nOverall, the \"use client\" module provides a set of components for creating and managing toast notifications in a React application. These components offer customizable styles and interactions for displaying informative messages to users.",
    "apps/extension/content/ui/shadcn/toaster.tsx": "File Summary: \"use client\"\n\nModule Overview:\n\n  Purpose: This file provides functionality for displaying toast notifications in the application.\n  Dependencies: \n  - \"../shadcn/toast\": Contains components for displaying toast notifications.\n  - \"../shadcn/use-toast\": Contains a custom hook for managing toast notifications.\n\nFunctions:\n\n  Toaster():\n  - Purpose: Renders a list of toast notifications.\n  - Arguments: None\n  - Returns: JSX element containing toast notifications.\n  - Exceptions: None\n\nClasses: None\n\nOverall, the \"use client\" file is essential for managing and displaying toast notifications in the application. It utilizes components from the \"../shadcn/toast\" module and the custom hook from \"../shadcn/use-toast\" to render toast notifications for the user.",
    "apps/extension/content/ui/shadcn/tooltip.tsx": "Module Overview:\n\n  Purpose: The \"use client\" module provides functionality for using a tooltip component in the application.\n  \n  Dependencies: \n  - React: A JavaScript library for building user interfaces.\n  - TooltipPrimitive: A library for creating tooltips in React applications.\n\nClasses:\n\n  TooltipProvider:\n  - Purpose: Represents the provider component for the tooltip functionality.\n  - Attributes: None\n  - Methods: None\n\n  Tooltip:\n  - Purpose: Represents the root component for the tooltip.\n  - Attributes: None\n  - Methods: None\n\n  TooltipTrigger:\n  - Purpose: Represents the trigger component for the tooltip.\n  - Attributes: None\n  - Methods: None\n\n  TooltipContent:\n  - Purpose: Represents the content component for the tooltip.\n  - Attributes:\n    - className (string): The CSS class name for styling the tooltip content.\n    - sideOffset (number): The offset value for positioning the tooltip.\n  - Methods: None\n\nFunctions: None\n\nOverall, the \"use client\" module provides components for creating and displaying tooltips in the application using React and the TooltipPrimitive library.",
    "apps/extension/content/ui/shadcn/use-toast.ts": "File Summary: \"use client\"\n\nModule Overview:\n\nPurpose: This file provides functionality for managing toast notifications in a React application. It includes actions to add, update, dismiss, and remove toast notifications.\n\nDependencies:\n- React: A JavaScript library for building user interfaces.\n\nFunctions:\n\n- genId(): Generates a unique ID for each toast notification.\n  - Arguments: None\n  - Returns: A unique ID as a string.\n\n- addToRemoveQueue(toastId: string): Adds a toast ID to a removal queue with a delay.\n  - Arguments:\n    - toastId (string): The ID of the toast notification.\n  - Returns: None\n\n- dispatch(action: Action): Updates the state based on the action dispatched.\n  - Arguments:\n    - action (Action): An object representing the action to be performed.\n  - Returns: None\n\n- toast({ ...props }: Toast): Creates and displays a new toast notification.\n  - Arguments:\n    - props (Toast): An object containing the properties of the toast notification.\n  - Returns: An object with methods to dismiss and update the toast.\n\n- useToast(): Custom React hook for managing toast notifications.\n  - Arguments: None\n  - Returns: An object containing the current state of toast notifications and methods to manage them.\n\nClasses: None\n\nOverall, this file provides essential functions and hooks for handling toast notifications in a React application, allowing developers to easily add, update, dismiss, and remove toast messages.",
    "apps/extension/content/utils.ts": "File Summary: index.ts\n\nModule Overview:\n\n  Purpose: This module provides a function for combining and merging CSS class names using the clsx and tailwind-merge libraries.\n  Dependencies: \n  - clsx: A library for conditionally joining class names together.\n  - tailwind-merge: A library for merging Tailwind CSS class names.\n\nFunctions:\n\n  cn(...inputs: ClassValue[]) -> string:\n  - Purpose: Combines and merges the input CSS class names using clsx and tailwind-merge.\n  - Arguments:\n    - inputs (ClassValue[]): An array of CSS class names to be combined.\n  - Returns:\n    - string: The merged CSS class names as a single string.\n  - Exceptions:\n    - None\n\nOverall, this file provides a utility function for efficiently combining and merging CSS class names in a web application.",
    "apps/extension/extension-env.d.ts": "File Summary: extension-types.d.ts\n\nModule Overview:\n\n  Purpose: This file provides type definitions for TypeScript projects, specifically for extensions and polyfills used in the application.\n  Dependencies: None\n\nClasses: None\n\nFunctions: None\n\nThis file serves as a reference for developers to include additional types and polyfills in their TypeScript projects as needed. It is auto-generated and should not be excluded from the project. Developers can create new *.d.ts files for extra types and reference them in the \"include\" array in the tsconfig.json file. Additionally, this file includes references to extension-create types and polyfill types for browser.* APIs.",
    "apps/extension/helpers.ts": "Module Overview:\n\nPurpose: This module provides functions for transforming tweet data into a standardized format for display within the application.\n\nDependencies: \n- react-tweet/api: The Tweet class is imported from this library for data transformation.\n\nFunctions:\n\ntransformTweetData(input: any) -> Tweet | null:\n- Purpose: Transforms raw tweet data into a standardized format for display.\n- Arguments:\n  - input (any): The raw tweet data to be transformed.\n- Returns:\n  - Tweet | null: The transformed tweet data or null if the input data is invalid.\n- Exceptions:\n  - None\n\nOverall, this module plays a crucial role in processing tweet data and ensuring a consistent display format within the application.",
    "apps/extension/postcss.config.js": "Module Overview:\n\n  Purpose: This module exports an object containing configuration options for PostCSS plugins, specifically Tailwind CSS and Autoprefixer.\n\n  Dependencies: \n  - Tailwind CSS: A utility-first CSS framework for rapidly building custom designs.\n  - Autoprefixer: A tool that automatically adds vendor prefixes to CSS rules.\n\nClasses:\nThis module does not define any classes.\n\nFunctions:\nThis module does not define any functions.",
    "apps/extension/public/output.css": "Rest of the file:\n\n- CSS Styles:\n  - .group.toast .group-\\[\\.toast\\]\\:bg-muted: Sets the background color for toast elements to a muted color.\n  - .group.toast .group-\\[\\.toast\\]\\:bg-primary: Sets the background color for toast elements to the primary color.\n  - .group.toaster .group-\\[\\.toaster\\]\\:bg-background: Sets the background color for toaster elements to the background color.\n  - .group.destructive .group-\\[\\.destructive\\]\\:text-red-300: Sets the text color for destructive elements to a shade of red.\n  - .group.toast .group-\\[\\.toast\\]\\:text-muted-foreground: Sets the text color for toast elements to a muted foreground color.\n  - .group.toaster .group-\\[\\.toaster\\]\\:text-foreground: Sets the text color for toaster elements to the foreground color.\n  - .group.toaster .group-\\[\\.toaster\\]\\:shadow-lg: Sets a shadow effect for toaster elements.\n\n- Peer Elements:\n  - .peer:disabled ~ .peer-disabled\\:cursor-not-allowed: Changes the cursor to not-allowed for disabled peer elements.\n  - .peer:disabled ~ .peer-disabled\\:opacity-70: Sets the opacity to 0.7 for disabled peer elements.\n\n- Aria Selection:\n  - .aria-selected\\:bg-accent[aria-selected=\"true\"]: Sets the background color to an accent color for elements with aria-selected=\"true\".\n  - .aria-selected\\:text-accent-foreground[aria-selected=\"true\"]: Sets the text color to an accent foreground color for elements with aria-selected=\"true\".\n\n- Data Attributes:\n  - .data-\\[disabled\\=true\\]\\:pointer-events-none[data-disabled=\"true\"]: Disables pointer events for elements with data-disabled=\"true\".\n  - .data-\\[disabled\\]\\:pointer-events-none[data-disabled]: Disables pointer events for elements with data-disabled.\n  - .data-\\[side\\=bottom\\]\\:translate-y-1[data-side=\"bottom\"]: Translates elements on the y-axis for elements with data-side=\"bottom\".\n  - .data-\\[side\\=left\\]\\:-translate-x-1[data-side=\"left\"]: Translates elements on the x-axis for elements with data-side=\"left\".\n  - .data-\\[side\\=right\\]\\:translate-x-1[data-side=\"right\"]: Translates elements on the x-axis for elements with data-side=\"right\".\n  - .data-\\[side\\=top\\]\\:-translate-y-1[data-side=\"top\"]: Translates elements on the y-axis for elements with data-side=\"top\".\n  - .data-\\[state\\=checked\\]\\:translate-x-5[data-state=\"checked\"]: Translates elements on the x-axis for elements with data-state=\"checked\".\n  - .data-\\[state\\=unchecked\\]\\:translate-x-0[data-state=\"unchecked\"]: Translates elements on the x-axis for elements with data-state=\"unchecked\".\n  - .data-\\[swipe\\=cancel\\]\\:translate-x-0[data-swipe=\"cancel\"]: Translates elements on the x-axis for elements with data-swipe=\"cancel\".\n  - .data-\\[swipe\\=end\\]\\:translate-x-\\[var\\(--radix-toast-swipe-end-x\\)\\][data-swipe=\"end\"]: Translates elements on the x-axis for elements with data-swipe=\"end\".\n  - .data-\\[swipe\\=move\\]\\:translate-x-\\[var\\(--radix-toast-swipe-move-x\\)\\][data-swipe=\"move\"]: Translates elements on the x-axis for elements with data-swipe=\"move\".\n\n- Keyframes:\n  - @keyframes accordion-up: Defines an animation for accordion elements to slide up.\n  - @keyframes accordion-down: Defines an animation for accordion elements to slide down.\n\n- Animation Classes:\n  - .data-\\[state\\=closed\\]\\:animate-accordion-up[data-state=\"closed\"]: Applies the accordion-up animation to elements with data-state=\"closed\".\n  - .data-\\[state\\=open\\]\\:animate-accordion-down[data-state=\"open\"]: Applies the accordion-down animation to elements with data-state=\"open\".\n\n- Focus Styles:\n  - .focus\\:bg-accent:focus: Sets the background color to an accent color for focused elements.\n  - .focus\\:bg-foreground-menu:focus: Sets the background color to the menu foreground color for focused elements.\n  - .focus\\:bg-secondary:focus: Sets the background color to the secondary color for focused elements.\n  - .focus\\:text-accent-foreground:focus: Sets the text color to an accent foreground color for focused elements.\n  - .focus\\:opacity-100:focus: Sets the opacity to 1 for focused elements.\n  - .focus\\:outline-none:focus: Removes the outline for focused elements.\n  - .focus\\:ring-2:focus: Sets a ring effect for focused elements.\n\n- Disabled Styles:\n  - .disabled\\:pointer-events-none:disabled: Disables pointer events for disabled elements.\n  - .disabled\\:cursor-not-allowed:disabled: Changes the cursor to not-allowed for disabled elements.\n  - .disabled\\:bg-slate-700\\/50:disabled: Sets the background color to a shade of slate for disabled elements.\n\n- Media Queries:\n  - @media (min-width: 640px): Defines styles for elements with a minimum width of 640px.\n  - @media (min-width: 768px): Defines styles for elements with a minimum width of 768px.\n\n- Miscellaneous:\n  - .\\[\\&\\>span\\]\\:line-clamp-1 > span: Sets the line clamp to 1 for span elements.\n  - .\\[\\&\\[data-state\\=open\\]\\>svg\\]\\:rotate-180[data-state=\"open\"] > svg: Rotates the svg element by 180 degrees for elements with data-state=\"open\".\n  - .\\[\\&_\\[cmdk-group-heading\\]\\]\\:px-2 [cmdk-group-heading]: Sets padding for group heading elements.\n  - .\\[\\&_\\[cmdk-group-heading\\]\\]\\:py-1\\.5 [cmdk-group-heading]: Sets padding for group heading elements.\n  - .\\[\\&_\\[cmdk-group-heading\\]\\]\\:text-xs [cmdk-group-heading]: Sets font size for group heading elements.\n  - .\\[\\&_\\[cmdk-group-heading\\]\\]\\:font-medium [cmdk-group-heading]: Sets font weight to medium for group heading elements.\n  - .\\[\\&_\\[cmdk-group-heading\\]\\]\\:text-muted-foreground [cmdk-group-heading]: Sets text color to a muted foreground color for group heading elements.\n  - .\\[\\&_\\[cmdk-group\\]\\:not\\(\\[hidden\\]\\)_\\~\\[cmdk-group\\]\\]\\:pt-0 [cmdk-group]: Sets padding top to 0 for adjacent group elements.\n  - .\\[\\&_\\[cmdk-group\\]\\]\\:px-2 [cmdk-group]: Sets padding for group elements.\n  - .\\[\\&_\\[cmdk-input-wrapper\\]_svg\\]\\:h-5 [cmdk-input-wrapper] svg: Sets height for svg elements within input wrapper elements.\n  - .\\[\\&_\\[cmdk-input-wrapper\\]_svg\\]\\:w-5 [cmdk-input-wrapper] svg: Sets width for svg elements within input wrapper elements.\n  - .\\[\\&_\\[cmdk-input\\]\\]\\:h-12 [cmdk-input]: Sets height for input elements.\n  - .\\[\\&_\\[cmdk-item\\]\\]\\:px-2 [cmdk-item]: Sets padding for item elements.\n  - .\\[\\&_\\[cmdk-item\\]\\]\\:py-3 [cmdk-item]: Sets padding for item elements.\n  - .\\[\\&_\\[cmdk-item\\]_svg\\]\\:h-5 [cmdk-item] svg: Sets height for svg elements within item elements.\n  - .\\[\\&_\\[cmdk-item\\]_svg\\]\\:w-5 [cmdk-item] svg: Sets width for svg elements within item elements.\n\nThis completes the documentation for the tailwindcss.css file, providing a detailed overview of the CSS styles and classes defined within the file.",
    "apps/extension/tailwind.config.ts": "File Summary: tailwind.config.js\n\nModule Overview:\n\n  Purpose: This module exports the configuration settings for the Tailwind CSS framework used in the application.\n  Dependencies: \n  - @repo/tailwind-config: The Tailwind CSS configuration module.\n\nFunctions: \n  - N/A\n\nClasses:\n  - N/A\n\nThis file serves as the central configuration file for Tailwind CSS in the application, allowing developers to customize the design system and utility classes provided by Tailwind CSS.",
    "apps/web/.eslintrc.js": "File Summary: eslint-config.js\n\nModule Overview:\n\n  Purpose: This module defines the ESLint configuration for the project, ensuring consistent code style and quality across the codebase.\n  Dependencies: \n  - eslint: The ESLint library for linting JavaScript code.\n  - @typescript-eslint/parser: The TypeScript parser for ESLint.\n\nClasses:\nThis file does not define any classes.\n\nFunctions:\nThis file does not define any functions.\n\nOverall, this file serves as the configuration file for ESLint in the project, specifying rules and settings for code quality and style enforcement. It extends the \"@repo/eslint-config/next.js\" configuration and uses the TypeScript parser for linting TypeScript files. Additionally, it ignores the \"postcss.config.js\" file during linting.",
    "apps/web/app/(auth)/layout.tsx": "File Summary: Layout.tsx\n\nModule Overview:\n\n  Purpose: This file defines a React component called Layout, which serves as a wrapper for the main content of the application. It includes a Toaster component for displaying notifications.\n\n  Dependencies: \n  - React: A JavaScript library for building user interfaces.\n  - Toaster: A component from the \"@repo/ui/shadcn/sonner\" library for displaying notifications.\n\nFunctions:\n\n  Layout:\n  - Purpose: Renders the main content of the application within a div element, along with a Toaster component for displaying notifications.\n  - Arguments:\n    - children (React.ReactNode): The child elements to be rendered within the Layout component.\n  - Returns: \n    - React.ReactNode: The rendered content within the Layout component.\n  - Exceptions: \n    - None\n\nClasses:\n\n  None\n\nOverall, the Layout.tsx file provides a reusable layout component that can be used to structure the main content of the application and display notifications using the Toaster component.",
    "apps/web/app/(auth)/onboarding/page.tsx": "File Summary: \"use client\"\n\nModule Overview:\n\nPurpose: The file \"use client\" is a React component that serves as the main entry point for the SuperMemory application. It handles the onboarding process for new users, guiding them through the steps to get started with the application.\n\nDependencies:\n- \"@heroicons/react\": Provides icons used in the UI components.\n- \"framer-motion\": Library for creating animations in React components.\n- \"react\": JavaScript library for building user interfaces.\n- \"sonner\": Library for displaying toast notifications.\n- \"next/navigation\": Next.js library for client-side navigation.\n- \"@repo/ui\": Custom UI library for styling components.\n\nFunctions:\n\n- Home(): The main component that renders the onboarding process for new users. It includes different steps and guides users through the process.\n- StepOne({ currStep }): Renders the first step of the onboarding process, allowing users to import Twitter bookmarks.\n- StepTwo({ currStep }): Renders the second step of the onboarding process, guiding users on how to add content into SuperMemory.\n- StepThree({ currStep }): Renders the third step of the onboarding process, allowing users to ask questions and create memories.\n- Navbar(): Renders the navigation bar at the top of the page, including the SuperMemory logo and a \"Skip\" button.\n- StepIndicator({ currStep, setCurrStep }): Renders the step indicator at the bottom of the page, showing the current step and allowing users to navigate between steps.\n\nOverall, the \"use client\" file plays a crucial role in guiding new users through the onboarding process of the SuperMemory application, providing a seamless experience for getting started with the platform.",
    "apps/web/app/(auth)/privacy/page.tsx": "Page Title: PrivacyPolicy.js\n\nModule Overview:\n\n  Purpose: This module displays the Privacy Policy for the Supermemory.ai web app and browser extension, outlining the collection, storage, and protection of user information.\n  \n  Dependencies: \n  - React: A JavaScript library for building user interfaces.\n  - Markdown: A component for rendering Markdown content in React.\n\nFunctions:\n\n  Page():\n  - Purpose: Renders the Privacy Policy content on the web app.\n  - Arguments: None\n  - Returns: JSX element containing the Privacy Policy content.\n  - Exceptions: None\n\nThis file serves as a crucial component in informing users about the data handling practices of Supermemory.ai, ensuring transparency and trust in the application.",
    "apps/web/app/(auth)/signin/_components/TextGradient/gradient.module.css": "Module Overview:\n\nPurpose: This file contains keyframes animations for various visual effects used in the application, such as background panning, scaling, and rotating elements.\n\nDependencies: None\n\nClasses: None\n\nFunctions: None\n\nThis file defines keyframes animations for background panning, scaling, and rotating elements, as well as styling for stars and magic text effects used in the application. The animations are used to create visually appealing and dynamic user interfaces.",
    "apps/web/app/(auth)/signin/page.tsx": "Module Overview:\n\nPurpose: The Signin module handles the authentication process for users, allowing them to sign in using Google authentication. It also provides a user interface for the sign-in page.\n\nDependencies:\n- next/image: For displaying images efficiently.\n- next/link: For client-side navigation.\n- \"@/public/logo.svg\": The logo image used in the UI.\n- \"@/server/auth\": Contains authentication functions.\n- \"@repo/ui/components/icons\": Provides the Google icon component.\n- \"./_components/TextGradient/gradient.module.css\": Styles for text gradients.\n- \"@repo/ui/lib/utils\": Utility functions.\n- \"next/navigation\": For client-side navigation.\n- \"sonner\": For displaying toast notifications.\n\nFunctions:\n\nSignin:\n- Purpose: Renders the sign-in page UI and handles the authentication process.\n- Arguments:\n  - searchParams (Record<string, string>): The search parameters from the URL.\n- Returns: JSX element representing the sign-in page.\n- Exceptions: None\n\nOverall, the Signin module is responsible for rendering the sign-in page UI, handling the authentication process using Google authentication, and providing a smooth user experience for signing in.",
    "apps/web/app/(auth)/tos/page.tsx": "Page Title: Page.js\n\nModule Overview:\n\n  Purpose: This module represents the Terms of Service page for the Supermemory app, displaying the terms and conditions that users must agree to when using the app.\n  \n  Dependencies: \n  - React: A JavaScript library for building user interfaces.\n  - Markdown: A library for rendering Markdown content in React components.\n\nFunctions:\n\n  Page():\n  - Purpose: Renders the Terms of Service content on the page.\n  - Arguments: None\n  - Returns: JSX element containing the Terms of Service content.\n  - Exceptions: None",
    "apps/web/app/(dash)/(memories)/content.tsx": "Module Overview:\n\nPurpose: The \"use client\" file is responsible for rendering and managing memories and spaces within the application. It provides functionality for displaying memories and spaces, filtering them based on different criteria, and exporting data in JSON format.\n\nDependencies:\n- \"@/server/db/schema\": Contains schemas for content and stored spaces.\n- \"@repo/ui/icons\": Icons used for UI elements.\n- \"lucide-react\": Icons library for UI elements.\n- \"next/image\": Image component for Next.js.\n- \"next/link\": Link component for Next.js.\n- \"react\": React library for building UI components.\n- \"react-layout-masonry\": Masonry layout for arranging items.\n- \"@repo/shared-types/utils\": Utility functions for shared types.\n- \"../../../components/twitter/render-tweet\": Component for rendering tweets.\n- \"@repo/ui/shadcn/dropdown-menu\": Dropdown menu component for UI.\n- \"@repo/ui/shadcn/button\": Button component for UI.\n- \"@/app/actions/doers\": Actions for adding users, deleting items, and moving items.\n- \"sonner\": Library for displaying toast notifications.\n- \"@repo/ui/shadcn/input\": Input component for UI.\n- \"framer-motion\": Library for animations.\n- \"next/navigation\": Navigation utilities for Next.js.\n\nFunctions:\n\nMemoriesPage:\n- Purpose: Renders memories and spaces, allows filtering and exporting data.\n- Arguments:\n  - memoriesAndSpaces: Object containing memories and spaces data.\n  - title (optional): Title for the page.\n  - currentSpace (optional): Current space being viewed.\n  - usersWithAccess (optional): Users with access to the space.\n- Returns: JSX element representing the MemoriesPage component.\n- Exceptions: None.\n\nTabComponent:\n- Purpose: Renders a tab for a space with title and description.\n- Arguments:\n  - title: Title of the space.\n  - description: Description of the space.\n  - id: ID of the space.\n- Returns: JSX element representing the TabComponent.\n- Exceptions: None.\n\nLinkComponent:\n- Purpose: Renders a link component for different types of content.\n- Arguments:\n  - type: Type of content (page, note, tweet).\n  - content: Content of the item.\n  - title: Title of the item.\n  - url: URL of the item.\n  - image (optional): Image URL for the item.\n  - description: Description of the item.\n  - spaces: Array of stored spaces.\n  - id: ID of the item.\n- Returns: JSX element representing the LinkComponent.\n- Exceptions: None.\n\nFilters:\n- Purpose: Renders filter buttons for filtering memories and spaces.\n- Arguments:\n  - setFilter: Function to set the filter.\n  - filter: Current filter value.\n  - filterMethods: Array of filter methods.\n- Returns: JSX element representing the Filters component.\n- Exceptions: None.\n\nOverall, the \"use client\" file is crucial for managing and displaying memories and spaces within the application, providing various functionalities for users to interact with their data effectively.",
    "apps/web/app/(dash)/(memories)/memories/page.tsx": "Page Title: fetchMemories.js\n\nModule Overview:\n\n  Purpose: This module is responsible for fetching all user memories and spaces from the server and displaying them on the MemoriesPage component.\n\n  Dependencies: \n  - \"@/app/actions/fetchers\": Module containing the getAllUserMemoriesAndSpaces function for fetching user memories and spaces.\n  - \"next/navigation\": Module containing the redirect function for navigating to a different page.\n  - \"../content\": Module containing the MemoriesPage component for displaying user memories and spaces.\n\nFunctions:\n\n  Page():\n  - Purpose: Asynchronously fetches all user memories and spaces, redirects to the home page if the fetch is unsuccessful, and displays the fetched data on the MemoriesPage component.\n  - Arguments: None\n  - Returns: JSX element representing the MemoriesPage component with the fetched data.\n  - Exceptions: None",
    "apps/web/app/(dash)/(memories)/space/[spaceid]/page.tsx": "Page Title: fetchMemoriesInsideSpace.js\n\nModule Overview:\n\n  Purpose: This module is responsible for fetching memories inside a specific space and displaying them on the MemoriesPage component.\n  \n  Dependencies: \n  - fetchers: Module containing functions for fetching data.\n  - next/navigation: Module for handling navigation in Next.js.\n  - content: Module containing the MemoriesPage component.\n  - db: Module for interacting with the database.\n  - drizzle-orm: Library for querying the database.\n  - server/db/schema: Module containing database schema definitions.\n  - server/auth: Module for handling authentication.\n\nFunctions:\n\n  Page({ params: { spaceid } }: { params: { spaceid: number }):\n  - Purpose: Retrieves memories inside a specified space and renders them on the MemoriesPage component.\n  - Arguments:\n    - spaceid (number): The ID of the space to fetch memories from.\n  - Returns:\n    - JSX element: The MemoriesPage component with the fetched memories and space information.\n  - Exceptions:\n    - Redirect to \"/home\" if fetching memories is unsuccessful or no data is returned.\n\nNote: This file does not define any classes.",
    "apps/web/app/(dash)/chat/CodeBlock.tsx": "Module Overview:\n\nPurpose: The CodeBlock module provides a reusable component for displaying code blocks with syntax highlighting and a copy-to-clipboard feature.\n\nDependencies:\n- React: A JavaScript library for building user interfaces.\n- useRef: A React hook for accessing DOM elements.\n- useState: A React hook for managing component state.\n\nClasses:\n\nCodeBlock:\n- Purpose: Represents a code block component that displays code with syntax highlighting.\n- Attributes:\n  - lang (string): The programming language of the code block.\n  - codeChildren (React.ReactNode[]): The code content to be displayed.\n- Methods: N/A\n\nCodeBar:\n- Purpose: Represents a code block toolbar component with a copy-to-clipboard button.\n- Attributes:\n  - lang (string): The programming language of the code block.\n  - codeRef (React.RefObject<HTMLElement>): Reference to the code block element.\n- Methods:\n  - setIsCopied(isCopied: boolean) -> void: Sets the copied state of the code block toolbar.\n\nFunctions: N/A\n\nOverall, the CodeBlock module consists of two components, CodeBlock and CodeBar, that work together to display code blocks with syntax highlighting and provide a copy-to-clipboard functionality.",
    "apps/web/app/(dash)/chat/[chatid]/loading.tsx": "Page Title: Page.tsx\n\nModule Overview:\n\n  Purpose: This module represents a page component that displays a chat window with specified search parameters.\n  \n  Dependencies: \n  - React: A JavaScript library for building user interfaces.\n  - chatSearchParamsCache: A module for caching search parameters.\n  - ChatWindow: A component for displaying chat messages.\n\nFunctions:\n\n  Page:\n  - Purpose: Renders a ChatWindow component with specified search parameters.\n  - Arguments:\n    - searchParams (Record<string, string | string[] | undefined>): The search parameters to be used.\n  - Returns:\n    - JSX.Element: The rendered ChatWindow component.\n  - Exceptions:\n    - None\n\nClasses:\n\n  None",
    "apps/web/app/(dash)/chat/[chatid]/page.tsx": "Page Title: Page.tsx\n\nModule Overview:\n\n  Purpose: This module is responsible for rendering a chat window with the full chat thread based on the provided chat id. It also handles error cases when the chat is not found.\n  \n  Dependencies: \n  - getFullChatThread: Function from \"@/app/actions/fetchers\" for fetching the full chat thread.\n  - chatSearchParamsCache: Object from \"@/lib/searchParams\" for parsing search parameters.\n  - ChatWindow: Component for rendering the chat window.\n\nFunctions:\n\n  Page:\n  - Purpose: Renders the chat window with the full chat thread based on the provided chat id.\n  - Arguments:\n    - params: Object containing the chat id.\n    - searchParams: Object containing search parameters.\n  - Returns:\n    - JSX Element: The rendered ChatWindow component.\n  - Exceptions:\n    - Error: If there is an error fetching the full chat thread.\n\nNote: This file does not define any classes.",
    "apps/web/app/(dash)/chat/chatQueryInput.tsx": "Module Overview:\n\nPurpose: The \"use client\" module provides a QueryInput component that allows users to input queries and interact with spaces in the application.\n\nDependencies:\n- @repo/ui/icons: For importing the ArrowRightIcon component.\n- next/image: For importing the Image component.\n- react: For importing React, useEffect, useMemo, and useState.\n- @repo/ui/shadcn/divider: For importing the Divider component.\n- next/navigation: For importing the useRouter hook.\n- @/app/actions/fetchers: For importing the getSpaces function.\n- @repo/ui/shadcn/combobox: For importing the Combobox component.\n- lucide-react: For importing the MinusIcon component.\n- sonner: For importing the toast function.\n- @/app/actions/doers: For importing the createSpace function.\n\nFunctions:\n\nQueryInput:\n- Purpose: Represents a component for inputting queries and interacting with spaces.\n- Arguments:\n  - initialQuery (string): The initial query value.\n  - initialSpaces ({ id: number, name: string }[]): The initial spaces array.\n  - disabled (boolean): Indicates if the component is disabled.\n  - className (string): The CSS class name for styling.\n  - mini (boolean): Indicates if the component is in mini mode.\n  - handleSubmit: A function to handle form submission.\n  - setInitialSpaces: A function to set the initial spaces state.\n- Returns: A React component for inputting queries and interacting with spaces.\n- Exceptions: None.\n\nOverall, the \"use client\" module provides a QueryInput component that allows users to input queries and interact with spaces in the application. It depends on various libraries and modules for its functionality.",
    "apps/web/app/(dash)/chat/chatWindow.tsx": "Module Overview:\n\nPurpose: The \"use client\" file is responsible for rendering a chat window component that allows users to interact with a chatbot. It handles user queries, displays responses, and manages related memories.\n\nDependencies:\n- framer-motion: Library for creating animations in React components.\n- react: JavaScript library for building user interfaces.\n- @repo/ui: UI components library.\n- @repo/shared-types: Shared types used across the application.\n- next/navigation: Next.js navigation module.\n- sonner: Library for displaying toast notifications.\n- @heroicons/react: Icon library for React components.\n\nClasses:\n- ChatWindow:\n  - Purpose: Represents the chat window component for interacting with the chatbot.\n  - Attributes:\n    - q (string): The user's query.\n    - spaces (array): Array of spaces for the chat.\n    - initialChat (array): Initial chat history.\n    - threadId (string): ID of the chat thread.\n    - proMode (boolean): Flag indicating if the chat is in pro mode.\n  - Methods:\n    - removeJustificationFromText(text: string) -> string: Removes justification from text.\n    - handleTTS(text: string, idx: number) -> void: Handles text-to-speech functionality.\n    - stopTTS() -> void: Stops text-to-speech.\n    - getAnswer(query: string, spaces: string[], proMode: boolean) -> Promise<void>: Fetches and updates chat history with responses.\n    - useEffect() -> void: React hook for side effects.\n    - render() -> JSX.Element: Renders the chat window component.\n\nFunctions:\n- createChatObject(threadId: string, chatHistory: ChatHistory[]) -> void: Creates a chat object with thread ID and chat history.\n- createChatObject(threadId: string, chatHistory: ChatHistory[]) -> void: Creates a chat object with thread ID and chat history.\n- createChatObject(threadId: string, chatHistory: ChatHistory[]) -> void: Creates a chat object with thread ID and chat history.\n\nOverall, the \"use client\" file is crucial for managing user interactions with the chatbot, handling queries, and displaying responses in a chat window component.",
    "apps/web/app/(dash)/chat/markdownRenderHelpers.tsx": "Module Overview:\n\nPurpose: This module provides components for rendering code blocks and paragraphs with specific styling.\n\nDependencies:\n- react: A JavaScript library for building user interfaces.\n- react-markdown: A library for rendering Markdown content in React components.\n- CodeBlock: A custom component for displaying code blocks with syntax highlighting.\n\nFunctions:\n\ncode:\n- Purpose: Renders a code block with syntax highlighting based on the specified language.\n- Arguments:\n  - props: JSX.IntrinsicElements[\"code\"]: The props for the code block component.\n- Returns: JSX.Element: The rendered code block component.\n- Exceptions: None\n\np:\n- Purpose: Renders a paragraph with pre-wrap whitespace styling.\n- Arguments:\n  - props?: Omit<DetailedHTMLProps<HTMLAttributes<HTMLParagraphElement>, HTMLParagraphElement>, \"ref\">: Optional props for the paragraph component.\n- Returns: JSX.Element: The rendered paragraph component.\n- Exceptions: None\n\nOverall, this file provides components for displaying code blocks and paragraphs with specific styling in a React application. The 'code' function renders code blocks with syntax highlighting, while the 'p' function renders paragraphs with pre-wrap whitespace styling.",
    "apps/web/app/(dash)/chat/route.ts": "File Title: next_navigation.js\n\nModule Overview:\n\n  Purpose: This module provides functionality for redirecting users to different pages within the application using the Next.js framework.\n  \n  Dependencies: \n  - next/navigation: The module for handling navigation within the Next.js application.\n\nFunctions:\n\n  GET():\n  - Purpose: This function performs a redirect to the \"/home\" page.\n  - Arguments: None\n  - Returns: A redirect to the \"/home\" page\n  - Exceptions: None",
    "apps/web/app/(dash)/dialogContentContainer.tsx": "Module Overview:\n\nPurpose: The DialogContentContainer module is responsible for handling the creation of memories within the application. It provides a form for users to input content, select spaces, and create memories.\n\nDependencies:\n- \"@/server/db/schema\": Import of StoredSpace from the server database schema.\n- \"react\": Import of useEffect, useMemo, and useState from the React library.\n- \"../actions/doers\": Import of createMemory and createSpace functions for memory and space creation.\n- \"@repo/ui/shadcn/combobox\": Import of ComboboxWithCreate component for selecting or creating spaces.\n- \"sonner\": Import of toast function for displaying notifications.\n- \"../actions/fetchers\": Import of getSpaces function for fetching spaces.\n- \"lucide-react\": Import of MinusIcon and PlusCircleIcon icons.\n- \"@repo/ui/shadcn/dialog\": Import of DialogContent, DialogDescription, DialogFooter, DialogHeader, and DialogTitle components for creating a dialog.\n- \"@repo/ui/shadcn/label\": Import of Label component for labeling form inputs.\n- \"@repo/ui/shadcn/textarea\": Import of Textarea component for text input.\n- \"@repo/ui/shadcn/button\": Import of Button component for form submission.\n\nFunctions:\n\ncreateMemory(content: string, spaces?: number[]) -> Promise<void>:\n- Purpose: Creates a new memory with the provided content and spaces.\n- Arguments:\n  - content (string): The content of the memory.\n  - spaces (optional number[]): An array of space IDs associated with the memory.\n- Returns: Promise<void>\n- Exceptions: Displays error notifications if content is missing or memory creation fails.\n\ngetSpaces() -> Promise<{ success: boolean, data?: StoredSpace[] }:\n- Purpose: Fetches the list of spaces from the server.\n- Returns: Promise<{ success: boolean, data?: StoredSpace[] }>\n- Exceptions: Displays a warning notification if fetching spaces fails.\n\nhandleSubmit(content?: string, spaces?: number[]) -> void:\n- Purpose: Handles form submission by calling createMemory function and displaying notifications.\n- Arguments:\n  - content (optional string): The content of the memory.\n  - spaces (optional number[]): An array of space IDs associated with the memory.\n- Returns: void\n\nuseEffect():\n- Purpose: Fetches spaces from the server when the component mounts.\n\nOverall, the DialogContentContainer module facilitates the creation of memories by providing a user-friendly form for inputting content and selecting spaces. It utilizes various dependencies for state management, UI components, and server interactions.",
    "apps/web/app/(dash)/dialogTriggerWrapper.tsx": "File Summary: \"use client\"\n\nModule Overview:\n\n  Purpose: This file contains components related to triggering dialogs for desktop and mobile views within the application.\n  Dependencies: \n  - \"@repo/ui/shadcn/dialog\": Dialog and DialogTrigger components from the UI library.\n  - \"react\": Library for building user interfaces.\n  - \"./dialogContentContainer\": DialogContentContainer component.\n  - \"@heroicons/react/24/solid\": PlusIcon component for adding icons.\n\nFunctions:\n\n  DialogDesktopTrigger():\n  - Purpose: Renders a trigger button for opening a dialog on desktop view.\n  \n  DialogMobileTrigger():\n  - Purpose: Renders a trigger button for opening a dialog on mobile view.\n  \n  DialogTriggerWrapper({ children: React.ReactNode }):\n  - Purpose: Wraps the dialog trigger components and manages the dialog state.\n  - Arguments:\n    - children (React.ReactNode): The child components to be rendered within the dialog trigger.\n  - Returns: JSX elements for the dialog trigger and content container.\n  - Exceptions: None\n\nNote: This file does not contain any classes.",
    "apps/web/app/(dash)/header/autoBreadCrumbs.tsx": "Module Overview:\n\nPurpose: The \"use client\" module is responsible for managing the breadcrumbs displayed on the application's UI. It dynamically generates breadcrumb links based on the current pathname.\n\nDependencies:\n- @repo/ui/shadcn/breadcrumb: Provides components for rendering breadcrumbs.\n- next/navigation: Provides the usePathname hook for accessing the current pathname.\n- React: JavaScript library for building user interfaces.\n\nFunctions:\n\nAutoBreadCrumbs():\n- Purpose: Generates breadcrumb links based on the current pathname.\n- Arguments: None\n- Returns: React component for rendering breadcrumbs.\n- Exceptions: None\n\nOverall, the \"use client\" module plays a crucial role in enhancing user navigation within the application by dynamically generating breadcrumb links based on the current pathname.",
    "apps/web/app/(dash)/header/header.tsx": "File Summary: Header.js\n\nModule Overview:\n\nPurpose: The Header module is responsible for rendering the header component of the application, which includes the logo, chat history dropdown menu, and sign out button.\nDependencies:\n- React: A JavaScript library for building user interfaces.\n- Next.js: A React framework for building server-side rendered applications.\n- @repo/ui/shadcn/dropdown-menu: A custom dropdown menu component.\n- @radix-ui/react-icons: A library of accessible SVG icons.\n\nFunctions:\n\nHeader():\n- Purpose: Asynchronously fetches chat history data and renders the header component.\n- Returns: The JSX element representing the header component.\n- Exceptions: None\n\nClasses: None\n\nOverall, the Header module plays a crucial role in providing the user interface elements for navigating the application, displaying the logo, managing chat history, and enabling user sign out functionality.",
    "apps/web/app/(dash)/header/newChatButton.tsx": "Page Title: NewChatButton.js\n\nModule Overview:\n\n  Purpose: This module defines a React component called NewChatButton that displays a button to start a new chat if the current path is \"/chat\".\n  Dependencies: \n  - @repo/ui/icons: Provides the ChatIcon component.\n  - next/image: Allows for the rendering of images.\n  - next/link: Enables linking to other pages.\n  - next/navigation: Provides the usePathname hook for accessing the current path.\n  - react: The React library for building user interfaces.\n\nFunctions:\n\n  NewChatButton():\n  - Purpose: Renders a button to start a new chat if the current path is \"/chat\".\n  - Arguments: None\n  - Returns: A React component representing the new chat button.\n  - Exceptions: None\n\nNote: This file does not contain any classes, only a single functional component.",
    "apps/web/app/(dash)/header/signOutButton.tsx": "Module Overview:\n\n  Purpose: The SignOutButton module provides a button component that allows users to sign out of the application.\n  \n  Dependencies: \n  - \"@/server/auth\": Module for handling authentication-related functionalities.\n  - \"@repo/ui/shadcn/button\": Button component from the UI library for styling and functionality.\n\nFunctions:\n\n  SignOutButton():\n  - Purpose: Renders a button component that triggers the sign-out process when clicked.\n  - Arguments: None\n  - Returns: JSX element representing the sign-out button.\n  - Exceptions: None\n\nNote: This module does not define any classes, only a default function for rendering the sign-out button component.",
    "apps/web/app/(dash)/home/filterSpaces.tsx": "File Summary: FilterSpaces.tsx\n\nModule Overview:\n\n  Purpose: The FilterSpaces component provides a user interface for filtering and selecting spaces within the application.\n  Dependencies: \n  - Command, CommandGroup, CommandInput, CommandItem, CommandList from \"@repo/ui/shadcn/command\"\n  - Check, Search from \"lucide-react\"\n  - React, useState from \"react\"\n\nFunctions:\n\n  FilterSpaces:\n  - Purpose: Renders a component for filtering and selecting spaces.\n  - Arguments:\n    - initialSpaces (space[]): An array of initial spaces to display.\n    - selectedSpaces (space[]): An array of selected spaces.\n    - setSelectedSpaces (React.Dispatch<React.SetStateAction<space[]>>): A function to update the selected spaces.\n  - Returns: JSX element representing the FilterSpaces component.\n  - Exceptions: None\n\n  handleKeyDown:\n  - Purpose: Handles keydown events for input field.\n  - Arguments:\n    - e (React.KeyboardEvent<HTMLInputElement>): The keyboard event.\n  - Returns: None\n  - Exceptions: None\n\n  handleSelect:\n  - Purpose: Handles the selection of a space.\n  - Arguments:\n    - selectedSpace (space): The space to be selected.\n  - Returns: None\n  - Exceptions: None\n\nAttributes:\n\n  - input (string): The input value for filtering spaces.\n\nClasses: None\n\nOverall, the FilterSpaces component allows users to filter and select spaces by providing a search input field and a list of available spaces to choose from. The component dynamically updates the selected spaces based on user interactions.",
    "apps/web/app/(dash)/home/history.tsx": "Module Overview:\n\n  Purpose: The History module is responsible for displaying query suggestions to users based on their search history. It fetches query suggestions from the server and renders them in a list format for users to select from.\n\n  Dependencies: \n  - \"@heroicons/react/24/outline\": Provides the ArrowLongRightIcon component for displaying an arrow icon.\n  - \"@repo/ui/shadcn/skeleton\": Provides the Skeleton component for displaying loading placeholders.\n  - \"react\": Library for building user interfaces.\n  - \"framer-motion\": Library for creating animations.\n  - \"@/app/actions/doers\": Contains the getQuerySuggestions function for fetching query suggestions.\n\nFunctions:\n\n  History:\n  - Purpose: Displays query suggestions to users based on their search history.\n  - Arguments:\n    - setQuery (function): A function to set the search query in the parent component.\n  - Returns:\n    - JSX element: A list of query suggestions rendered in a styled format.\n  - Exceptions:\n    - None\n\nNote: The History module does not define any classes.",
    "apps/web/app/(dash)/home/page.tsx": "Module Overview:\n\nPurpose: The \"use client\" module is responsible for handling client-side interactions and functionalities within the application.\n\nDependencies:\n- React: A JavaScript library for building user interfaces.\n- QueryInput: A component for handling user input queries.\n- getSessionAuthToken, getSpaces, linkTelegramToUser, createChatThread, getQuerySuggestions: Functions for fetching data and performing actions.\n- toast: A notification library for displaying messages to the user.\n- motion: A library for adding animations to components.\n- ChromeIcon, GithubIcon, MailIcon, TwitterIcon: Icons used for visual representation.\n- Link: A component for navigating to different pages.\n- History: A component for displaying search history.\n\nFunctions:\n\nPage({ searchParams }: { searchParams: Record<string, string> }): \n- Purpose: Renders the main page content with search functionality.\n- Arguments:\n  - searchParams (Record<string, string>): Object containing search parameters.\n- Returns: JSX element representing the page content.\n- Exceptions: None\n\ncreateChatThread(q: string): \n- Purpose: Creates a chat thread based on the provided query.\n- Arguments:\n  - q (string): The query to create the chat thread with.\n- Returns: Promise containing the thread ID.\n- Exceptions: None\n\nlinkTelegramToUser(telegramUser: string): \n- Purpose: Links a Telegram user to the current user.\n- Arguments:\n  - telegramUser (string): The Telegram user to link.\n- Returns: Promise containing the response data.\n- Exceptions: None\n\ngetSpaces(): \n- Purpose: Retrieves a list of spaces.\n- Arguments: None\n- Returns: Promise containing the list of spaces.\n- Exceptions: None\n\ngetSessionAuthToken(): \n- Purpose: Retrieves the session authentication token.\n- Arguments: None\n- Returns: Promise containing the authentication token.\n- Exceptions: None\n\nOverall, the \"use client\" module handles user interactions, data fetching, and rendering components for the main page of the application. It relies on various dependencies and functions to provide a seamless user experience.",
    "apps/web/app/(dash)/home/queryinput.tsx": "Module Overview:\n\n  Purpose: The \"use client\" module provides a query input component for users to search and submit queries. It includes functionalities for filtering spaces, enabling pro mode, and submitting queries.\n\n  Dependencies: \n  - React: JavaScript library for building user interfaces.\n  - next/image: Image component for optimizing images in Next.js.\n  - @repo/ui/icons: Icon component library.\n  - @repo/ui/shadcn/switch: Switch component for toggling pro mode.\n  - @repo/ui/shadcn/label: Label component for form inputs.\n\nFunctions:\n\n  QueryInput:\n  - Purpose: Represents the query input component for users to search and submit queries.\n  - Arguments:\n    - initialSpaces?: Array of objects with id and name properties for initial spaces.\n    - mini?: Boolean indicating if the component should be displayed in a mini mode.\n    - handleSubmit: Function to handle query submission.\n    - query: String representing the current query input value.\n    - setQuery: Function to update the query input value.\n  - Returns: JSX element representing the query input component.\n  - Exceptions: None\n\nNote: The \"use client\" module does not define any classes.",
    "apps/web/app/(dash)/layout.tsx": "Page Title: Layout.tsx\n\nModule Overview:\n\n  Purpose: This module defines the layout structure of the application, including the header, menu, and main content area. It also handles user authentication and onboarding checks.\n  \n  Dependencies: \n  - Header: Component for displaying the header of the application.\n  - Menu: Component for displaying the menu options.\n  - next/navigation: Library for handling page redirection.\n  - server/auth: Module for user authentication.\n  - @repo/ui/shadcn/sonner: Component for displaying toast notifications.\n  - (landing)/GridPatterns/PlusGrid: Component for displaying a background pattern.\n  - actions/fetchers: Module for fetching user data.\n\nFunctions:\n\n  Layout:\n  - Purpose: Renders the main layout of the application, including the header, menu, and main content area.\n  - Arguments:\n    - children (React.ReactNode): The child components to be rendered within the layout.\n  - Returns:\n    - ReactNode: The rendered layout.\n  - Exceptions:\n    - None\n\nNote: This file does not contain any classes.",
    "apps/web/app/(dash)/menu.tsx": "Module Overview:\n\nPurpose: The \"use client\" file is responsible for defining the Menu component, which allows users to interact with the application by adding memories, selecting spaces, and navigating through different sections of the app.\n\nDependencies:\n- React: A JavaScript library for building user interfaces.\n- Next.js: A React framework for building server-rendered applications.\n- @repo/ui: Custom UI components for the application.\n- lucide-react: A library of icons for React applications.\n- sonner: A library for displaying toast notifications.\n- @heroicons/react: A set of icons for React applications.\n- react-use-measure: A React hook for measuring elements.\n- @/lib/useKeyPress: A custom hook for handling key presses.\n\nFunctions:\n\nMenu():\n- Purpose: Renders the Menu component with functionality for adding memories, selecting spaces, and navigating through different sections of the app.\n- Arguments: None\n- Returns: JSX elements representing the Menu component.\n- Exceptions: None\n\nhandleSubmit(content?: string, spaces?: number[]):\n- Purpose: Handles the submission of a memory with optional content and selected spaces.\n- Arguments:\n  - content (string): The content of the memory.\n  - spaces (number[]): An array of selected space IDs.\n- Returns: Promise containing the result of memory creation.\n- Exceptions: Throws an error if content is empty or memory creation fails.\n\nAttributes and Methods:\n- The file also defines various attributes and methods within the Menu component, such as state variables, event handlers, and helper functions for managing content, spaces, and dialog visibility.\n\nOverall, the \"use client\" file plays a crucial role in providing users with a seamless experience in adding memories, organizing spaces, and navigating the application's different sections.",
    "apps/web/app/(dash)/note/[noteid]/page.tsx": "Page Title: Page.tsx\n\nModule Overview:\n\n  Purpose: This module represents a page component that displays a note based on the provided note id.\n  Dependencies: \n  - getNoteFromId: Function from \"@/app/actions/fetchers\" for fetching a note based on its id.\n  - NotebookIcon: Component from \"lucide-react\" for displaying a notebook icon.\n\nFunctions:\n\n  Page:\n  - Purpose: Renders a page displaying the note with the given note id.\n  - Arguments:\n    - params (object): An object containing the note id as a string.\n  - Returns:\n    - JSX.Element: The rendered page component.\n  - Exceptions: None\n\nNote: This file does not contain any classes.",
    "apps/web/app/(landing)/CardPatterns/AnimatedBeam.tsx": "Module Overview:\n\nPurpose: The \"use client\" file provides the functionality for creating an animated beam effect between two HTML elements on a webpage.\n\nDependencies:\n- \"@repo/ui/lib/utils\": Utility functions from the UI library.\n- \"framer-motion\": Library for creating animations in React.\n- \"react\": JavaScript library for building user interfaces.\n\nClasses:\n\nAnimatedBeam:\n- Purpose: Represents the animated beam effect between two HTML elements.\n- Attributes:\n  - className (string): Additional CSS classes for styling.\n  - containerRef (RefObject<HTMLElement>): Reference to the container element.\n  - fromRef (RefObject<HTMLElement>): Reference to the starting element.\n  - toRef (RefObject<HTMLElement>): Reference to the ending element.\n  - curvature (number): Curvature of the beam.\n  - reverse (boolean): Flag to reverse the gradient coordinates.\n  - pathColor (string): Color of the beam path.\n  - pathWidth (number): Width of the beam path.\n  - pathOpacity (number): Opacity of the beam path.\n  - gradientStartColor (string): Start color of the gradient.\n  - gradientStopColor (string): Stop color of the gradient.\n  - delay (number): Delay before animation starts.\n  - duration (number): Duration of the animation.\n  - startXOffset (number): X-axis offset for the starting element.\n  - startYOffset (number): Y-axis offset for the starting element.\n  - endXOffset (number): X-axis offset for the ending element.\n  - endYOffset (number): Y-axis offset for the ending element.\n- Methods:\n  - updatePath(): Updates the path of the beam based on element positions.\n  - resizeObserver(): Observes changes in the container element size.\n  - useEffect(): Initializes the component and cleans up on unmount.\n\nFunctions: N/A\n\nOverall, the \"use client\" file contains the implementation for creating an animated beam effect between two HTML elements using React and Framer Motion libraries. It calculates the path of the beam based on the positions of the elements and animates the gradient color transition.",
    "apps/web/app/(landing)/CardPatterns/AnimatedBeamWithOutput.tsx": "Functions:\n\nGoogleDriveIcon():\n- Purpose: Renders the Google Drive icon SVG component.\n- Arguments: None\n- Returns: SVG element representing the Google Drive icon.\n- Exceptions: None\n\nGoogleDocsIcon():\n- Purpose: Renders the Google Docs icon SVG component.\n- Arguments: None\n- Returns: SVG element representing the Google Docs icon.\n- Exceptions: None\n\nWhatsAppIcon():\n- Purpose: Renders the WhatsApp icon SVG component.\n- Arguments: None\n- Returns: SVG element representing the WhatsApp icon.\n- Exceptions: None\n\nOverall, the codefile contains additional SVG icon components for Google Drive, Google Docs, and WhatsApp, enhancing the visual representation of the application with these specific icons.",
    "apps/web/app/(landing)/CardPatterns/AnimatedGrid.tsx": "File Summary: \"use client\"\n\nModule Overview:\n\nPurpose: The \"GridPattern\" module provides a component for rendering a grid pattern with animated squares on a SVG canvas. It allows for customization of the grid dimensions, animation properties, and styling.\n\nDependencies:\n- \"@repo/ui/lib/utils\": Provides utility functions for classnames.\n- \"framer-motion\": Library for creating animations in React components.\n- \"react\": Library for building user interfaces in React.\n\nFunctions:\n\nGridPattern:\n- Purpose: Renders a grid pattern with animated squares on an SVG canvas.\n- Arguments:\n  - width (number): Width of each square in the grid.\n  - height (number): Height of each square in the grid.\n  - x (number): X-coordinate offset of the grid.\n  - y (number): Y-coordinate offset of the grid.\n  - strokeDasharray (any): Stroke dash array for the grid lines.\n  - numSquares (number): Number of squares to render in the grid.\n  - className (string): Additional classnames for styling.\n  - maxOpacity (number): Maximum opacity for the squares during animation.\n  - duration (number): Duration of the animation.\n  - repeatDelay (number): Delay between animation repeats.\n- Returns: JSX element representing the grid pattern.\n- Exceptions: None\n\ngenerateSquares:\n- Purpose: Generates an array of square objects with random positions.\n- Arguments:\n  - count (number): Number of squares to generate.\n- Returns: Array of square objects with id and position attributes.\n- Exceptions: None\n\nupdateSquarePosition:\n- Purpose: Updates the position of a single square in the grid.\n- Arguments:\n  - id (number): ID of the square to update.\n- Returns: None\n- Exceptions: None\n\nresizeObserver:\n- Purpose: Observes changes in the container dimensions to update the grid.\n- Arguments: None\n- Returns: None\n- Exceptions: None\n\nOverall, the \"GridPattern\" module provides a flexible and interactive grid pattern component for visualizing data or creating visual effects in a React application.",
    "apps/web/app/(landing)/CardPatterns/Glare.tsx": "Module Overview:\n\nPurpose: The \"use client\" file contains the GlareCard component, which is responsible for rendering a visually appealing card with interactive hover effects.\n\nDependencies:\n- \"@repo/ui/lib/utils\": Utility functions from the UI library.\n- \"react\": React library for building user interfaces.\n\nClasses:\n\nGlareCard:\n- Purpose: Represents a card component with dynamic styling and interactive hover effects.\n- Attributes:\n  - children (React.ReactNode): The content to be displayed within the card.\n  - className (string): Optional class name for additional styling.\n- Methods:\n  - updateStyles() -> void: Updates the styling of the card based on user interaction.\n  - onPointerMove(event: PointerEvent) -> void: Handles the pointer movement event to update card styling.\n  - onPointerEnter() -> void: Handles the pointer enter event to adjust card styling.\n  - onPointerLeave() -> void: Handles the pointer leave event to reset card styling.\n\nFunctions:\n- N/A\n\nOverall, the \"use client\" file contains the GlareCard component, which utilizes useRef and CSS variables to create a visually appealing card with interactive hover effects. The component dynamically updates its styling based on user interaction, providing an engaging user experience.",
    "apps/web/app/(landing)/Cta.tsx": "Module Overview:\n\nPurpose: The Cta module is responsible for rendering a call-to-action section on the webpage. It displays information about the upcoming launch date, prompts users to sign up for the waitlist, and provides a link to sign in.\n\nDependencies:\n- React: A JavaScript library for building user interfaces.\n- EmailInput: A custom component for inputting email addresses.\n- lucide-react: A library of icons for use in React applications.\n- next/link: A routing library for Next.js applications.\n\nFunctions:\n\nCta():\n- Purpose: Renders the call-to-action section on the webpage.\n- Arguments: None\n- Returns: JSX element representing the call-to-action section.\n- Exceptions: None\n\nOverall, the Cta module plays a crucial role in engaging users and encouraging them to sign up for the waitlist before the launch date. It utilizes various dependencies to create an interactive and visually appealing section on the webpage.",
    "apps/web/app/(landing)/EmailInput.tsx": "Module Overview:\n\n  Purpose: The \"use client\" module is responsible for handling email input functionality within the application. It allows users to submit their email address to join a waitlist and receive notifications upon launch.\n  \n  Dependencies: \n  - react: A JavaScript library for building user interfaces.\n  - formSubmitAction: A function for submitting form data.\n  - useToast: A custom hook for displaying toast notifications.\n  - lucide-react: A library for adding icons to the UI.\n\nFunctions:\n\n  EmailInput():\n  - Purpose: Renders a form for users to input their email address and submit it to join the waitlist.\n  - Arguments: None\n  - Returns: JSX element representing the email input form.\n  - Exceptions: None\n\nNote: The \"use client\" module does not contain any classes.",
    "apps/web/app/(landing)/FeatureCardContent.tsx": "Module Overview:\n\nPurpose: This file, FUIFeatureSectionWithCards, is responsible for rendering a section with feature cards on the UI. It displays various features with icons, titles, and descriptions in a visually appealing layout.\n\nDependencies:\n- \"@repo/ui/components/icons\": Provides icons like Twitter, Search, and MessageCircle for the feature cards.\n- \"./CardPatterns/Glare\": Imports the GlareCard component for styling the feature cards.\n- \"react\": Allows the use of React components in the file.\n- \"lucide-react\": Provides additional icons like Search for the feature cards.\n\nFunctions:\n- FUIFeatureSectionWithCards(): Renders a section with feature cards displaying different features with icons, titles, and descriptions. It maps over the features array to generate individual cards for each feature.\n  - Arguments: None\n  - Returns: JSX elements representing the feature section.\n  - Exceptions: None\n\nFeature Objects:\n- Each feature object in the features array represents a specific feature to be displayed in a feature card.\n  - icon: The icon representing the feature.\n  - title: The title of the feature.\n  - desc: The description of the feature.\n\nOverall, this file is crucial for showcasing various features of the application in an organized and visually appealing manner.",
    "apps/web/app/(landing)/FeatureContent.tsx": "File Summary: features.js\n\nModule Overview:\n\n  Purpose: This file defines an array of features that cater to different user roles within the application, such as researchers, content writers, and developers. Each feature includes a title, description, and an associated SVG icon.\n  \n  Dependencies: None\n\nClasses: N/A\n\nFunctions: N/A\n\nOverall, this file serves as a central repository for defining and organizing the various features available in the application for different user roles. Developers can easily reference this file to understand the available features and their descriptions.",
    "apps/web/app/(landing)/Features.tsx": "Module Overview:\n\nPurpose: The Features file is responsible for rendering a section on the webpage that showcases the features of the application. It includes a header, description, and a call-to-action button for users to get started.\n\nDependencies:\n- react: A JavaScript library for building user interfaces.\n- lucide-react: A library of icons for use in React applications.\n- next/link: A routing library for Next.js applications.\n- ./FeatureCardContent: A custom component for displaying feature cards.\n\nFunctions:\n- heightFix(): This function adjusts the height of the parent element based on the height of the tabs.\n  - Arguments: None\n  - Returns: None\n  - Exceptions: None\n\nClasses: None\n\nOverall, the Features file is essential for displaying the key features of the application to users and encouraging them to take action. It utilizes various dependencies to create an engaging user interface.",
    "apps/web/app/(landing)/Features/chatbubble.tsx": "Module Overview:\n\n  Purpose: The ChatBubbleWing module provides a component for rendering a chat bubble wing icon in the application.\n\n  Dependencies: \n  - React: The library for building user interfaces in the application.\n\nFunctions:\n\n  ChatBubbleWing:\n  - Purpose: Renders a chat bubble wing icon.\n  - Arguments:\n    - className (string): Optional class name for styling the SVG element.\n    - pathClassName (string): Optional class name for styling the path element.\n    - Returns:\n       - JSX: The SVG element representing the chat bubble wing icon.\n  - Exceptions:\n    - None\n\nNote: This file does not contain any classes, as it is a functional component in React.",
    "apps/web/app/(landing)/Features/features.tsx": "File Summary: Gradient.tsx\n\nModule Overview:\n\n  Purpose: This file defines a React component called Gradient, which renders a gradient effect with customizable opacity.\n  Dependencies: \n  - cn: Function from \"@repo/ui/lib/utils\" for generating class names dynamically.\n\nFunctions:\n\n  Gradient:\n  - Purpose: Renders a gradient effect with customizable opacity.\n  - Arguments:\n    - opacity (number): The opacity level of the gradient effect (default is 50).\n  - Returns:\n    - JSX.Element: The rendered gradient effect.\n  - Exceptions:\n    - None\n\nNote: This file does not contain any classes, only a functional component.",
    "apps/web/app/(landing)/Features/generating.tsx": "Module Overview:\n\n  Purpose: This module defines a component called Generating that displays a loading message with a loader icon while searching for information.\n\n  Dependencies: \n  - lucide-react: Library for displaying icons.\n\nFunctions:\n\n  Generating:\n  - Purpose: Renders a loading message with a loader icon.\n  - Arguments:\n    - className (string): Optional class name for styling.\n  - Returns:\n    - JSX element: A div element with the loading message and icon.\n  - Exceptions:\n    - None\n\nClasses:\n\n  None",
    "apps/web/app/(landing)/Features/index.tsx": "Module Overview:\n\nPurpose: The Services module is responsible for rendering a section of the application that showcases the features and benefits of the product. It includes visual elements, text content, and interactive components to engage users.\n\nDependencies:\n- lucide-react: Provides icons used in the component.\n- \"./features\": Imports the Gradient component used in the module.\n- \"./generating\": Imports the Generating component used in the module.\n- \"next/image\": Allows for optimized image loading and rendering.\n- \"../CardPatterns/AnimatedBeamWithOutput\": Imports the AnimatedBeamShow component used in the module.\n\nFunctions:\n- Services: Renders the content for the Services section of the application. It includes text, images, and interactive elements to showcase the product's features and benefits.\n\nAttributes:\n- supermemoryPoints: An array containing key points highlighting the product's features such as privacy focus, accessibility, self-hosting capability, and affordability.\n\nOverall, the Services module serves as a visually engaging and informative section of the application that highlights the key features and benefits of the product.",
    "apps/web/app/(landing)/GridPatterns/PlusGrid.tsx": "Module Overview:\n\nPurpose: The BackgroundPlus module provides a React functional component for rendering a background pattern with a plus sign overlay. It allows customization of the plus sign color, size, background color, and fade effect.\n\nDependencies: \n- React: JavaScript library for building user interfaces.\n\nFunctions:\n\nBackgroundPlus:\n- Purpose: Renders a background pattern with a plus sign overlay.\n- Arguments:\n  - plusColor (string): The color of the plus sign. Default is \"#6b6b6b\".\n  - backgroundColor (string): The background color. Default is \"transparent\".\n  - plusSize (number): The size of the plus sign. Default is 60.\n  - className (string): Additional CSS class names.\n  - fade (boolean): Whether to apply a fade effect. Default is true.\n  - style (React.CSSProperties): Additional inline styles.\n  - props (object): Additional props.\n- Returns: A React element representing the background pattern with the plus sign overlay.\n- Exceptions: None.",
    "apps/web/app/(landing)/Headers/Navbar.tsx": "Module Overview:\n\nPurpose: The file contains components for a slide navigation bar with tabs for different sections of a website.\nDependencies:\n- React: A JavaScript library for building user interfaces.\n- framer-motion: A library for creating animations in React components.\n- next/image: A component for optimizing images in Next.js applications.\n- next/link: A component for client-side navigation in Next.js.\n- lucide-react: A library of icons for React components.\n\nClasses:\n\nSlideNavTabs:\n- Purpose: Renders a fixed slide navigation bar with tabs for different sections.\n- Methods: None\n\nSlideTabs:\n- Purpose: Renders the individual tabs within the slide navigation bar.\n- Attributes:\n  - position (object): State object containing the position, width, and opacity of the tab.\n- Methods: None\n\nTab:\n- Purpose: Represents an individual tab within the slide navigation bar.\n- Attributes:\n  - ref (React.RefObject): Reference to the tab element.\n- Methods: None\n\nCursor:\n- Purpose: Renders a cursor element that follows the user's mouse movements.\n- Attributes:\n  - position (object): Object containing the position, width, and opacity of the cursor.\n- Methods: None\n\nFunctions: None\n\nOverall, this file contains components for a slide navigation bar with tabs that link to different sections of a website. The components utilize React, framer-motion, next/image, next/link, and lucide-react for various functionalities such as animations, image optimization, and icon rendering.",
    "apps/web/app/(landing)/Hero.tsx": "Module Overview:\n\nPurpose: The \"use client\" module is responsible for rendering the Hero component, which is a key part of the landing page for the application. It displays a visually appealing and informative section introducing the Supermemory platform to users.\n\nDependencies:\n- React: A JavaScript library for building user interfaces.\n- framer-motion: A library for creating animations in React components.\n- @repo/ui/components/icons: Custom icons used in the component.\n- EmailInput: A custom input component for email addresses.\n- linkArrow: A custom arrow component for links.\n- twitterLink: A custom Twitter link component.\n- ImageSliders: A component for displaying animated logos.\n- lucide-react: A library of icons for React components.\n- next/link: A library for client-side routing in Next.js applications.\n\nFunctions:\n\nHero():\n- Purpose: Renders the Hero component, which introduces the Supermemory platform to users.\n- Arguments: None\n- Returns: JSX elements representing the Hero component.\n- Exceptions: None\n\nOverall, the \"use client\" module plays a crucial role in presenting the Supermemory platform to users through the Hero component, utilizing various dependencies for styling, animations, and functionality.",
    "apps/web/app/(landing)/ImageSliders.tsx": "Summary for the designated file:\n\nModule Overview:\n\nPurpose: This file contains components for displaying various social media icons like Github, Medium, Notion, Reddit, and Twitter in the application.\nDependencies: This file depends on the \"@repo/ui/components/icons\" module for importing the icon components and the \"next/image\" module for image optimization.\n\nClasses:\n\nGithub:\n- Purpose: Represents the Github icon component.\n- Attributes: \n  - className (string): Optional class name for styling.\n- Methods: N/A\n\nMediumText:\n- Purpose: Represents the Medium icon component.\n- Attributes: \n  - className (string): Optional class name for styling.\n- Methods: N/A\n\nNotionText:\n- Purpose: Represents the Notion icon component.\n- Attributes: \n  - className (string): Optional class name for styling.\n- Methods: N/A\n\nFunctions: N/A\n\nOverall, this file provides components for displaying social media icons in the application, allowing users to interact with various platforms seamlessly.",
    "apps/web/app/(landing)/Navbar.tsx": "File Summary: \"use client\"\n\nModule Overview:\n\n  Purpose: This file contains the Navbar component for the application, which includes functionality for displaying a navigation bar with sliding tabs.\n  Dependencies: \n  - \"@radix-ui/react-icons\": Library for importing icons.\n  - \"next/image\": Library for optimizing images.\n  - \"next/link\": Library for creating links in Next.js.\n  - \"react\": Library for building user interfaces.\n  - \"framer-motion\": Library for creating animations.\n\nClasses:\n- None\n\nFunctions:\n- NavbarContent(): Renders the SlideNavTabs component within a div.\n  - Purpose: Displays the navigation tabs.\n  - Arguments: None\n  - Returns: JSX element\n\n- Navbar(): Renders the navigation bar with sliding animation based on scroll position.\n  - Purpose: Displays the navigation bar with sliding animation.\n  - Arguments: None\n  - Returns: JSX element\n  - Exceptions: None\n\nOverall, this file provides the necessary components and functionality for the navigation bar in the application, including animations and responsiveness based on scroll position.",
    "apps/web/app/(landing)/RotatingIcons.tsx": "Module Overview:\n\nPurpose: The \"use client\" module is responsible for displaying rotating icons of various social media platforms on a webpage. It adds visual appeal and interactivity to the user interface.\n\nDependencies:\n- framer-motion: A library for creating animations in React components.\n- @repo/ui/components/icons: Custom icons for social media platforms.\n- next/image: A component for optimizing and displaying images in Next.js applications.\n\nFunctions:\n- RotatingIcons: This function is a React functional component that renders a collection of rotating social media icons. It creates a visually engaging display of icons that spin continuously. The function also includes a heading and a logo image. The purpose of this function is to enhance the visual appeal of the webpage and provide a dynamic user experience.\n\nClasses:\nN/A\n\nOverall, the \"use client\" module enhances the user interface by displaying rotating social media icons, creating an engaging and interactive experience for users visiting the webpage.",
    "apps/web/app/(landing)/Showcase.tsx": "Module Overview:\n\nPurpose: The \"use client\" module is responsible for showcasing the features of the Supermemory application, highlighting different use cases such as Ideation, Bookmarks, and Contacts. It provides a visual representation of these features along with a brief summary and description.\n\nDependencies:\n- react: A JavaScript library for building user interfaces.\n- next/image: A component for optimizing images in Next.js applications.\n- @headlessui/react: A library for building accessible UI components.\n- clsx: A utility for conditionally joining classNames together.\n- \"../../public/images\": Directory containing images used in the features section.\n\nClasses:\n- Feature:\n  - Purpose: Represents a specific feature within the Supermemory application.\n  - Attributes:\n    - name (React.ReactNode): The name of the feature.\n    - summary (string): A brief summary of the feature.\n    - description (string): Detailed description of the feature.\n    - image (ImageProps[\"src\"]): Source of the image representing the feature.\n    - icon (React.ComponentType): Icon component representing the feature.\n  - Methods: N/A\n\nFunctions:\n- Feature:\n  - Purpose: Renders a feature component with the provided feature data.\n  - Arguments:\n    - feature (Feature): The feature object containing data for the feature.\n    - isActive (boolean): Indicates if the feature is currently active.\n    - className (string): Additional CSS classes for styling.\n  - Returns: A React component representing the feature.\n\n- FeaturesMobile:\n  - Purpose: Renders the features section for mobile devices.\n  - Arguments: N/A\n  - Returns: A React component displaying features in a mobile-friendly layout.\n\n- FeaturesDesktop:\n  - Purpose: Renders the features section for desktop devices using tabs.\n  - Arguments: N/A\n  - Returns: A React component displaying features in a tabbed layout for desktop users.\n\n- Showcases:\n  - Purpose: Renders the entire showcases section showcasing the features of the Supermemory application.\n  - Arguments: N/A\n  - Returns: A React component displaying the showcases section.\n\n- Container:\n  - Purpose: A wrapper component for setting max-width and padding for content.\n  - Arguments:\n    - className (string): Additional CSS classes for styling.\n  - Returns: A div element with specified styling.\n\nOverall, the \"use client\" module is crucial for presenting the key features of the Supermemory application in an engaging and informative manner, catering to both mobile and desktop users.",
    "apps/web/app/(landing)/footer.tsx": "Module Overview:\n\nPurpose: The Footer module represents the footer component of the application, providing essential links for users to contact the company through email, Twitter, and GitHub.\n\nDependencies: \n- React: A JavaScript library for building user interfaces.\n- LinkArrow: A custom component for displaying arrow icons in links.\n\nFunctions:\n\nFooter():\n- Purpose: Renders the footer component with links to contact, Twitter, and GitHub.\n- Arguments: None\n- Returns: The rendered footer component.\n- Exceptions: None\n\nClasses: None\n\nOverall, the Footer module serves as a crucial component for user interaction and navigation within the application, providing important contact information and social media links.",
    "apps/web/app/(landing)/formSubmitAction.ts": "File Summary: use server\n\nModule Overview:\n\n  Purpose: This file contains a function for submitting an email form and handling rate limiting based on the client's IP address.\n  Dependencies: \n  - next/headers: Library for handling HTTP headers.\n  - fetch: Library for making HTTP requests.\n\nFunctions:\n\n  formSubmitAction(email: string, token: string) -> Promise<{ value: any, success: boolean }>: \n  - Purpose: Submits an email form and handles rate limiting based on the client's IP address.\n  - Arguments:\n    - email (string): The email address to be submitted.\n    - token (string): The token for authorization.\n  - Returns:\n    - Promise<{ value: any, success: boolean }>: An object containing the response value and success status.\n  - Exceptions:\n    - None\n\nNote: This file does not contain any classes.",
    "apps/web/app/(landing)/linkArrow.tsx": "Module Overview:\n\nPurpose: This module defines a functional component called LinkArrow that renders an SVG arrow icon. It allows developers to easily include a styled arrow icon in their React applications.\n\nDependencies: \n- React: The React library is required for creating React components.\n\nFunctions:\n\nLinkArrow:\n- Purpose: Renders an SVG arrow icon with customizable styling.\n- Arguments:\n  - classname (string): Optional class name for styling the SVG element.\n  - stroke (string): Optional stroke color for the arrow icon.\n- Returns: The SVG arrow icon element.\n- Exceptions: None.",
    "apps/web/app/(landing)/page.tsx": "Page Title: Home.js\n\nModule Overview:\n\n  Purpose: This module represents the home page of the application, displaying various sections and components to the user.\n  Dependencies: \n  - RotatingIcons: Component for displaying rotating icons.\n  - Hero: Component for the hero section of the page.\n  - Navbar: Component for the navigation bar.\n  - Cta: Component for the call-to-action section.\n  - Toaster: Component for displaying toast notifications.\n  - Features: Component for displaying features section.\n  - Footer: Component for the footer section.\n  - auth: Function for user authentication.\n  - redirect: Function for redirecting users to a different page.\n  - Showcases: Component for showcasing content.\n  - BackgroundPlus: Component for displaying a grid pattern background.\n  - Services: Component for displaying services section.\n\nClasses: N/A\n\nFunctions:\n\n  Home():\n  - Purpose: Asynchronous function representing the home page of the application.\n  - Arguments: None\n  - Returns: JSX elements representing the home page layout.\n  - Exceptions: None\n\nOverall, the Home.js file is responsible for rendering the home page of the application, including various sections and components such as the hero section, navigation bar, call-to-action section, features section, and more. It also handles user authentication and redirection based on the user's status.",
    "apps/web/app/(landing)/twitterLink.tsx": "Module Overview:\n\n  Purpose: The \"use client\" file is responsible for rendering a Twitter follow button with a hover effect on a webpage. It utilizes the HoverBorderGradient component to create a visually appealing animation when the user hovers over the button.\n  \n  Dependencies: \n  - React: A JavaScript library for building user interfaces.\n  - framer-motion: A library for creating animations in React.\n  - @repo/ui/lib/utils: Utility functions for the UI components.\n  - @repo/ui/components/icons: Icons component library.\n  - linkArrow: A custom component for displaying a link arrow.\n\nFunctions:\n\n  TwitterBorder():\n  - Purpose: Renders a Twitter follow button with a hover effect.\n  \n  HoverBorderGradient():\n  - Purpose: Creates a gradient animation effect on hover.\n  - Arguments:\n    - children: The content to be displayed within the component.\n    - containerClassName: Additional class name for the container element.\n    - className: Additional class name for the component.\n    - as: The HTML element type to render.\n    - duration: The duration of the animation in seconds.\n    - clockwise: Boolean flag to determine the direction of rotation.\n  - Returns: The styled component with the hover effect.\n  - Exceptions: None\n\nOverall, the \"use client\" file provides functionality for displaying a Twitter follow button with an interactive hover effect using React and framer-motion libraries.",
    "apps/web/app/(quicklinks)/extension/route.ts": "Page Title: next_navigation.js\n\nModule Overview:\n\n  Purpose: This module handles navigation within the application using the Next.js framework. It specifically includes a function to perform a redirect to a specified URL.\n\n  Dependencies: \n  - next/navigation: The module for handling navigation within the Next.js framework.\n\nFunctions:\n\n  GET():\n  - Purpose: Performs a redirect to a specified URL.\n  - Arguments: None\n  - Returns: Redirects the user to the specified URL.\n  - Exceptions: None",
    "apps/web/app/(quicklinks)/ph/route.ts": "Page Title: next_navigation.js\n\nModule Overview:\n\n  Purpose: This module provides functionality for redirecting users to a specified URL using the Next.js framework.\n  \n  Dependencies: \n  - next/navigation: The module for handling navigation within the Next.js application.\n\nFunctions:\n\n  GET():\n  - Purpose: Redirects the user to the specified URL.\n  - Arguments: None\n  - Returns: None\n  - Exceptions: None",
    "apps/web/app/(thinkpad)/canvasStyles.css": "Page Title: tldraw.css\n\nModule Overview:\n\n  Purpose: This file contains styling rules for the TLDraw application, defining the visual appearance of various UI elements.\n  Dependencies: None\n\nClasses: None\n\nFunctions: None\n\nFile Overview:\nThis file defines the styling for different components of the TLDraw application, such as background colors, borders, and overlays. It imports the tldraw.css file for additional styling rules. The classes and elements targeted in this file include tl-background, tlui-style-panel, tlui-navigation-panel, tlui-menu-zone, tlui-toolbar__tools, tlui-popover__content, tlui-menu, tlui-button__help, tlui-help-menu, tlui-dialog__content, tlui-minimap, tlui-minimap__canvas, and tlui-dialog__overlay. Each of these elements has specific background colors and border styles applied to them to maintain a consistent visual theme throughout the application.",
    "apps/web/app/(thinkpad)/layout.tsx": "Page Title: RootLayout.tsx\n\nModule Overview:\n\n  Purpose: This module defines the RootLayout component, which serves as the main layout for the application. It handles authentication, renders children components, and displays a toaster notification.\n  \n  Dependencies: \n  - \"@/server/auth\": Module for handling authentication.\n  - \"./canvasStyles.css\": CSS file for styling the layout.\n  - \"next/navigation\": Module for handling navigation within the Next.js framework.\n  - \"@repo/ui/shadcn/sonner\": Module for displaying toaster notifications.\n\nFunctions:\n\n  RootLayout:\n  - Purpose: Renders the main layout of the application, handles authentication, and displays children components.\n  - Arguments:\n    - children (React.ReactNode): The child components to be rendered within the layout.\n  - Returns:\n    - JSX.Element: The rendered layout.\n  - Exceptions:\n    - None\n\n  info:\n  - Purpose: Calls the auth function to retrieve authentication information.\n  - Arguments:\n    - None\n  - Returns:\n    - Promise<any>: A promise that resolves to the authentication information.\n  - Exceptions:\n    - None\n\n  redirect:\n  - Purpose: Redirects the user to a specified URL.\n  - Arguments:\n    - url (string): The URL to redirect to.\n  - Returns:\n    - void\n  - Exceptions:\n    - None",
    "apps/web/app/(thinkpad)/thinkpad/[id]/page.tsx": "Page Title: fetchers.ts\n\nModule Overview:\n\n  Purpose: This module provides functionality for fetching data related to user canvases and handling page redirection.\n  \n  Dependencies: \n  - \"@/app/actions/fetchers\": Module for fetching user data.\n  - \"@/components/canvas/resizablelayout\": Component for displaying resizable layouts.\n  - \"next/navigation\": Library for handling page redirection.\n\nFunctions:\n\n  page({ params }: any) -> JSX.Element:\n  - Purpose: Checks if a canvas exists for the given ID, redirects to \"/thinkpad\" if it doesn't, and displays a resizable layout.\n  - Arguments:\n    - params (any): Parameters passed to the page.\n  - Returns:\n    - JSX.Element: ResizableLayout component with the specified ID.\n  - Exceptions:\n    - None\n\nClasses:\n\n  None",
    "apps/web/app/(thinkpad)/thinkpad/image.tsx": "Page Title: ImageComponent.tsx\n\nModule Overview:\n\n  Purpose: The ImageComponent module is responsible for rendering an image component based on canvas data fetched from the server. It utilizes the TldrawImage component to display the image with specified properties.\n  \n  Dependencies: \n  - fetchers: Module for fetching canvas data from the server.\n  - canvas/custom_nodes/twittercard: Utility for rendering Twitter card nodes on the canvas.\n  - canvas/custom_nodes/textcard: Utility for rendering text card nodes on the canvas.\n  - react: Library for building user interfaces.\n  - tldraw: Library for drawing and manipulating images on the canvas.\n\nClasses:\n\n  ImageComponent:\n  - Purpose: Represents the image component that displays the fetched canvas data.\n  - Attributes:\n    - id (string): The unique identifier of the image component.\n    - snapshot (any): The snapshot data fetched from the server.\n  - Methods:\n    - useEffect(): Asynchronous function to fetch canvas data and set the snapshot state.\n    - render(): Renders the TldrawImage component with specified properties based on the fetched snapshot data.\n\nFunctions: N/A\n\nOverall, the ImageComponent module serves as a crucial component for displaying images on the canvas based on fetched data, utilizing various utilities and libraries for rendering and manipulation.",
    "apps/web/app/(thinkpad)/thinkpad/page.tsx": "Page Title: page.tsx\n\nModule Overview:\n\n  Purpose: This module defines a React component for rendering a page displaying a collection of canvas items. It fetches canvas data from the server and dynamically renders the canvas items based on the data.\n  \n  Dependencies: \n  - \"@/app/actions/doers\": Importing the createCanvas function for creating new canvas items.\n  - \"@/app/actions/fetchers\": Importing the getCanvas function for fetching canvas data.\n  - \"next/link\": Importing the Link component from Next.js for client-side navigation.\n  - \"react\": Importing the React library for building UI components.\n  - \"./image\": Importing the ImageComponent for displaying images within canvas items.\n  - \"@/app/(dash)/menu\": Importing the Menu component for displaying a menu within the page.\n  - \"@/app/(dash)/header/header\": Importing the Header component for displaying a header within the page.\n  - \"@/app/(landing)/GridPatterns/PlusGrid\": Importing the BackgroundPlus component for displaying a background pattern.\n\nFunctions:\n\n  page():\n  - Purpose: Renders the main page content with canvas items fetched from the server.\n  - Returns: JSX element representing the page content.\n  \n  BlurHeaderMenu():\n  - Purpose: Renders a blurred header menu with a background pattern.\n  - Returns: JSX element representing the blurred header menu.\n  \n  CreateCanvas():\n  - Purpose: Renders a form for creating a new canvas item.\n  - Returns: JSX element representing the form.\n  \n  Canvas(props: TcanvasInfo):\n  - Purpose: Renders a canvas item with the provided title, description, and id.\n  - Arguments:\n    - props (TcanvasInfo): Object containing title, description, and id of the canvas item.\n  - Returns: JSX element representing the canvas item.\n  \nNote: The file also exports the page component as the default export for use in other modules.",
    "apps/web/app/actions/doers.ts": "Summary for \"use server\" file:\n\nModule Overview:\n\nPurpose: The \"use server\" module contains functions for server-side actions such as user authentication, creating spaces, managing chat threads, and interacting with the database.\n\nDependencies:\n- next/cache: For caching functionality.\n- server/db: For database operations.\n- types: Custom types used in the module.\n- server/auth: For user authentication.\n- react-tweet/api: For handling tweet data.\n- drizzle-orm: For database query operations.\n- lib/constants: Constants used in the module.\n- @repo/shared-types: Shared types used in the module.\n- next/navigation: For navigation functionality.\n- @repo/shared-types/utils: Utility functions for shared types.\n- ../api/ensureAuth: For ensuring user authentication.\n- @lib/utils: General utility functions.\n- @cloudflare/next-on-pages: For handling request context.\n\nFunctions:\n\n1. completeOnboarding():\n- Purpose: Marks a user as onboarded in the database.\n- Returns: A boolean indicating success or failure along with relevant data or error message.\n\n2. createSpace(input: string | FormData):\n- Purpose: Creates a new space in the database.\n- Arguments: Input data for the space creation.\n- Returns: The ID of the newly created space or an error message.\n\n3. limit(userId: string, type: string, items: number = 1):\n- Purpose: Checks if the user has reached the limit for a specific type of content.\n- Arguments: User ID, content type, and number of items.\n- Returns: A boolean indicating if the user can add more items of the specified type.\n\n4. addUserToSpace(userEmail: string, spaceId: number):\n- Purpose: Adds a user to a space with ownership validation.\n- Arguments: User email and space ID.\n- Returns: Success status and error message if applicable.\n\n5. createMemory(input: { content: string, spaces?: number[] }):\n- Purpose: Creates a memory based on input content and type.\n- Arguments: Content data and optional spaces to associate with the memory.\n- Returns: Success status, data, or error message.\n\n6. createChatThread(firstMessage: string):\n- Purpose: Creates a new chat thread with the first message.\n- Arguments: Initial message for the chat thread.\n- Returns: Success status and thread ID.\n\n7. createChatObject(threadId: string, chatHistorySoFar: ChatHistory[]):\n- Purpose: Creates a chat object within a chat thread.\n- Arguments: Thread ID and chat history data.\n- Returns: Success status and data.\n\n8. linkTelegramToUser(telegramUser: string):\n- Purpose: Links a Telegram user to the current user account.\n- Arguments: Telegram user ID.\n- Returns: Success status and data.\n\n9. deleteItem(id: number):\n- Purpose: Deletes an item from the database.\n- Arguments: Item ID to be deleted.\n- Returns: Success status and error message if applicable.\n\n10. moveItem(id: number, spaces: number[], fromSpace?: number):\n- Purpose: Moves an item to different spaces.\n- Arguments: Item ID, target spaces, and optional source space.\n- Returns: Success status and error message if applicable.\n\n11. createCanvas():\n- Purpose: Creates a new canvas for the user.\n- Returns: Success status and message.\n\n12. SaveCanvas({ id, data }):\n- Purpose: Saves canvas data to a storage service.\n- Arguments: Canvas ID and data to be saved.\n- Returns: Success status and error message if applicable.\n\n13. deleteCanvas(id: string):\n- Purpose: Deletes a canvas from the storage service.\n- Arguments: Canvas ID to be deleted.\n- Returns: Success status and error message if applicable.\n\n14. AddCanvasInfo({ id, title, description }):\n- Purpose: Adds information to a canvas.\n- Arguments: Canvas ID, title, and description.\n- Returns: Success status and message.\n\n15. getQuerySuggestions():\n- Purpose: Retrieves query suggestions based on user content.\n- Returns: Success status, data with query suggestions, or error message.\n\nThis summary provides an overview of the \"use server\" file, including its purpose, dependencies, and key functions with descriptions of their purpose, arguments, return values, and exceptions.",
    "apps/web/app/actions/fetchers.ts": "File Summary: \"use server\"\n\nModule Overview:\n\nPurpose: This file contains server-side functions for handling user authentication, retrieving user data, managing chat threads, and accessing user memories and spaces.\nDependencies:\n- drizzle-orm: Library for database operations.\n- @repo/shared-types: Shared types for chat history.\n- zod: Library for data validation.\n- next/navigation: Library for client-side navigation.\n- next/headers: Library for handling HTTP headers.\n- \"@/lib/unfirlsite\": Custom library for fetching website metadata.\n\nFunctions:\n\n1. getUser():\n- Purpose: Retrieves user data based on authentication status.\n- Returns: ServerActionReturnType<User> object.\n- Exceptions: Redirects to \"/signin\" if user is not authenticated.\n\n2. getSpaces():\n- Purpose: Retrieves stored spaces for a user.\n- Returns: ServerActionReturnType<StoredSpace[]> object.\n- Exceptions: Redirects to \"/signin\" if user is not authenticated.\n\n3. getAllMemories(freeMemoriesOnly: boolean = false):\n- Purpose: Retrieves all memories or memories not in any space for a user.\n- Arguments: freeMemoriesOnly (boolean) - Flag to filter memories.\n- Returns: ServerActionReturnType<Content[]> object.\n- Exceptions: Redirects to \"/signin\" if user is not authenticated.\n\n4. getMemoriesInsideSpace(spaceId: number):\n- Purpose: Retrieves memories and spaces inside a specific space for a user.\n- Arguments: spaceId (number) - ID of the space.\n- Returns: ServerActionReturnType<{ memories: Content[]; spaces: StoredSpace[] }> object.\n- Exceptions: Redirects to \"/signin\" if user is not authenticated.\n\n5. getAllUserMemoriesAndSpaces():\n- Purpose: Retrieves all user memories and spaces.\n- Returns: ServerActionReturnType<{ spaces: StoredSpace[]; memories: Content[] }> object.\n- Exceptions: Redirects to \"/signin\" if user is not authenticated.\n\n6. getFullChatThread(threadId: string):\n- Purpose: Retrieves full chat thread history for a user.\n- Arguments: threadId (string) - ID of the chat thread.\n- Returns: ServerActionReturnType<ChatHistory[]> object.\n- Exceptions: Redirects to \"/signin\" if user is not authenticated.\n\n7. getChatHistory():\n- Purpose: Retrieves chat thread history for a user.\n- Returns: ServerActionReturnType<ChatThread[]> object.\n- Exceptions: Redirects to \"/signin\" if user is not authenticated.\n\n8. getSessionAuthToken():\n- Purpose: Retrieves session authentication token.\n- Returns: ServerActionReturnType<string> object.\n\n9. getNoteFromId(noteId: string):\n- Purpose: Retrieves a note based on note ID for a user.\n- Arguments: noteId (string) - ID of the note.\n- Returns: ServerActionReturnType<Content> object.\n- Exceptions: Redirects to \"/signin\" if user is not authenticated.\n\n10. getCanvas():\n- Purpose: Retrieves user's canvas data.\n- Returns: ServerActionReturnType<{ userId: number; ... }> object.\n- Exceptions: Redirects to \"/signin\" if user is not authenticated.\n\n11. userHasCanvas(canvasId: string):\n- Purpose: Checks if a user has a specific canvas.\n- Arguments: canvasId (string) - ID of the canvas.\n- Returns: ServerActionReturnType<boolean> object.\n- Exceptions: Redirects to \"/signin\" if user is not authenticated.\n\n12. getCanvasData(canvasId: string):\n- Purpose: Retrieves data for a specific canvas.\n- Arguments: canvasId (string) - ID of the canvas.\n- Returns: Canvas data object or { snapshot: {} } if not found.\n- Exceptions: Redirects to \"/signin\" if user is not authenticated.\n\n13. unfirlSite(website: string):\n- Purpose: Fetches metadata for a website.\n- Arguments: website (string) - URL of the website.\n- Returns: Metadata object.\n\nThis file provides essential server-side functions for user authentication, data retrieval, and chat management within the application.",
    "apps/web/app/actions/types.ts": "File Summary: types.ts\n\nModule Overview:\n\n  Purpose: This module defines custom types used throughout the application, including the Space type and ServerActionReturnType type.\n  Dependencies: None\n\nTypes:\n\n  Space:\n  - Purpose: Represents a space entity with specific attributes.\n  - Attributes:\n    - id (number): The unique identifier of the space.\n    - name (string): The name of the space.\n    - numberOfMemories (optional number): The number of memories associated with the space.\n    - createdAt (optional string): The creation date of the space.\n\n  ServerActionReturnType<T>:\n  - Purpose: Represents the return type of server actions, including error handling and data retrieval.\n  - Attributes:\n    - error (optional string): An error message if the action fails.\n    - success (boolean): Indicates if the action was successful.\n    - data (optional T): The data returned by the server action.\n\nFunctions: None\n\nThis file provides essential custom types for defining spaces and handling server actions within the application.",
    "apps/web/app/api/[...nextauth]/route.ts": "Page Title: auth.js\n\nModule Overview:\n\n  Purpose: This module handles authentication functionalities for the application, including handling GET and POST requests related to user authentication.\n  \n  Dependencies: \n  - server/auth: Module for handling server-side authentication logic.\n\nClasses:\n- No classes defined in this module.\n\nFunctions:\n\n  GET:\n  - Purpose: Handles GET requests for user authentication.\n  - Arguments:\n    - None\n  - Returns:\n    - None\n  - Exceptions:\n    - None\n\n  POST:\n  - Purpose: Handles POST requests for user authentication.\n  - Arguments:\n    - None\n  - Returns:\n    - None\n  - Exceptions:\n    - None\n\nConstants:\n- runtime: \"edge\"\n- Purpose: Specifies the runtime environment for the authentication module.",
    "apps/web/app/api/canvas/route.ts": "Page Title: api_routes.ts\n\nModule Overview:\n\n  Purpose: This module defines two functions, GET and POST, that handle HTTP requests and return responses with JSON data. The GET function retrieves a specific parameter from the request URL and returns it as a JSON string. The POST function parses the request body as JSON, retrieves a parameter from the request URL, and returns a JSON object containing the request body and the parameter.\n\n  Dependencies: \n  - Request: The Request object from the Fetch API for handling HTTP requests.\n\nFunctions:\n\n  GET(req: Request) -> Response:\n  - Purpose: Retrieves a specific parameter from the request URL and returns it as a JSON string.\n  - Arguments:\n    - req (Request): The HTTP request object.\n  - Returns:\n    - Response: A response object containing the retrieved parameter as a JSON string.\n\n  POST(req: Request) -> Response:\n  - Purpose: Parses the request body as JSON, retrieves a parameter from the request URL, and returns a JSON object containing the request body and the parameter.\n  - Arguments:\n    - req (Request): The HTTP request object.\n  - Returns:\n    - Response: A response object containing the request body and the retrieved parameter as a JSON object.",
    "apps/web/app/api/canvasai/route.ts": "Page Title: runtime.ts\n\nModule Overview:\n\n  Purpose: This module defines the runtime environment for the application and handles POST requests related to chat functionality.\n  Dependencies: \n  - next/server: Provides functionality for handling server-side logic in Next.js applications.\n  - ensureAuth: Ensures that the user is authenticated before processing the request.\n  - @repo/shared-types: Contains shared types used in the application.\n\nFunctions:\n\n  POST(req: NextRequest) -> Response:\n  - Purpose: Handles POST requests related to chat functionality.\n  - Arguments:\n    - req (NextRequest): The request object containing the user's session information.\n  - Returns:\n    - Response: The response object containing the chat data.\n  - Exceptions:\n    - If the user is not authenticated, a 401 Unauthorized response is returned.\n    - If there is an issue with fetching or processing the chat data, an error response is returned.\n\nNote: The module also exports a constant variable 'runtime' with the value \"edge\".",
    "apps/web/app/api/chat/history/route.ts": "Page Title: nextRequestHandler.ts\n\nModule Overview:\n\n  Purpose: This module handles incoming requests and processes them to retrieve chat history data for a specific user.\n  Dependencies: \n  - next/server: Provides functionality for handling server-side logic in Next.js applications.\n  - ensureAuth: Ensures that the user is authenticated before processing the request.\n  - drizzle-orm: A library for interacting with databases using object-relational mapping.\n  - \"@/server/db\": Contains database-related functionality for querying data.\n  - \"@/server/db/schema\": Defines the schema for the database tables.\n\nFunctions:\n\n  GET(req: NextRequest) -> Response:\n  - Purpose: Retrieves chat history data for the authenticated user.\n  - Arguments:\n    - req (NextRequest): The incoming request object.\n  - Returns:\n    - Response: A response object containing the chat history data.\n  - Exceptions:\n    - If the user is not authenticated, a 401 Unauthorized response is returned.\n    - If the BACKEND_SECURITY_KEY environment variable is missing, a 500 Internal Server Error response is returned.\n    - If there is an error querying the database, a 400 Bad Request response is returned.\n\nAttributes:\n- runtime (string): Specifies that the runtime environment for this module is \"edge\".\n\nNote: This file primarily focuses on handling GET requests to retrieve chat history data for authenticated users. It relies on the ensureAuth function to authenticate users, the db module for querying the database, and the chatThreads schema for defining the structure of chat history data.",
    "apps/web/app/api/chat/route.ts": "File Summary: chatApi.ts\n\nModule Overview:\n\n  Purpose: This module handles API requests related to chat history and sources.\n  Dependencies: \n  - next/server: For handling Next.js server requests.\n  - @repo/shared-types: Shared types used in the application.\n  - ensureAuth: Function for ensuring user authentication.\n  - zod: Library for data validation.\n  - drizzle-orm: Library for SQL query building.\n  - path: Node.js module for working with file paths.\n  - \"@/server/db\": Database module for interacting with the database.\n  - \"@/server/db/schema\": Database schema for chat history and threads.\n\nFunctions:\n\n  POST(req: NextRequest) -> Response:\n  - Purpose: Handles POST requests for chat-related operations.\n  - Arguments:\n    - req (NextRequest): The Next.js request object.\n  - Returns:\n    - Response: The response object for the request.\n  - Exceptions: None\n\nNote: The file contains a POST function that handles authentication, rate limiting, data validation, and API requests related to chat history and sources. It interacts with the database to fetch chat history data and sends requests to the backend API for processing.",
    "apps/web/app/api/editorai/route.ts": "File Summary: api/editorai.ts\n\nModule Overview:\n\n  Purpose: This module handles the communication with the backend server for the EditorAI feature of the application.\n  Dependencies: \n  - next/server: Import of NextRequest for handling server requests.\n  - ensureAuth: Import of the ensureAuth function for authentication purposes.\n\nFunctions:\n\n  POST(request: NextRequest) -> Response:\n  - Purpose: Handles a POST request to the backend server for EditorAI functionality.\n  - Arguments:\n    - request (NextRequest): The request object containing the data to be sent to the backend.\n  - Returns:\n    - Response: The response from the backend server.\n  - Exceptions:\n    - Error: If there is an error during the request or response handling.\n\nAdditional Notes:\n- The runtime constant is set to \"edge\" in this file.\n- The authentication code is commented out for development purposes, but may still work intermittently.\n- The POST function sends a request to the backend server and returns the response.",
    "apps/web/app/api/ensureAuth.ts": "File Summary: ensureAuth.ts\n\nModule Overview:\n\n  Purpose: This file contains a function called ensureAuth that serves as a helper function to protect routes by ensuring user authentication.\n  Dependencies: \n  - next/server: Importing NextRequest from the next/server module.\n  - server/db: Importing db, accounts, sessions, and users from the server/db module.\n  - drizzle-orm: Importing eq function from the drizzle-orm library.\n\nFunctions:\n\n  ensureAuth(req: NextRequest) -> { user: User, session: Session } | undefined:\n  - Purpose: Protects routes by ensuring user authentication and retrieves user and session data.\n  - Arguments:\n    - req (NextRequest): The request object containing cookies and headers.\n  - Returns:\n    - { user: User, session: Session } | undefined: An object containing user and session data if authentication is successful, otherwise undefined.\n  - Exceptions:\n    - None explicitly mentioned, but potential exceptions could arise from fetch requests or database operations.\n\nOverall, the ensureAuth function in this file is crucial for verifying user authentication and providing access to protected routes within the application.",
    "apps/web/app/api/getCount/route.ts": "Page Title: content_stats.ts\n\nModule Overview:\n\n  Purpose: This module provides functionality for retrieving statistics related to stored content, such as tweet counts and page counts, based on user authentication.\n  \n  Dependencies: \n  - drizzle-orm: A library for building SQL queries.\n  - next/server: A library for server-side rendering with Next.js.\n  - \"@/server/db\": Module containing database connection and schema definitions.\n  - \"../ensureAuth\": Module for ensuring user authentication.\n\nFunctions:\n\n  GET(req: NextRequest) -> NextResponse:\n  - Purpose: Retrieves statistics related to stored content for the authenticated user.\n  - Arguments:\n    - req (NextRequest): The request object containing user authentication information.\n  - Returns:\n    - NextResponse: A response object containing tweet counts, page counts, and user information.\n  - Exceptions:\n    - Returns a 401 Unauthorized response if the user is not authenticated.\n\nClasses: N/A",
    "apps/web/app/api/hello/route.ts": "Module Overview:\n\n  Purpose: This file defines a function that handles GET requests in the edge runtime of the application. It returns a simple \"Hello World\" response and demonstrates how to use Bindings in the edge runtime.\n\n  Dependencies: \n  - next/server: Import of the NextRequest type for handling Next.js server requests.\n  - @cloudflare/next-on-pages: Import of the getRequestContext function for accessing environment variables.\n\nFunctions:\n\n  GET(request: NextRequest) -> Response:\n  - Purpose: Handles GET requests and returns a \"Hello World\" response.\n  - Arguments:\n    - request (NextRequest): The incoming request object.\n  - Returns:\n    - Response: The response object with the \"Hello World\" text.\n  - Exceptions:\n    - None",
    "apps/web/app/api/me/route.ts": "File Summary: server/api/auth.ts\n\nModule Overview:\n\n  Purpose: This module handles authentication-related operations such as validating user sessions and retrieving user information.\n  Dependencies: \n  - db: The database module for querying session and user data.\n  - drizzle-orm: A library for building SQL queries.\n  - next/server: The Next.js server module for handling HTTP requests and responses.\n\nFunctions:\n\n  GET(req: NextRequest) -> Response:\n  - Purpose: Retrieves session and user information based on the provided request.\n  - Arguments:\n    - req (NextRequest): The incoming HTTP request object.\n  - Returns:\n    - Response: The HTTP response containing session and user data.\n  - Exceptions:\n    - Returns a 404 response if the session or user is not found.\n\nAdditional Notes:\n- The file also exports a constant named 'runtime' with the value \"edge\".\n- The GET function extracts the session token from cookies or headers, queries the database for session and user data, and returns a JSON response with the retrieved information.",
    "apps/web/app/api/memories/route.ts": "File Summary: runtime.ts\n\nModule Overview:\n\n  Purpose: This module defines the runtime environment for the application, specifically for the edge environment.\n  Dependencies: \n  - next/server: Importing NextRequest from the next/server library.\n  - \"@/server/db\": Importing the db object from the server/db module.\n  - drizzle-orm: Importing the eq function from the drizzle-orm library.\n  - \"@/server/db/schema\": Importing chatThreads, contentToSpace, storedContent, and users from the server/db/schema module.\n  - \"../ensureAuth\": Importing the ensureAuth function from the ensureAuth module.\n\nFunctions:\n\n  GET(req: NextRequest) -> Response:\n  - Purpose: Handles GET requests, authenticates the user, and retrieves data based on the request parameters.\n  - Arguments:\n    - req (NextRequest): The request object containing information about the request.\n  - Returns:\n    - Response: A response object containing the requested data or an error message.\n  - Exceptions:\n    - Returns a 401 status code if the user is unauthorized.\n    - Returns a 500 status code if the BACKEND_SECURITY_KEY is missing.\n    - Returns a 400 status code if there is an error processing the request.\n\nOverall, the runtime.ts file is responsible for defining the runtime environment for the application, handling GET requests, authenticating users, and retrieving data from the database based on the request parameters.",
    "apps/web/app/api/spaces/route.ts": "File Summary: server/api/spaces.ts\n\nModule Overview:\n\n  Purpose: This module handles API endpoints related to managing spaces in the application.\n  Dependencies: \n  - db: Database module for interacting with the database.\n  - ensureAuth: Function for ensuring user authentication.\n  - zod: Library for data validation.\n  - next/server: Library for handling server-side logic in Next.js.\n\nFunctions:\n\n  GET(req: NextRequest) -> NextResponse:\n  - Purpose: Retrieves spaces associated with the authenticated user.\n  - Arguments:\n    - req (NextRequest): The incoming request object.\n  - Returns:\n    - NextResponse: JSON response containing the spaces data.\n  - Exceptions:\n    - Returns a 401 status code if the user is not authenticated.\n\n  POST(req: NextRequest) -> Response:\n  - Purpose: Creates a new space based on the provided input data.\n  - Arguments:\n    - req (NextRequest): The incoming request object.\n  - Returns:\n    - Response: JSON response indicating success or failure.\n  - Exceptions:\n    - Returns a 401 status code if the user is not authenticated.\n    - Returns a 400 status code if the input data is invalid.\n\n  DELETE(req: NextRequest) -> Response:\n  - Purpose: Deletes a space based on the provided space id.\n  - Arguments:\n    - req (NextRequest): The incoming request object.\n  - Returns:\n    - Response: JSON response indicating success or failure.\n  - Exceptions:\n    - Returns a 401 status code if the user is not authenticated.\n    - Returns a 400 status code if the space id is invalid.\n\nAdditional Notes:\n- The module uses the \"edge\" runtime environment.\n- The module follows a pattern of using the NextResponse class for JSON responses, but aims to move towards using the Response class directly in the future.",
    "apps/web/app/api/store/friend/route.ts": "Module Overview:\n\n  Purpose: This module handles the POST request for creating a new friend entry in the application.\n  Dependencies: \n  - next/server: Provides server-side functionality for handling Next.js requests.\n  - ../helper: Contains helper functions for creating memory entries from API data.\n\nFunctions:\n\n  POST(req: NextRequest) -> Response:\n  - Purpose: Handles the POST request to create a new friend entry.\n  - Arguments:\n    - req (NextRequest): The Next.js request object.\n  - Returns:\n    - Response: A response object indicating the status of the request.\n  - Exceptions:\n    - None\n\nClasses:\n\n  FriendData:\n  - Purpose: Represents the data structure for a friend entry.\n  - Attributes:\n    - id (string): The unique identifier of the friend entry.\n    - created_at (string): The timestamp of when the friend entry was created.\n    - transcript (string): The transcript of the friend entry.\n    - structured (object): Contains structured data about the friend entry.\n      - title (string): The title of the friend entry.\n      - overview (string): An overview of the friend entry.\n      - action_items (array): An array of action items for the friend entry, each containing a description.\n  - Methods:\n    - None\n\n  createMemoryFromAPI:\n  - Purpose: Creates a memory entry from API data.\n  - Attributes:\n    - None\n  - Methods:\n    - data (object): The data object containing information for the memory entry.\n    - userId (string): The user ID associated with the memory entry.\n\nOverall, this file handles the creation of a new friend entry in the application by processing the POST request and creating a memory entry from the API data provided.",
    "apps/web/app/api/store/helper.ts": "Module Overview:\n\nPurpose: The createMemoryFromAPI module is responsible for creating a new memory entry from API data and saving it to the database. It also handles the validation of input data and the creation of relationships between the memory entry and associated spaces.\n\nDependencies:\n- zod: A library for data validation.\n- drizzle-orm: A library for building SQL queries.\n- \"@/server/db\": Module for interacting with the database.\n- \"@/lib/constants\": Module containing application constants.\n- \"@/app/actions/doers\": Module for handling actions related to user limits.\n- \"@repo/shared-types\": Shared types used across the repository.\n\nFunctions:\n\ncreateMemoryFromAPI:\n- Purpose: Creates a new memory entry from API data and saves it to the database.\n- Arguments:\n  - data (AddFromAPIType): The data object containing information about the memory entry.\n  - userId (string): The ID of the user creating the memory entry.\n- Returns:\n  - Object: An object containing the success status, data, and error message if applicable.\n- Exceptions:\n  - Throws an error if there are issues with saving to the database or if the input data is invalid.\n\nOverall, the createMemoryFromAPI module plays a crucial role in handling the creation of memory entries from API data and ensuring the data is properly validated and saved to the database.",
    "apps/web/app/api/store/route.ts": "File Summary: runtime.ts\n\nModule Overview:\n\n  Purpose: This file defines a runtime environment for handling POST requests, ensuring authentication, and processing data from an API.\n  Dependencies: \n  - next/server: Provides the NextRequest type for handling server-side requests.\n  - @repo/shared-types: Contains the addFromAPIType type for parsing API data.\n  - ensureAuth: Module for ensuring user authentication.\n  - @repo/shared-types/utils: Contains the getRawTweet function for processing raw tweet data.\n  - helper: Module for creating memory from API data.\n\nFunctions:\n\n  POST(req: NextRequest) -> Response:\n  - Purpose: Handles POST requests, authenticates the user, processes API data, and saves the document.\n  - Arguments:\n    - req (NextRequest): The request object containing the data to be processed.\n  - Returns:\n    - Response: The response object with the result of the request.\n  - Exceptions:\n    - Returns a 401 response if the user is unauthorized.\n    - Returns a 500 response if the BACKEND_SECURITY_KEY is missing.\n    - Returns a 400 response if the request is invalid or data parsing fails.\n    - Returns a 501 response if there is an error saving the document.\n\nAdditional Notes:\n- The runtime constant is set to \"edge\" in this file.\n- The POST function handles authentication, data validation, and document creation based on the incoming request.\n- Error handling is implemented for various scenarios, including invalid requests and data parsing errors.",
    "apps/web/app/api/telegram/route.ts": "Page Title: telegram_bot.ts\n\nModule Overview:\n\n  Purpose: This module implements a Telegram bot using the Grammy library to interact with users and provide assistance in remembering things better.\n  \n  Dependencies: \n  - db: Database module for querying and storing user information.\n  - schema: Defines the schema for stored content and users in the database.\n  - encrypt: Module for encrypting user IDs.\n  - drizzle-orm: Library for querying the database.\n  - Grammy: Library for building Telegram bots.\n\nClasses:\n\n  Bot:\n  - Purpose: Represents the Telegram bot instance.\n  - Attributes:\n    - token (string): The Telegram bot token used for authentication.\n  - Methods:\n    - command(command: string, callback: Function) -> void: Defines a command handler for the bot.\n          - Args:\n            - command (string): The command to handle.\n            - callback (Function): The function to execute when the command is received.\n  \nFunctions:\n\n  POST:\n  - Purpose: Handles webhook callbacks for incoming HTTP POST requests.\n  - Arguments: \n    - bot (Bot): The Telegram bot instance.\n    - \"std/http\" (string): The type of webhook callback.\n  - Returns:\n    - None\n\n  GET:\n  - Purpose: Handles incoming HTTP GET requests.\n  - Arguments: \n    - None\n  - Returns:\n    - Response: A response object with status code 200.\n  \n  webhookCallback(bot: Bot, type: string) -> Function:\n  - Purpose: Creates a webhook callback function for the bot.\n  - Arguments:\n    - bot (Bot): The Telegram bot instance.\n    - type (string): The type of webhook callback.\n  - Returns:\n    - Function: The webhook callback function.\n\n  fetchMessage(ctx: Context) -> void:\n  - Purpose: Fetches and processes incoming messages from users.\n  - Arguments:\n    - ctx (Context): The context object containing message information.\n  - Returns:\n    - None\n  - Exceptions:\n    - Error: If there is an issue processing the message.\n\nThis summary provides an overview of the Telegram bot module, including its purpose, dependencies, classes, and functions. Developers can refer to this summary to understand the functionality and structure of the module.",
    "apps/web/app/api/upload_image/route.ts": "File Summary: putFile.ts\n\nModule Overview:\n\n  Purpose: This file handles the PUT request for uploading files to an S3 bucket using AWS SDK.\n  Dependencies: \n  - @aws-sdk/client-s3: Provides the S3Client and PutObjectCommand classes for interacting with Amazon S3.\n  - @aws-sdk/s3-request-presigner: Contains the getSignedUrl function for generating pre-signed URLs.\n  - next/server: Imports the NextRequest type for handling Next.js server requests.\n  - ../ensureAuth: Imports the ensureAuth function for ensuring user authentication.\n\nFunctions:\n\n  PUT(request: NextRequest) -> Response:\n  - Purpose: Handles the PUT request for uploading a file to the specified S3 bucket.\n  - Arguments:\n    - request (NextRequest): The incoming request object.\n  - Returns:\n    - Response: A response object containing the pre-signed URL for uploading the file.\n  - Exceptions:\n    - Returns a 401 Unauthorized response if authentication fails.\n    - Returns a 400 Bad Request response if the filename is missing.\n    - Returns a 500 Internal Server Error response if required environment variables are missing.\n\nClasses: N/A\n\nOverall, this file is responsible for handling PUT requests to upload files to an S3 bucket using pre-signed URLs. It ensures authentication, checks for required environment variables, and generates the pre-signed URL for the file upload.",
    "apps/web/app/global-error.tsx": "Page Title: use client\n\nModule Overview:\n\n  Purpose: This module handles global error handling within the application by capturing exceptions and rendering a generic error message using the NextError component.\n  \n  Dependencies: \n  - @sentry/nextjs: Sentry library for capturing exceptions.\n  - next/error: NextError component for rendering error messages.\n  - react: React library for managing component lifecycle.\n\nFunctions:\n\n  GlobalError:\n  - Purpose: A functional component that captures exceptions using Sentry and renders a generic error message.\n  - Arguments:\n    - error (Error & { digest?: string }): The error object with an optional digest property.\n    - Returns:\n       - HTML: The error message rendered within an HTML body.\n  - Exceptions:\n    - None\n\nNote: This file does not contain any classes, but it provides a functional component for handling global errors in the application.",
    "apps/web/app/layout.tsx": "Module Overview:\n\nPurpose: This file is responsible for defining the root layout of the application, including metadata for SEO purposes and the structure of the HTML document. It also includes the configuration for Cloudflare web analytics and the Toaster component.\n\nDependencies:\n- next: The Next.js framework for server-side rendering and routing.\n- @repo/ui: Custom UI components and utilities.\n- Inter: A font from Google Fonts.\n- GeistSans: A font from the Geist UI library.\n- GeistMono: A font from the Geist UI library.\n\nFunctions:\n- RootLayout({ children }: { children: React.ReactNode }): JSX.Element\n  - Purpose: Renders the root layout of the application with the specified children components.\n  - Arguments:\n    - children (React.ReactNode): The child components to be rendered within the layout.\n  - Returns: JSX.Element\n  - Exceptions: None\n\nClasses: None\n\nOverall, this file sets up the basic structure and styling of the application's root layout, including metadata for SEO, fonts, and a custom Toaster component for displaying notifications.",
    "apps/web/app/ref/page.tsx": "Page Title: Page.tsx\n\nModule Overview:\n\n  Purpose: This module represents a page component in the Cloudflare Next Saas Starter application. It includes the main content and functionality for the page, such as user authentication, database queries, theming, and user interface elements.\n  \n  Dependencies: \n  - @repo/ui/shadcn/button: Button component for the user interface.\n  - \"../../server/auth\": Authentication functions for signing in and out.\n  - \"../../server/db\": Database module for interacting with the database.\n  - \"drizzle-orm\": ORM library for database operations.\n  - \"../../server/db/schema\": Database schema for users.\n  - \"../../lib/get-theme-button\": Function for getting the theme toggler.\n\nFunctions:\n\n  Page():\n  - Purpose: Represents the main page component with user interface elements and functionality.\n  - Arguments: None\n  - Returns: JSX element representing the page content.\n  - Exceptions: None\n\nAdditional Notes:\n- The Page component includes elements for theming, user authentication, database queries, and user interface components.\n- It provides information about the Cloudflare Next Saas Starter application and its features.\n- The component dynamically displays user information and allows users to sign in or out.\n- The component also includes a list of features included in the application stack and the number of users in the database.",
    "apps/web/cf-env.d.ts": "Page Title: process_env.ts\n\nModule Overview:\n\n  Purpose: This module extends the NodeJS ProcessEnv interface with additional environment variables related to various services and configurations used within the application.\n  \n  Dependencies: None\n\nClasses: None\n\nFunctions: None\n\nThis file declares global environment variables that are crucial for the application's configuration and interaction with external services. It includes variables such as Google client ID and secret, authentication secrets, R2 endpoint details, Cloudflare account information, mobile trust token, and rate limiter configuration. These variables are used throughout the application to securely access and communicate with different services and resources.",
    "apps/web/components/canvas/custom_nodes/textcard.tsx": "Module Overview:\n\nPurpose: This file defines a class called textCardUtil that handles the rendering and editing of text card shapes in the application.\n\nDependencies:\n- BaseBoxShapeUtil: A utility class for handling base box shapes.\n- HTMLContainer: A component for rendering HTML containers.\n- TLBaseShape: A base shape class.\n- stopEventPropagation: A function for stopping event propagation.\n\nClasses:\n\ntextCardUtil:\n- Purpose: Represents a utility class for text card shapes.\n- Attributes:\n  - type (string): The type of shape, set to \"Textcard\".\n- Methods:\n  - getDefaultProps() -> ITextCardShape[\"props\"]: Returns the default properties for a text card shape.\n  - canEdit() -> boolean: Returns true to allow editing of the shape.\n  - component(s: ITextCardShape) -> JSX.Element: Renders the text card shape with editing functionality.\n  - indicator(shape: ITextCardShape) -> JSX.Element: Renders an indicator for the shape.\n\nFunctions:\nNone.",
    "apps/web/components/canvas/custom_nodes/twittercard.tsx": "File Summary: twitterCardUtil.ts\n\nModule Overview:\n\n  Purpose: This file defines a utility class for creating Twitter card shapes in the application. It provides methods for setting default properties, rendering the shape, and displaying an interactive Twitter post.\n  \n  Dependencies: \n  - tldraw: The tldraw library for handling shapes and components.\n  - HTMLContainer: A component for rendering HTML elements.\n  - TLBaseShape: A base shape class for defining shape properties.\n  - toDomPrecision: A utility function for converting values to DOM precision.\n\nClasses:\n\n  twitterCardUtil:\n  - Purpose: Represents a utility class for managing Twitter card shapes.\n  - Attributes: None\n  - Methods:\n    - getDefaultProps() -> ITwitterCardShape[\"props\"]: Returns the default properties for a Twitter card shape.\n    - component(s: ITwitterCardShape) -> JSX.Element: Renders the Twitter card shape with the specified properties.\n    - indicator(shape: ITwitterCardShape) -> JSX.Element: Renders an indicator for the Twitter card shape.\n\nFunctions:\n\n  TwitterPost:\n  - Purpose: Renders an interactive Twitter post within an iframe.\n  - Arguments:\n    - isInteractive (boolean): Indicates if the post is interactive.\n    - width (number): The width of the post.\n    - height (number): The height of the post.\n    - url (string): The URL of the Twitter post.\n  - Returns: JSX.Element\n  - Exceptions: None\n\nOverall, this file provides the necessary utilities for creating and rendering Twitter card shapes within the application.",
    "apps/web/components/canvas/enabled.tsx": "Module Overview:\n\n  Purpose: This file defines a list of UI components that are available for use within the application.\n  Dependencies: \n  - tldraw: The tldraw library for UI components.\n\nClasses:\n- N/A\n\nFunctions:\n- N/A\n\nThis file serves as a central repository for all available UI components in the application. Developers can refer to this file to see the list of components that can be used and integrated into different parts of the application. The components listed in this file are currently set to null, indicating that they are available for use but not yet implemented or defined.",
    "apps/web/components/canvas/resizablelayout.tsx": "File Summary: \"use client\"\n\nModule Overview:\n\n  Purpose: This file defines a ResizableLayout component that manages the layout of a panel group with resizable panels. It includes functionality for collapsing and expanding panels based on user interaction.\n  \n  Dependencies: \n  - react-resizable-panels: Library for creating resizable panels.\n  - next/image: Library for optimizing images in Next.js.\n  - @repo/ui/icons: Library for importing custom icons.\n  - lucide-react: Library for importing Lucide icons.\n  \nClasses:\nN/A\n\nFunctions:\nN/A\n\nOverall, the \"use client\" file contains the ResizableLayout component that handles the layout of panels in the application, allowing for a dynamic and user-friendly interface.",
    "apps/web/components/canvas/savesnap.tsx": "Page Title: SaveStatus.tsx\n\nModule Overview:\n\n  Purpose: This module provides functionality for saving canvas data in the application.\n  Dependencies: \n  - react: A JavaScript library for building user interfaces.\n  - tldraw: A library for drawing and editing canvas elements.\n  - \"@/app/actions/doers\": Module containing actions for saving canvas data.\n\nFunctions:\n\n  SaveStatus({ id }: { id: string }) -> JSX.Element:\n  - Purpose: Renders a button component that displays the save status of the canvas data.\n  - Arguments:\n    - id (string): The unique identifier of the canvas data.\n  - Returns:\n    - JSX.Element: A button component displaying the save status.\n  - Exceptions: None\n\nClasses: None",
    "apps/web/components/canvas/sidepanel.tsx": "Module Overview:\n\nPurpose: The Sidepanel module is responsible for rendering a side panel component in the application that displays a list of search results based on user input. It also allows users to navigate back to a previous page and interact with the search functionality.\n\nDependencies:\n- React: A JavaScript library for building user interfaces.\n- Heroicons: A set of icons for use in web projects.\n- Next.js: A React framework for building server-side rendered applications.\n- @repo/shared-types: A library for shared types used across the application.\n- sonner: A library for displaying toast notifications.\n\nFunctions:\n\nSearch:\n- Purpose: Handles the search functionality by fetching data from an API, parsing the response, and updating the content displayed in the side panel.\n- Arguments: setContent (function): A function to update the content displayed in the side panel.\n- Returns: None\n- Exceptions: Displays a toast error message if there is an issue fetching or parsing the data.\n\nClasses: None\n\nOverall, the Sidepanel module provides a user-friendly interface for searching and displaying content within the application's side panel. It relies on various dependencies to handle data fetching, rendering, and user interactions.",
    "apps/web/components/canvas/sidepanelcard.tsx": "Module Overview:\n\nPurpose: The Card module is responsible for rendering a card component that displays information such as title, content, and source. It also handles drag and drop functionality for the card.\n\nDependencies:\n- @heroicons/react/16/solid: Provides the GlobeAltIcon used in the Icon component.\n- lucide-react: Provides the TwitterIcon and TypeIcon used in the Icon component.\n- react: Provides the useState hook used in the Card component.\n- framer-motion: Provides the motion component used for animations in the Card component.\n- react-use-measure: Provides the useMeasure hook used to measure the size of the card.\n\nFunctions:\n\n- Card:\n  - Purpose: Renders a card component with title, content, and optional source information. Handles drag and drop functionality for the card.\n  - Arguments:\n    - type (CardType): The type of the card.\n    - title (string): The title of the card.\n    - content (string): The content of the card.\n    - source (string, optional): The source of the card.\n  - Returns: JSX element representing the card component.\n  - Exceptions: None\n\n- Icon:\n  - Purpose: Renders an icon based on the type of the card.\n  - Arguments:\n    - type (CardType): The type of the card.\n  - Returns: JSX element representing the icon.\n  - Exceptions: None\n\nOverall, the Card module provides a reusable card component with drag and drop functionality, making it easy to display and interact with information in a visually appealing way.",
    "apps/web/components/canvas/tldrawComponent.tsx": "File Summary: TldrawComponent.tsx\n\nModule Overview:\n\n  Purpose: This file defines the TldrawComponent, which is a React component used for rendering a Tldraw editor with specific functionalities.\n  Dependencies: \n  - React: JavaScript library for building user interfaces.\n  - tldraw: Library for creating and managing Tldraw editors.\n  - enabled.ts: File containing enabled components.\n  - custom_nodes/twittercard.ts: File containing utility functions for Twitter card nodes.\n  - custom_nodes/textcard.ts: File containing utility functions for text card nodes.\n  - tldrawDrop.tsx: File containing the DropZone component.\n  - loadSnap.ts: File containing functions for loading remote snapshots.\n  - createAssetUrl.ts: File containing functions for creating assets from URLs.\n  - savesnap.ts: File containing the SaveStatus component.\n  - createEmbeds.ts: File containing functions for creating embeds from URLs.\n\nClasses:\n\n  TldrawComponent:\n  - Purpose: Renders a Tldraw editor with specific components and functionalities.\n  - Attributes: \n    - id (string): The unique identifier for the Tldraw editor.\n  - Methods:\n    - N/A\n\nFunctions:\n  - N/A\n\nOverall, this file serves as the main component for rendering a Tldraw editor with various functionalities and dependencies. It utilizes React and tldraw libraries along with other custom utility functions and components to create a rich editing experience.",
    "apps/web/components/canvas/tldrawDrop.tsx": "File Summary: DropZone.tsx\n\nModule Overview:\n\n  Purpose: The DropZone module provides a component that allows users to drag and drop content onto a canvas editor. It handles the dropping of external content and updates the editor accordingly.\n  \n  Dependencies: \n  - \"@/lib/ExternalDroppedContent\": Module for handling external dropped content.\n  - \"@repo/ui/icons\": Icons used for visual representation.\n  - \"next/image\": Next.js Image component for displaying images.\n  - \"react\": React library for building user interfaces.\n  - \"tldraw\": Library for creating drawing applications.\n  - \"./tldrawComponent\": Custom context for the drawing component.\n\nFunctions:\n\n  DropZone():\n  - Purpose: Renders a drop zone component for users to drag and drop content onto the canvas editor.\n  - Arguments: None\n  - Returns: JSX element representing the drop zone component.\n  - Exceptions: Throws an error if the component is not used within a DragContextProvider.\n\n  handleDrop(event: React.DragEvent<HTMLDivElement>):\n  - Purpose: Handles the drop event when content is dropped onto the drop zone.\n  - Arguments:\n    - event (React.DragEvent<HTMLDivElement>): The drop event object.\n  - Returns: None\n  - Exceptions: Catches and handles errors when parsing dropped data.\n\nOverall, the DropZone module provides a user-friendly interface for dragging and dropping content onto the canvas editor, enhancing the user experience and interaction with the application.",
    "apps/web/components/twitter/icons/icons.module.css": "File Summary: .verified\n\nModule Overview:\n\n  Purpose: This file contains styling rules for elements with the class \"verified\". It defines the visual appearance of verified elements within the application.\n  Dependencies: This file does not have any external dependencies.\n\nClasses: This file does not contain any classes.\n\nFunctions: This file does not contain any functions.",
    "apps/web/components/twitter/icons/index.ts": "Page Title: verified.js\n\nModule Overview:\n\n  Purpose: This module exports functionality related to verified entities, including businesses and government entities.\n\n  Dependencies: \n  - \"./verified\": Module for handling verified entities.\n  - \"./verified-business\": Module for handling verified businesses.\n  - \"./verified-government\": Module for handling verified government entities.\n\nClasses:\n\nNo classes defined in this module.\n\nFunctions:\n\nNo functions defined in this module.",
    "apps/web/components/twitter/icons/verified-business.tsx": "Module Overview:\n\nPurpose: The icons.module.css module is responsible for styling and displaying various icons within the application.\n\nDependencies: \n- None\n\nClasses:\n- None\n\nFunctions:\n- None\n\nThis file specifically contains styling information for the VerifiedBusiness icon, which is used to represent a verified account within the application. The icon is displayed as an SVG image with a linear gradient fill and various path elements to create the visual representation of a verified business account. The className attribute is used to apply the styling defined in the icons.module.css file to the SVG element.",
    "apps/web/components/twitter/icons/verified-government.tsx": "Module Overview:\n\n  Purpose: The icons.module.css module provides styling for various icons used within the application.\n  Dependencies: None\n\nClasses:\nNone\n\nFunctions:\nNone\n\nOverall, the file \"./icons.module.css\" contains CSS styling for the VerifiedGovernment icon, which represents a verified government account. The icon is displayed as an SVG element with specific dimensions and styling properties.",
    "apps/web/components/twitter/icons/verified.tsx": "Module Overview:\n\nPurpose: The icons.module.css module is responsible for styling and providing CSS classes for various icons used within the application.\n\nDependencies: None\n\nClasses: None\n\nFunctions: None\n\nThe file contains CSS styles for the Verified icon, which is used to represent a verified account within the application. The SVG element defines the visual representation of the icon, with specific attributes such as viewBox, aria-label, and role. The className attribute is used to apply the CSS class for styling the icon.",
    "apps/web/components/twitter/render-tweet.tsx": "Module Overview:\n\nPurpose: The \"tweet-header.module.tsx\" file provides components and functionality for displaying a Twitter tweet header within a React application.\n\nDependencies:\n- react-tweet: Library for handling Twitter-related components and functionality.\n- clsx: Library for conditionally joining CSS classes.\n- \"./verified-badge\": Custom component for displaying a verified badge.\n\nClasses:\n\nTweetHeader:\n- Purpose: Represents the header section of a Twitter tweet, including the user's avatar, name, username, and additional information.\n- Attributes:\n  - tweet: EnrichedTweet | { error: string }: The tweet data or an error message.\n  - components?: TwitterComponents: Optional Twitter components for customization.\n- Methods: N/A\n\nAvatarImg:\n- Purpose: Represents an avatar image component for displaying the user's profile image.\n- Attributes:\n  - src: string: The URL of the image.\n  - alt: string: The alternative text for the image.\n  - width: number: The width of the image.\n  - height: number: The height of the image.\n- Methods: N/A\n\nFunctions:\n\nMyTweet:\n- Purpose: Renders a complete Twitter tweet component, including the header, body, media, and additional information.\n- Arguments:\n  - tweet: Tweet | { error: string }: The tweet data or an error message.\n  - components?: TwitterComponents: Optional Twitter components for customization.\n- Returns: JSX element representing the tweet component.\n- Exceptions: N/A\n\nOverall, the \"tweet-header.module.tsx\" file provides components and functionality for displaying a Twitter tweet header within a React application, including avatar images, user information, and tweet details.",
    "apps/web/components/twitter/tweet-header.module.css": "File Summary: tweet-header.css\n\nModule Overview:\n\n  Purpose: This file contains styling rules for the header section of a tweet component in the application.\n  Dependencies: None\n\nClasses:\n\n  .header:\n  - Purpose: Defines the styling for the header section of the tweet component.\n  - Attributes:\n    - display: flex;\n    - padding-bottom: 0.75rem;\n    - line-height: var(--tweet-header-line-height);\n    - font-size: var(--tweet-header-font-size);\n    - white-space: nowrap;\n    - overflow-wrap: break-word;\n    - overflow: hidden;\n\n  .avatar:\n  - Purpose: Defines the styling for the avatar image in the tweet header.\n  - Attributes:\n    - position: relative;\n    - height: 48px;\n    - width: 48px;\n\n  .avatarOverflow:\n  - Purpose: Defines the styling for the overflow behavior of the avatar image.\n  - Attributes:\n    - height: 100%;\n    - width: 100%;\n    - position: absolute;\n    - overflow: hidden;\n    - border-radius: 9999px;\n\n  .avatarSquare:\n  - Purpose: Defines the styling for the border radius of the avatar image.\n  - Attributes:\n    - border-radius: 4px;\n\n  .avatarShadow:\n  - Purpose: Defines the styling for the shadow effect on the avatar image.\n  - Attributes:\n    - height: 100%;\n    - width: 100%;\n    - transition-property: background-color;\n    - transition-duration: 0.2s;\n    - box-shadow: rgb(0 0 0 / 3%) 0px 0px 2px inset;\n\n  .author:\n  - Purpose: Defines the styling for the author section in the tweet header.\n  - Attributes:\n    - max-width: calc(100% - 84px);\n    - display: flex;\n    - flex-direction: column;\n    - justify-content: center;\n    - margin: 0 0.5rem;\n\nFunctions: None\n\nThis file contains CSS styling rules for the header section of a tweet component, including the avatar image, author information, and Twitter icon. The classes defined in this file control the layout, sizing, and visual effects of these elements within the tweet header.",
    "apps/web/components/twitter/verified-badge.module.css": "File: styles.css\n\nModule Overview:\n\n  Purpose: This file contains styling rules for elements related to tweet verification in the application.\n\n  Dependencies: \n  - None\n\nClasses:\n- None\n\nFunctions:\n- None\n\nContent Overview:\nThis file defines styling rules for different types of verified tweets in the application. It includes classes for styling verified tweets with different colors based on their verification status. The .verifiedOld class sets the color to a specific variable, .verifiedBlue sets the color to another variable, and .verifiedGovernment sets the color to a specific RGB value. The commented out line in .verifiedGovernment suggests an alternative color variable that can be used.",
    "apps/web/components/twitter/verified-badge.tsx": "Module Overview:\n\nPurpose: The VerifiedBadge module is responsible for rendering a badge indicating the verification status of a user within the application.\n\nDependencies:\n- clsx: A utility for conditionally joining class names together.\n- Verified, VerifiedBusiness, VerifiedGovernment: Icons used to represent different verification types.\n- verified-badge.module.css: Stylesheet for the VerifiedBadge component.\n\nFunctions:\n\nVerifiedBadge:\n- Purpose: Renders a badge indicating the verification status of a user.\n- Arguments:\n  - user (any): The user object containing verification information.\n  - className (string, optional): Additional class name for styling purposes.\n- Returns: \n  - JSX.Element | null: The badge component or null if the user is not verified.\n- Exceptions: None\n\nOverall, the VerifiedBadge module provides a visual representation of a user's verification status based on the information provided in the user object.",
    "apps/web/drizzle.config.ts": "Page Title: drizzle-kit.ts\n\nModule Overview:\n\n  Purpose: This module defines the configuration settings for the Drizzle Kit, a tool used for managing database migrations. It specifies the database schema file, dialect, driver, database credentials, and output directory for migrations.\n  \n  Dependencies: \n  - drizzle-kit: The Drizzle Kit library for managing database migrations.\n\nClasses:\nN/A\n\nFunctions:\nN/A\n\nOverall, the drizzle-kit.ts file serves as a central configuration file for the Drizzle Kit tool, providing essential settings for database migration management.",
    "apps/web/env.d.ts": "File Summary: env.d.ts\n\nModule Overview:\n\n  Purpose: This file defines the interface CloudflareEnv, which specifies the environment variables used in the Cloudflare application. It provides a structured way to access and manage various resources such as storage, databases, images, AI services, and recommendations within the application.\n\n  Dependencies: \n  - R2Bucket: Represents a storage bucket.\n  - D1Database: Represents a database connection.\n  - KVNamespace: Represents a key-value namespace for storing data.\n  - Ai: Represents an AI service for the application.\n\nClasses:\nN/A\n\nFunctions:\nN/A\n\nThis file serves as a crucial reference for developers to understand and utilize the environment variables and resources available in the Cloudflare application.",
    "apps/web/instrumentation.ts": "File Title: sentry.config.js\n\nModule Overview:\n\n  Purpose: This module is responsible for dynamically importing configuration files based on the environment variable NEXT_RUNTIME. It imports either sentry.server.config or sentry.edge.config depending on the value of NEXT_RUNTIME.\n\n  Dependencies: None\n\nFunctions:\n\n  register() -> Promise<void>:\n  - Purpose: Dynamically imports the appropriate configuration file based on the environment variable NEXT_RUNTIME.\n  - Arguments: None\n  - Returns: Promise<void>\n  - Exceptions: None",
    "apps/web/lib/ExternalDroppedContent.ts": "Page Title: handleExternalDroppedContent.ts\n\nModule Overview:\n\n  Purpose: This module handles the processing and creation of content dropped into the editor, including URLs, text, and images.\n  Dependencies: \n  - tldraw: The main library for the editor functionality.\n  - createEmbedsFromUrl: A function for creating embeds from URLs.\n\nFunctions:\n\n  processURL(input: string) -> string | null:\n  - Purpose: Processes a given URL input to ensure it is valid and returns the formatted URL.\n  - Arguments:\n    - input (string): The URL input to be processed.\n  - Returns:\n    - string | null: The formatted URL if valid, or null if invalid.\n\n  formatContent(title: string, content: string) -> string:\n  - Purpose: Formats the title and content text to fit a specific height and width ratio.\n  - Arguments:\n    - title (string): The title text.\n    - content (string): The content text.\n  - Returns:\n    - string: The formatted text with new lines added.\n\n  formatTextToRatio(text: string) -> { height: number; width: number }:\n  - Purpose: Calculates the height and width of text based on a specific ratio and font size.\n  - Arguments:\n    - text (string): The text to calculate dimensions for.\n  - Returns:\n    - { height: number; width: number }: The calculated height and width of the text.\n\n  handleExternalDroppedContent({ droppedData, editor }: { droppedData: DroppedData; editor: Editor }) -> void:\n  - Purpose: Handles the dropped content, creating shapes or cards based on the type of data.\n  - Arguments:\n    - droppedData (DroppedData): The data dropped into the editor.\n    - editor (Editor): The editor instance.\n  - Returns:\n    - void\n  - Exceptions:\n    - None specified.\n\n  createTextCard(editor: Editor, position: { x: number; y: number }, content: string, type: string, extraInfo: string = \"\") -> void:\n  - Purpose: Creates a text card shape in the editor with specified content and type.\n  - Arguments:\n    - editor (Editor): The editor instance.\n    - position ({ x: number; y: number }): The position to place the text card.\n    - content (string): The content text for the card.\n    - type (string): The type of the card.\n    - extraInfo (string): Additional information for the card.\n  - Returns:\n    - void\n  - Exceptions:\n    - None specified.",
    "apps/web/lib/constants.ts": "Module Overview:\n\n  Purpose: This module defines constants for various limits and a list of code language subsets used within the application.\n\n  Dependencies: None\n\nConstants:\n- LIMITS:\n  - page (int): The limit for the number of items per page.\n  - tweet (int): The character limit for a tweet.\n  - note (int): The character limit for a note.\n\n- codeLanguageSubset (list): A list of supported code languages within the application.\n\nFunctions: None\n\nClasses: None\n\nOverall, this file provides predefined limits for certain functionalities within the application and lists the supported code languages that can be used.",
    "apps/web/lib/context.ts": "Module Overview:\n\n  Purpose: This module defines a DragContext for managing drag and drop functionality within a React application.\n  Dependencies: \n  - react: The React library for building user interfaces.\n\nClasses:\n\n  DragContext:\n  - Purpose: Represents the context for drag and drop functionality.\n  - Attributes:\n    - isDraggingOver (boolean): Indicates if an item is currently being dragged over.\n    - setIsDraggingOver (React.Dispatch<React.SetStateAction<boolean>>): Function to set the isDraggingOver state.\n  - Methods: N/A\n\nFunctions:\n\n  useDragContext():\n  - Purpose: Custom hook to access the DragContext within components.\n  - Arguments: N/A\n  - Returns: The context object from DragContext.\n  - Exceptions: Throws an error if used outside of the DragContext provider.",
    "apps/web/lib/createAssetUrl.ts": "Page Title: createAssetFromUrl.ts\n\nModule Overview:\n\n  Purpose: This module provides functionality for creating a bookmark asset from a given URL by fetching metadata from the URL or a specified endpoint.\n  Dependencies: \n  - tldraw: Library for handling asset-related operations.\n  - fetch: API for making network requests.\n  - DOMParser: API for parsing HTML documents.\n\nFunctions:\n\n  createAssetFromUrl({url}: {type: \"url\"; url: string}) -> Promise<TLAsset>:\n  - Purpose: Creates a bookmark asset from the provided URL by fetching metadata from the URL or a specified endpoint.\n  - Arguments:\n    - url (string): The URL from which to create the asset.\n  - Returns:\n    - Promise<TLAsset>: A promise that resolves to the created TLAsset object.\n  - Exceptions:\n    - Error: If there is an issue fetching metadata from the URL or endpoint.\n\nNote: The module also includes commented out code for fetching metadata from a specified endpoint (BOOKMARK_ENDPOINT) if fetching from the URL fails.",
    "apps/web/lib/createEmbeds.ts": "File Summary: createEmbedsFromUrl.ts\n\nModule Overview:\n\n  Purpose: This file contains a function that creates embeds from a given URL, allowing users to embed external content into the application.\n  Dependencies: \n  - tldraw: External library for drawing and editing shapes.\n  - drophelpers: Module for creating empty bookmark shapes.\n  - fetchers: Module for fetching external content from a URL.\n\nFunctions:\n\n  createEmbedsFromUrl:\n  - Purpose: Creates embeds from a given URL, handling different types of external content such as Twitter cards and generic embeds.\n  - Arguments:\n    - url (string): The URL of the external content to embed.\n    - point (VecLike | undefined): Optional point to position the embed.\n    - sources (TLExternalContentSource[] | undefined): Optional array of external content sources.\n    - editor (Editor): The editor instance to work with.\n  - Returns: Promise<void>\n  - Exceptions: \n    - Error: If there is an issue creating the asset or embedding the content.\n\nThis function first checks if the URL matches a specific pattern for Twitter or x.com, creating a Twitter card shape if it does. It then attempts to embed the content using the getEmbedInfo function. If successful, it puts the external content into the editor. If not, it creates a bookmark shape and fetches additional information to create an asset for the external content. Finally, it updates the shapes in the editor with the new asset information.\n\nOverall, this function provides a way to easily embed external content into the application, handling different types of content sources and creating assets as needed.",
    "apps/web/lib/drophelpers.ts": "File Summary: createEmptyBookmarkShape.ts\n\nModule Overview:\n\n  Purpose: This file contains a function to create an empty bookmark shape within the editor.\n  Dependencies: \n  - tldraw: The tldraw library for handling shapes and editor functionalities.\n\nFunctions:\n\n  createEmptyBookmarkShape(editor: Editor, url: string, position: VecLike) -> TLBookmarkShape:\n  - Purpose: Creates an empty bookmark shape at a specified position within the editor.\n  - Arguments:\n    - editor (Editor): The editor instance where the shape will be created.\n    - url (string): The URL associated with the bookmark shape.\n    - position (VecLike): The position where the shape will be placed.\n  - Returns:\n    - TLBookmarkShape: The created bookmark shape object.\n  - Dependencies:\n    - createShapeId(): Generates a unique shape ID.\n    - centerSelectionAroundPoint(editor: Editor, position: VecLike): Centers the selection around a specified point.\n\nFunctions:\n\n  centerSelectionAroundPoint(editor: Editor, position: VecLike):\n  - Purpose: Re-positions shapes so that the center of the group is at the provided point.\n  - Arguments:\n    - editor (Editor): The editor instance containing the shapes.\n    - position (VecLike): The point around which the selection will be centered.\n  - Dependencies:\n    - getViewportPageBounds(): Retrieves the viewport page bounds.\n    - getSelectionPageBounds(): Retrieves the selection page bounds.\n    - updateShapes(shapes: Shape[]): Updates the positions of selected shapes.\n    - getSelectedShapes(): Retrieves the selected shapes.\n    - zoomToSelection(): Zooms out to fit the selected shapes if necessary.",
    "apps/web/lib/get-metadata.ts": "Module Overview:\n\n  Purpose: The \"use server\" module is responsible for fetching metadata from a given URL, including the title, description, and image. It utilizes the cheerio library to parse HTML content and extract relevant information.\n\n  Dependencies: \n  - cheerio: A library for parsing and manipulating HTML content.\n\nFunctions:\n\n  getMetaData(url: string) -> Object:\n  - Purpose: Fetches metadata from the provided URL, including the title, description, and image.\n  - Arguments:\n    - url (string): The URL from which to fetch metadata.\n  - Returns:\n    - Object: An object containing the extracted metadata (title, description, image, baseUrl).\n  - Exceptions:\n    - None\n\nOverall, the \"use server\" module serves the purpose of extracting metadata from a given URL, providing developers with a convenient way to retrieve essential information for web content.",
    "apps/web/lib/get-theme-button.tsx": "Module Overview:\n\n  Purpose: This module provides a dynamic theme toggler component that works seamlessly with the app router, ensuring no flickering or jumping effects when the component loads.\n  \n  Dependencies: \n  - next/dynamic: A library for dynamically importing components in Next.js.\n  - @repo/ui/shadcn/theme-toggle: The theme toggle component from the specified repository.\n\nFunctions:\n\n  getThemeToggler() -> Component:\n  - Purpose: Returns a dynamic theme toggler component that should not be server-side rendered to prevent discrepancies between server and client values.\n  - Returns:\n    - Component: The theme toggler component.\n  - Note: A placeholder UI element is coded to prevent jumping effects when the component loads.",
    "apps/web/lib/handle-errors.ts": "Module Overview:\n\n  Purpose: This module provides functions for handling error messages and displaying toast notifications in the application.\n\n  Dependencies: \n  - next/dist/client/components/redirect: Module for handling redirects in Next.js.\n  - sonner: Library for displaying toast notifications.\n  - zod: Library for data validation.\n\nFunctions:\n\n  getErrorMessage(err: unknown) -> string:\n  - Purpose: Retrieves the error message from the given error object.\n  - Arguments:\n    - err (unknown): The error object to extract the message from.\n  - Returns:\n    - string: The error message.\n  - Exceptions:\n    - None\n\n  showErrorToast(err: unknown) -> void:\n  - Purpose: Displays a toast notification with the error message.\n  - Arguments:\n    - err (unknown): The error object to display the message for.\n  - Returns:\n    - void\n  - Exceptions:\n    - None",
    "apps/web/lib/loadSnap.ts": "Page Title: loadRemoteSnapshot.ts\n\nModule Overview:\n\n  Purpose: This module is responsible for loading a remote snapshot of canvas data and creating a new store with the loaded snapshot.\n\n  Dependencies: \n  - tldraw: Library for creating and managing canvas data.\n  - fetchers: Module for fetching canvas data from the server.\n  - twittercard: Custom node for displaying Twitter card elements.\n  - textcard: Custom node for displaying text card elements.\n\nFunctions:\n\n  loadRemoteSnapshot(id: string) -> Promise:\n  - Purpose: Loads a remote snapshot of canvas data and creates a new store with the loaded snapshot.\n  - Arguments:\n    - id (string): The ID of the canvas data snapshot to load.\n  - Returns:\n    - Promise: A promise that resolves with the new store containing the loaded snapshot.\n  - Exceptions:\n    - None.",
    "apps/web/lib/searchParams.ts": "Page Title: searchParamsCache.js\n\nModule Overview:\n\n  Purpose: This module provides functionality for creating and managing search parameters caches for different sections of the application.\n  Dependencies: \n  - nuqs/server: Module for server-side functionality.\n  - zod: Library for data validation.\n\nClasses:\n\n  N/A\n\nFunctions:\n\n  createSearchParamsCache(config: object) -> object:\n  - Purpose: Creates a search parameters cache with the specified configuration.\n  - Arguments:\n    - config (object): Configuration object for the search parameters cache.\n  - Returns:\n    - object: The created search parameters cache object.\n  - Exceptions:\n    - N/A\n\n  parseAsInteger(value: any) -> number:\n  - Purpose: Parses the input value as an integer.\n  - Arguments:\n    - value (any): The value to be parsed.\n  - Returns:\n    - number: The parsed integer value.\n  - Exceptions:\n    - N/A\n\n  parseAsString(value: any) -> string:\n  - Purpose: Parses the input value as a string.\n  - Arguments:\n    - value (any): The value to be parsed.\n  - Returns:\n    - string: The parsed string value.\n  - Exceptions:\n    - N/A\n\n  parseAsBoolean(value: any) -> boolean:\n  - Purpose: Parses the input value as a boolean.\n  - Arguments:\n    - value (any): The value to be parsed.\n  - Returns:\n    - boolean: The parsed boolean value.\n  - Exceptions:\n    - N/A\n\n  parseAsArrayOf(parser: function) -> array:\n  - Purpose: Parses the input value as an array using the specified parser function.\n  - Arguments:\n    - parser (function): The parser function for each element in the array.\n  - Returns:\n    - array: The parsed array value.\n  - Exceptions:\n    - N/A\n\n  parseAsJson(parser: function) -> object:\n  - Purpose: Parses the input value as JSON using the specified parser function.\n  - Arguments:\n    - parser (function): The parser function for the JSON object.\n  - Returns:\n    - object: The parsed JSON object.\n  - Exceptions:\n    - N/A\n\nOverall, this file defines functions for parsing different types of data and creates search parameters caches for the home and chat sections of the application.",
    "apps/web/lib/unfirlsite.ts": "File Summary: unfurl.ts\n\nModule Overview:\n\n  Purpose: This module is responsible for extracting metadata (such as title, description, image, and favicon) from a given URL by parsing its HTML content.\n  Dependencies: \n  - cheerio: A fast, flexible, and lean implementation of core jQuery designed specifically for the server.\n  - fetch: A built-in JavaScript function for making HTTP requests.\n\nFunctions:\n\n  unfurl(url: string) -> Promise<{ title: string | undefined, description: string | undefined, image: string | undefined, favicon: string | undefined }>\n  - Purpose: Extracts metadata (title, description, image, favicon) from the HTML content of a given URL.\n  - Arguments:\n    - url (string): The URL from which to extract metadata.\n  - Returns:\n    - Promise<{ title: string | undefined, description: string | undefined, image: string | undefined, favicon: string | undefined }>: An object containing the extracted metadata.\n  - Exceptions:\n    - Error: If there is an issue fetching the URL or if the content-type is not HTML.\n\nNote: The file uses the //@ts-nocheck directive to disable TypeScript type checking for certain parts of the code.",
    "apps/web/lib/useKeyPress.ts": "File Summary: useKeyPress.ts\n\nModule Overview:\n\n  Purpose: This module provides a custom hook called useKeyPress that allows developers to listen for a specific key press event with optional modifier keys and execute a callback function.\n  Dependencies: \n  - react: The React library for building user interfaces.\n\nFunctions:\n\n  useKeyPress(key: string, callback: () => void):\n  - Purpose: Listens for a specific key press event with optional modifier keys and executes a callback function.\n  - Arguments:\n    - key (string): The key to listen for.\n    - callback (() => void): The function to be called when the key press event occurs.\n  - Returns: None\n  - Exceptions: None\n\nThis file contains a custom hook called useKeyPress that utilizes the useEffect hook from React to listen for a specific key press event with optional modifier keys (in this case, the Alt key) and execute a callback function when the event occurs. The hook adds an event listener for the \"keydown\" event and removes it when the component unmounts.",
    "apps/web/lib/utils.ts": "File Summary: randomSentenceGenerator.ts\n\nModule Overview:\n\n  Purpose: This module provides a function to generate a random selection of sentences from a given input string.\n  Dependencies: None\n\nFunctions:\n\n  export function getRandomSentences(fullQuery: string): string:\n  - Purpose: Selects random sentences from the input string until the total character count reaches at least 1000.\n  - Arguments:\n    - fullQuery (string): The input string containing sentences.\n  - Returns:\n    - string: A string containing the randomly selected sentences.\n  - Exceptions: None\n\nAdditional Notes:\nThis file contains a single function that splits the input string into sentences, selects random sentences until the total character count is at least 1000, and returns the selected sentences as a string.",
    "apps/web/middleware.ts": "File Summary: nextServer.ts\n\nModule Overview:\n\n  Purpose: This module contains middleware functions for handling HTTP requests and responses using the Next.js server.\n  Dependencies: \n  - next/server: The Next.js server module for handling server-side logic.\n\nFunctions:\n\n  middleware(request: NextRequest) -> NextResponse:\n  - Purpose: Handles CORS headers for incoming requests and sets appropriate headers for the response.\n  - Arguments:\n    - request (NextRequest): The incoming request object.\n  - Returns:\n    - NextResponse: The response object with CORS headers set.\n  - Exceptions:\n    - None\n\n  config:\n  - Purpose: Defines a configuration object with a route matcher for API endpoints.\n  - Returns:\n    - Object: The configuration object with the route matcher defined.\n\nOverall, this file provides middleware functionality for handling CORS headers and defining API route configurations within the Next.js server environment.",
    "apps/web/next-env.d.ts": "File Title: next.config.js\n\nModule Overview:\n\n  Purpose: This file is the configuration file for a Next.js project. It allows developers to customize various settings and behaviors of the Next.js application.\n\n  Dependencies: \n  - next: The Next.js framework.\n  - next/image-types/global: Global image types for Next.js.\n\nNote: This file should not be edited directly. Refer to the Next.js documentation for more information on how to configure your Next.js project.\n\nIf you are documenting a file without classes or functions, provide a brief overview of the file's purpose and contents.",
    "apps/web/postcss.config.js": "File Summary: postcss.config.js\n\nModule Overview:\n\n  Purpose: This module exports the configuration for PostCSS, a tool for transforming CSS with JavaScript plugins. It defines the settings and plugins to be used when processing CSS files within the application.\n\n  Dependencies: \n  - @repo/tailwind-config: The Tailwind CSS configuration module.\n\nFunctions:\n  \n  None\n\nClasses:\n\n  None\n\nThis file serves as the configuration for PostCSS in the application, specifying the plugins and settings to be used during the CSS transformation process. It relies on the Tailwind CSS configuration module for additional styling configurations.",
    "apps/web/sentry.client.config.ts": "File Summary: sentryClientConfig.js\n\nModule Overview:\n\n  Purpose: This file configures the initialization of Sentry on the client side for error monitoring and reporting.\n  Dependencies: \n  - @sentry/nextjs: The Sentry SDK for Next.js.\n\nClasses: N/A\n\nFunctions: N/A\n\nThis file initializes Sentry with the provided configuration options, including the DSN (Data Source Name) for error reporting, tracesSampleRate for controlling the sampling rate of performance traces, debug mode for console information, and replay settings for error and session sampling rates. The integrations option allows for additional features to be enabled.\n\nFor more information on configuring Sentry with Next.js, refer to the official documentation at https://docs.sentry.io/platforms/javascript/guides/nextjs/.",
    "apps/web/sentry.edge.config.ts": "File Summary: SentryConfig.js\n\nModule Overview:\n\n  Purpose: This file configures the initialization of Sentry for edge features such as middleware and edge routes. The configuration added here will be used whenever one of these edge features is loaded, both in production and when running locally.\n  Dependencies: \n  - Sentry: The Sentry library for error tracking and monitoring.\n\nClasses: N/A\n\nFunctions: N/A\n\nOverall, this file is responsible for setting up Sentry for error tracking in edge features within the application. The configuration includes the Sentry DSN, traces sample rate, and debug mode settings. Developers can refer to the Sentry documentation for more information on how to customize and utilize Sentry with Next.js applications.",
    "apps/web/sentry.server.config.ts": "File Summary: sentryConfig.js\n\nModule Overview:\n\n  Purpose: This file configures the initialization of Sentry on the server, which is a tool used for error tracking and monitoring in web applications. The configuration added here will be used whenever the server handles a request.\n  \n  Dependencies: \n  - @sentry/nextjs: The Sentry SDK for Next.js.\n\nClasses: N/A\n\nFunctions: N/A\n\nThis file serves as the configuration setup for Sentry in a Next.js application. It includes the Sentry.init() function where you can set up the DSN (Data Source Name) for error tracking, adjust the tracesSampleRate for performance monitoring, enable debug mode for console information, and optionally enable Spotlight for development environments. The configuration in this file is crucial for monitoring and tracking errors in the application.",
    "apps/web/server/auth.ts": "File Summary: auth.js\n\nModule Overview:\n\n  Purpose: This module handles authentication and user sign-in/sign-out functionalities for the application.\n  Dependencies: \n  - NextAuth: A library for authentication in Next.js applications.\n  - DrizzleAdapter: An adapter for integrating authentication with a database.\n  - Google: A provider for Google authentication.\n  - db: A module for interacting with the database.\n\nClasses:\nN/A\n\nFunctions:\n\n  signIn() -> NextAuthResult: Initiates the sign-in process for the user.\n    - Returns: NextAuthResult object containing the result of the sign-in attempt.\n\n  signOut() -> NextAuthResult: Initiates the sign-out process for the user.\n    - Returns: NextAuthResult object containing the result of the sign-out attempt.\n\n  auth() -> NextAuthResult: Retrieves the authentication status of the user.\n    - Returns: NextAuthResult object containing the user's authentication status.\n\n  GET(url: string) -> Promise: Sends a GET request to the specified URL.\n    - Arguments:\n      - url (string): The URL to send the GET request to.\n    - Returns: A Promise that resolves with the response data.\n\n  POST(url: string, data: object) -> Promise: Sends a POST request to the specified URL with the provided data.\n    - Arguments:\n      - url (string): The URL to send the POST request to.\n      - data (object): The data to send in the request body.\n    - Returns: A Promise that resolves with the response data.\n\nOverall, the auth.js file is responsible for managing authentication processes, including sign-in, sign-out, and user authentication status. It relies on NextAuth, DrizzleAdapter, Google, and the db module to provide these functionalities.",
    "apps/web/server/db/index.ts": "Target File: db.js\n\nModule Overview:\n\n  Purpose: This module initializes and configures the database connection using the Drizzle ORM library. It sets up the database schema and logger based on the environment settings.\n  \n  Dependencies: \n  - drizzle-orm/d1: The Drizzle ORM library for database operations.\n  - schema: The schema module for defining the database structure.\n\nClasses:\nThis file does not define any classes.\n\nFunctions:\n\n  db:\n  - Purpose: Initializes the database connection with the specified database and schema, and sets up logging based on the environment.\n  - Arguments:\n    - process.env.DATABASE: The database connection string.\n    - schema: The database schema defined in the schema module.\n  - Returns:\n    - drizzle: The initialized Drizzle instance for database operations.",
    "apps/web/server/db/schema.ts": "Module Overview:\n\nPurpose: This file defines database tables for user authentication, user sessions, verification tokens, authenticators, stored content, spaces, chat threads, chat history, and canvas data within the application.\n\nDependencies:\n- \"domain\": Importing the create function from the \"domain\" module.\n- \"drizzle-orm\": Importing the relations and sql functions from the \"drizzle-orm\" module.\n- \"drizzle-orm/sqlite-core\": Importing index, int, primaryKey, sqliteTableCreator, text, integer functions from the \"drizzle-orm/sqlite-core\" module.\n- \"next-auth/adapters\": Importing the AdapterAccountType type from the \"next-auth/adapters\" module.\n\nClasses:\n- User: Represents user data with attributes such as id, name, email, image, telegramId, and authentication-related fields.\n- Account: Represents account data with attributes like userId, type, provider, providerAccountId, and authentication tokens.\n- Session: Represents session data with attributes for sessionToken, userId, and expiration time.\n- VerificationToken: Represents verification token data with identifier, token, and expiration time.\n- Authenticator: Represents authenticator data with attributes for credential information and user association.\n- StoredContent: Represents stored content data with attributes for content details and user association.\n- ContentToSpace: Represents the relationship between content and spaces.\n- Space: Represents space data with attributes for space details and user association.\n- SpacesAccess: Represents access control for spaces with attributes for spaceId and userEmail.\n- ChatThread: Represents chat thread data with attributes for thread details and user association.\n- ChatHistory: Represents chat history data with attributes for chat messages and timestamps.\n- Canvas: Represents canvas data with attributes for canvas details and user association.\n\nFunctions:\n- createTable: Creates a new SQLite table with specified columns and indexes.\n- $inferSelect: Infers the select query type for a table.\n- primaryKey: Defines a primary key constraint for a table.\n- references: Defines a foreign key constraint for a table.\n- index: Creates an index on a specified column.\n- $defaultFn: Sets a default function for a column value.\n\nThis file provides the necessary database structure for user authentication, content storage, chat functionality, and canvas data management within the application.",
    "apps/web/server/encrypt.ts": "File Summary: encryptionUtils.ts\n\nModule Overview:\n\n  Purpose: This module provides functions for encrypting and decrypting text using a custom cipher algorithm.\n  Dependencies: \n  - process.env.BACKEND_SECURITY_KEY: Environment variable containing the security key for encryption.\n  - Math: Built-in JavaScript library for mathematical operations.\n\nFunctions:\n\n  convertStringToFixedNumber(input: string) -> number:\n  - Purpose: Converts a given string into a fixed number using a hashing algorithm.\n  - Arguments:\n    - input (string): The input string to be converted.\n  - Returns:\n    - number: The hashed fixed number.\n  \n  random(seed: number) -> number:\n  - Purpose: Generates a random number based on a given seed.\n  - Arguments:\n    - seed (number): The seed for random number generation.\n  - Returns:\n    - number: The generated random number.\n\n  shuffle(array: string[], seed: number) -> string[]:\n  - Purpose: Shuffles the elements of an array based on a given seed.\n  - Arguments:\n    - array (string[]): The array to be shuffled.\n    - seed (number): The seed for shuffling.\n  - Returns:\n    - string[]: The shuffled array.\n\n  cipher(text: string) -> string:\n  - Purpose: Encrypts a given text using the custom cipher algorithm.\n  - Arguments:\n    - text (string): The text to be encrypted.\n  - Returns:\n    - string: The encrypted text.\n\n  decipher(text: string) -> string:\n  - Purpose: Decrypts a given text using the custom cipher algorithm.\n  - Arguments:\n    - text (string): The text to be decrypted.\n  - Returns:\n    - string: The decrypted text.\n  - Exceptions:\n    - None\n\n  extend(text: string, length = 60) -> string:\n  - Purpose: Extends a given text to a specified length by adding random characters.\n  - Arguments:\n    - text (string): The text to be extended.\n    - length (number): The desired length of the extended text.\n  - Returns:\n    - string: The extended text.\n\nThis file contains functions for hashing, random number generation, shuffling arrays, encryption, and decryption using a custom cipher algorithm. It utilizes a security key from the environment variables for encryption purposes.",
    "apps/web/tailwind.config.ts": "File Summary: tailwind.config.js\n\nModule Overview:\n\n  Purpose: This module exports the configuration settings for the Tailwind CSS framework used in the application.\n  Dependencies: \n  - @repo/tailwind-config: The Tailwind CSS configuration module.\n\nFunctions: \n  - N/A\n\nClasses:\n  - N/A\n\nThis file serves as the central configuration file for Tailwind CSS in the application, allowing developers to customize the design system and utility classes provided by Tailwind CSS.",
    "packages/eslint-config/library.js": "File Summary: tsconfig.json\n\nModule Overview:\n\n  Purpose: This file serves as the configuration file for TypeScript in the project, specifying compiler options and settings.\n  Dependencies: \n  - eslint: The ESLint library for code linting.\n  - prettier: The Prettier library for code formatting.\n  - eslint-config-turbo: A custom ESLint configuration.\n\nClasses: N/A\n\nFunctions: N/A\n\nAdditional Information:\n- The file sets up ESLint configurations for the project, including recommended rules, plugins, and global variables.\n- It specifies the project's environment as Node.js and includes settings for TypeScript resolution.\n- The file also defines patterns to ignore during linting, such as dotfiles, node_modules, and distribution files.\n- Overrides are specified for JavaScript and TypeScript files within the project.",
    "packages/eslint-config/next.js": "Module Overview:\n\nPurpose: This module serves as the ESLint configuration file for the TypeScript codebase. It defines the linting rules and settings to ensure code quality and consistency.\n\nDependencies: \n- node:path: A Node.js module for working with file paths.\n- eslint: The ESLint library for static code analysis.\n\nFunctions:\n- No functions are defined in this file.\n\nClasses:\n- No classes are defined in this file.\n\nOverall, this file is crucial for maintaining code quality and enforcing coding standards within the TypeScript project.",
    "packages/eslint-config/react-internal.js": "File Summary: eslint-config.js\n\nModule Overview:\n\n  Purpose: This file provides a custom ESLint configuration tailored for internal libraries utilizing React.\n  Dependencies: \n  - eslint: The ESLint library for linting code.\n  - prettier: The Prettier library for code formatting.\n  - eslint-config-turbo: A custom ESLint configuration.\n\nClasses: N/A\n\nFunctions: N/A\n\nThis file serves as a configuration file for ESLint, extending recommended rules, Prettier formatting, and a custom Turbo ESLint configuration. It defines global variables for React and JSX, sets the environment to browser, and configures settings for TypeScript resolution. Additionally, it ignores specific patterns and overrides ESLint to detect .tsx files.",
    "packages/shared-types/index.ts": "Module Overview:\n\nPurpose: This module defines various Zod schemas for data validation and conversion related to chat history and API data. It also includes a function to convert chat history data into a more compatible format.\n\nDependencies:\n- zod: A library for data validation and schema creation.\n\nClasses:\n\nSourceZod:\n- Purpose: Represents the schema for a single data source.\n- Attributes:\n  - type (string): The type of the data source.\n  - source (string): The source of the data.\n  - title (string): The title of the data.\n  - content (string): The content of the data.\n  - numChunks (number, optional, default: 1): The number of chunks the data is divided into.\n\nChatHistoryZod:\n- Purpose: Represents the schema for chat history data.\n- Attributes:\n  - question (string): The question asked in the chat.\n  - answer (object): The answer provided in the chat, including parts, sources, and justification.\n  - proModeProcessing (object): Processing details for pro mode queries.\n\nModelCompatibleChatHistoryZod:\n- Purpose: Represents a model-compatible version of chat history data.\n- Attributes:\n  - role (string): The role of the chat participant.\n  - content (string): The content of the chat message.\n\naddFromAPIType:\n- Purpose: Represents the schema for data obtained from an API.\n- Attributes:\n  - pageContent (string): The content of the API response.\n  - url (string): The URL of the API request.\n  - type (string, default: \"page\"): The type of data.\n  - title (string, optional, default: \"Untitled\"): The title of the data.\n  - description (string, optional, default: \"\"): The description of the data.\n  - ogImage (string, optional): The Open Graph image.\n  - image (string, optional): The image associated with the data.\n  - spaces (array of strings, optional, default: []): Spaces related to the data.\n\nFunctions:\n\nconvertChatHistoryList(chatHistoryList: ChatHistory[]) -> ModelCompatibleChatHistory:\n- Purpose: Converts chat history data into a model-compatible format.\n- Arguments:\n  - chatHistoryList (array of ChatHistory): The list of chat history data to convert.\n- Returns:\n  - ModelCompatibleChatHistory: The converted chat history data.\n- Exceptions:\n  - None\n\nOverall, this file provides schemas for various data structures related to chat history and API data, along with a function to convert chat history data into a more compatible format.",
    "packages/shared-types/utils.ts": "Page Title: tweetUtils.ts\n\nModule Overview:\n\n  Purpose: This module provides utility functions for working with tweet data, including converting tweets to Markdown format and extracting raw tweet content.\n  \n  Dependencies: \n  - react-tweet/api: The library for working with tweet data.\n\nFunctions:\n\n  tweetToMd(tweet: Tweet) -> string:\n  - Purpose: Converts a tweet object to a Markdown format string.\n  - Arguments:\n    - tweet (Tweet): The tweet object to be converted.\n  - Returns:\n    - string: The tweet content in Markdown format.\n  \n  getRawTweet(tweet: string) -> string:\n  - Purpose: Extracts the content inside the last <raw> tag from a tweet.\n  - Arguments:\n    - tweet (string): The tweet content to extract from.\n  - Returns:\n    - string: The content inside the <raw> tag.\n  - Exceptions:\n    - None\n\nOverall, this file provides essential functions for handling tweet data, such as converting tweets to Markdown format and extracting raw tweet content.",
    "packages/tailwind-config/globals.css": "File Summary: tailwind.config.js\n\nModule Overview:\n\nPurpose: This file defines the global styles and configurations for the Tailwind CSS framework used in the application.\nDependencies: None\n\nClasses: N/A\n\nFunctions: N/A\n\nFile Overview:\nThis file contains the configuration settings for Tailwind CSS, including color variables, utility classes, and custom styles. It sets the base, components, and utilities layers for the Tailwind CSS framework, defining the color palette, typography, and layout styles used throughout the application. Developers can customize the design system by modifying the variables and utility classes defined in this file.",
    "packages/tailwind-config/postcss.config.js": "Module Overview:\n\n  Purpose: This module exports an object containing configuration options for PostCSS plugins, specifically Tailwind CSS and Autoprefixer.\n\n  Dependencies: \n  - Tailwind CSS: A utility-first CSS framework for rapidly building custom designs.\n  - Autoprefixer: A tool that automatically adds vendor prefixes to CSS rules.\n\nClasses:\nThis module does not define any classes.\n\nFunctions:\nThis module does not define any functions.",
    "packages/tailwind-config/tailwind.config.ts": "Module Overview:\n\n  Purpose: This file defines the configuration for Tailwind CSS, a utility-first CSS framework for rapidly building custom designs. It specifies the dark mode settings, content paths, theme customization, and plugins used in the application.\n\n  Dependencies: \n  - tailwindcss: The main Tailwind CSS library.\n\nClasses:\nThis file does not contain any classes.\n\nFunctions:\nThis file does not contain any functions.\n\nOverall, this file serves as the central configuration file for Tailwind CSS in the application, defining various styling options, content paths, and plugins used to customize the design and layout of the application.",
    "packages/ui/.eslintrc.js": "File Summary: eslint-config.js\n\nModule Overview:\n\n  Purpose: This module defines the ESLint configuration for the project, ensuring consistent code style and quality across the codebase.\n  Dependencies: \n  - eslint: The ESLint library for linting JavaScript code.\n  - @typescript-eslint/parser: The TypeScript parser for ESLint.\n  - tsconfig.lint.json: The TypeScript configuration file for linting.\n\nClasses: N/A\n\nFunctions: N/A\n\nThis file exports an ESLint configuration object that specifies the root directory, extends a predefined configuration for React projects, and uses the TypeScript parser with specific parser options. It ensures that the codebase follows the defined linting rules and standards for better code quality and maintainability.",
    "packages/ui/components/cardClick.tsx": "Module Overview:\n\n  Purpose: The \"use client\" module provides components for displaying cards with interactive features, such as clicking and hovering effects.\n  \n  Dependencies: \n  - \"@repo/ui/lib/utils\": Utility functions for styling and layout.\n  - \"framer-motion\": Library for creating animations in React components.\n  - \"React\": JavaScript library for building user interfaces.\n\nFunctions:\n\n  CardClick:\n  - Purpose: Renders a clickable card component with dynamic content.\n  - Arguments:\n    - tab (number): The active tab index.\n    - handleClickIndex (function): Callback function to handle tab clicks.\n    - items (array): An array of objects containing title, description, and SVG content for each card.\n  - Returns: JSX element representing the card component.\n  - Exceptions: None\n\n  Card:\n  - Purpose: Renders a card component with a title, description, and SVG content.\n  - Arguments:\n    - title (string): The title of the card.\n    - description (string): The description of the card.\n    - svg (React.ReactNode): SVG content for the card.\n  - Returns: JSX element representing the card component.\n  - Exceptions: None\n\nOverall, the \"use client\" module provides reusable components for creating interactive card elements with dynamic content. Developers can utilize these components to enhance user interactions and visual appeal within their applications.",
    "packages/ui/components/icons.tsx": "File Summary: icons.tsx\n\nModule Overview:\n\nPurpose: This file contains React components for various icons used in the application.\nDependencies: \n- react: The React library for building user interfaces.\n\nComponents:\n\nGithub:\n- Purpose: Represents the Github icon.\n- Props:\n  - props: SVGProps<SVGSVGElement> - Props for the SVG element.\n- Attributes:\n  - viewBox: \"0 0 256 250\" - Defines the position and dimension of the view box.\n  - width: \"1em\" - Sets the width of the icon.\n  - height: \"1em\" - Sets the height of the icon.\n  - fill: \"currentColor\" - Sets the fill color of the icon.\n- Methods: N/A\n\nTwitter:\n- Purpose: Represents the Twitter icon.\n- Props:\n  - props: SVGProps<SVGSVGElement> - Props for the SVG element.\n- Attributes:\n  - viewBox: \"0 0 256 209\" - Defines the position and dimension of the view box.\n  - width: \"1em\" - Sets the width of the icon.\n  - height: \"1em\" - Sets the height of the icon.\n- Methods: N/A\n\nMedium:\n- Purpose: Represents the Medium icon.\n- Props:\n  - props: SVGProps<SVGSVGElement> - Props for the SVG element.\n- Attributes:\n  - width: \"52\" - Sets the width of the icon.\n  - height: \"52\" - Sets the height of the icon.\n  - viewBox: \"0 0 52 52\" - Defines the position and dimension of the view box.\n- Methods: N/A\n\nReddit:\n- Purpose: Represents the Reddit icon.\n- Props:\n  - props: SVGProps<SVGSVGElement> - Props for the SVG element.\n- Attributes: N/A\n- Methods: N/A\n\nNotion:\n- Purpose: Represents the Notion icon.\n- Props:\n  - props: SVGProps<SVGSVGElement> - Props for the SVG element.\n- Attributes:\n  - viewBox: \"0 0 256 268\" - Defines the position and dimension of the view box.\n- Methods: N/A\n\nX:\n- Purpose: Represents the X (close) icon.\n- Props:\n  - props: SVGProps<SVGSVGElement> - Props for the SVG element.\n- Attributes:\n  - viewBox: \"0 0 1200 1227\" - Defines the position and dimension of the view box.\n- Methods: N/A\n\nGoogle:\n- Purpose: Represents the Google icon.\n- Props:\n  - props: SVGProps<SVGSVGElement> - Props for the SVG element.\n- Attributes:\n  - viewBox: \"0 0 256 262\" - Defines the position and dimension of the view box.\n- Methods: N/A\n\nThis file provides a collection of React components for various icons used in the application. Each component represents a specific icon and accepts props for customization.",
    "packages/ui/hooks/use-callback-ref.ts": "File Summary: useCallbackRef.tsx\n\nModule Overview:\n\n  Purpose: This file contains a custom hook that converts a callback function to a ref in order to prevent re-renders or re-executing effects unnecessarily.\n  Dependencies: \n  - react: The React library for building user interfaces.\n\nFunctions:\n\n  useCallbackRef(callback: T | undefined) -> T:\n  - Purpose: Converts a callback function to a ref to avoid re-renders or re-executing effects.\n  - Arguments:\n    - callback (T | undefined): The callback function to be converted to a ref.\n  - Returns:\n    - T: The converted callback function as a ref.\n  - Exceptions:\n    - None\n\nNote: This file does not contain any classes.",
    "packages/ui/hooks/use-controllable-state.ts": "File Summary: useControllableState.tsx\n\nModule Overview:\n\n  Purpose: This module provides a custom hook for managing state in a controlled or uncontrolled manner, allowing developers to easily handle state changes in React components.\n  \n  Dependencies: \n  - @repo/ui/hooks/use-callback-ref: A custom hook for creating a callback ref in React components.\n\nFunctions:\n\n  useControllableState<T>:\n  - Purpose: A custom hook for managing state in a controlled or uncontrolled manner.\n  - Arguments:\n    - prop?: T | undefined: The controlled state value.\n    - defaultProp?: T | undefined: The default uncontrolled state value.\n    - onChange?: (state: T) => void: A callback function to handle state changes.\n  - Returns:\n    - [value, setValue] as const: An array containing the current state value and a function to update the state.\n  - Exceptions: None\n\n  useUncontrolledState<T>:\n  - Purpose: A helper function for managing uncontrolled state.\n  - Arguments:\n    - defaultProp: T | undefined: The default uncontrolled state value.\n    - onChange: (state: T) => void: A callback function to handle state changes.\n  - Returns:\n    - uncontrolledState: A tuple containing the current uncontrolled state value and a function to update the state.\n  - Exceptions: None\n\nNote: This file provides essential functionality for managing state in React components, offering developers flexibility in handling state changes.",
    "packages/ui/icons/index.ts": "Module Overview:\n\nPurpose: This module exports a collection of icons used within the application for various functionalities such as adding, chatting, history, exploring, etc.\n\nDependencies: None\n\nClasses: None\n\nFunctions: None\n\nThis file serves as a central repository for importing and exporting various icon components used throughout the application. Developers can easily access and use these icons in different parts of the application by importing them from this file.",
    "packages/ui/lib/utils.ts": "File Summary: utils.ts\n\nModule Overview:\n\n  Purpose: This module provides utility functions for common tasks such as handling CSS classes, formatting bytes, generating absolute URLs, and composing event handlers.\n  Dependencies: \n  - clsx: Library for joining CSS classes together.\n  - tailwind-merge: Library for merging Tailwind CSS classes.\n\nFunctions:\n\n  cn(...inputs: ClassValue[]) -> string:\n  - Purpose: Combines and merges CSS classes using clsx and twMerge.\n  - Arguments:\n    - inputs (ClassValue[]): Array of CSS classes to merge.\n  - Returns: \n    - string: Merged CSS classes.\n\n  formatBytes(bytes: number, opts: { decimals?: number, sizeType?: \"accurate\" | \"normal\" } = {}) -> string:\n  - Purpose: Formats a given number of bytes into a human-readable size.\n  - Arguments:\n    - bytes (number): The number of bytes to format.\n    - opts (object): Optional parameters for formatting.\n  - Returns:\n    - string: Formatted size with specified decimals and size type.\n  \n  absoluteUrl(path: string) -> string:\n  - Purpose: Generates an absolute URL by combining the app URL with the provided path.\n  - Arguments:\n    - path (string): The path to append to the app URL.\n  - Returns:\n    - string: Absolute URL.\n\n  composeEventHandlers<E>(originalEventHandler?: (event: E) => void, ourEventHandler?: (event: E) => void, { checkForDefaultPrevented = true } = {}) -> (event: E) => void:\n  - Purpose: Composes two event handlers, executing them in sequence.\n  - Arguments:\n    - originalEventHandler (function): The original event handler.\n    - ourEventHandler (function): The custom event handler.\n    - checkForDefaultPrevented (boolean): Flag to check if the event has been default prevented.\n  - Returns:\n    - function: Combined event handler function.\n\nNote: The file also includes a reference to a source for the composeEventHandlers function.\n\nThis summary provides an overview of the utility functions in the utils.ts file, their purposes, arguments, return values, and potential exceptions. Developers can refer to this summary to understand the functionalities and usage of the functions in the file.",
    "packages/ui/shadcn/accordion.tsx": "Module Overview:\n\n  Purpose: This module provides components for creating accordion UI elements in React applications.\n  Dependencies: \n  - React: A JavaScript library for building user interfaces.\n  - @radix-ui/react-accordion: A library for creating accessible accordion components.\n  - @heroicons/react: A library of free icons for React applications.\n  - @repo/ui/lib/utils: Utility functions for the UI components.\n\nClasses:\n\n  Accordion:\n  - Purpose: Represents the root component of the accordion.\n  - Attributes: None\n  - Methods: None\n\n  AccordionItem:\n  - Purpose: Represents an item within the accordion.\n  - Attributes: className (string) - CSS class name for styling.\n  - Methods: None\n\n  AccordionTrigger:\n  - Purpose: Represents the trigger element that controls the accordion item.\n  - Attributes: className (string) - CSS class name for styling, children (ReactNode) - content of the trigger.\n  - Methods: None\n\n  AccordionContent:\n  - Purpose: Represents the content that is revealed when the accordion item is expanded.\n  - Attributes: className (string) - CSS class name for styling, children (ReactNode) - content of the content.\n  - Methods: None\n\nFunctions: None\n\nOverall, this file provides the necessary components for creating an accordion UI element in a React application. Developers can use the Accordion, AccordionItem, AccordionTrigger, and AccordionContent components to easily implement accordion functionality in their projects.",
    "packages/ui/shadcn/badge.tsx": "Module Overview:\n\nPurpose: This module defines a Badge component that can be used in the application to display badges with different variants.\n\nDependencies:\n- React: A JavaScript library for building user interfaces.\n- class-variance-authority: A library for managing variant styles.\n- @repo/ui/lib/utils: Utility functions for the UI.\n\nClasses:\n\nBadge:\n- Purpose: Represents a badge component that can display different variants.\n- Attributes:\n  - className (string): Additional CSS classes for styling.\n  - variant (string): The variant of the badge.\n- Methods:\n  - Badge({ className, variant, ...props }: BadgeProps) -> JSX.Element: Renders the badge component.\n      - Arguments:\n        - className (string): Additional CSS classes for styling.\n        - variant (string): The variant of the badge.\n        - props (React.HTMLAttributes<HTMLDivElement>): Additional HTML attributes.\n      - Returns:\n        - JSX.Element: The rendered badge component.\n\nFunctions:\nNone\n\nOverall, this file defines a Badge component that can be customized with different variants for styling purposes. Developers can use this component to display badges with various styles in the application.",
    "packages/ui/shadcn/breadcrumb.tsx": "Module Overview:\n\n  Purpose: This module provides components for creating breadcrumb navigation in a web application.\n  Dependencies: \n  - React: A JavaScript library for building user interfaces.\n  - @radix-ui/react-slot: A library for managing slots in React components.\n  - lucide-react: A library of icons for use in React components.\n  - @repo/ui/lib/utils: Utility functions for styling and handling components.\n\nClasses:\n\n  Breadcrumb:\n  - Purpose: Represents the main breadcrumb navigation component.\n  - Attributes: None\n  - Methods: None\n\n  BreadcrumbList:\n  - Purpose: Represents a list of breadcrumb items.\n  - Attributes:\n    - className (string): Additional CSS classes for styling.\n  - Methods: None\n\n  BreadcrumbItem:\n  - Purpose: Represents an individual breadcrumb item.\n  - Attributes:\n    - className (string): Additional CSS classes for styling.\n  - Methods: None\n\n  BreadcrumbLink:\n  - Purpose: Represents a clickable link within a breadcrumb item.\n  - Attributes:\n    - asChild (boolean): Flag to determine if the link should be rendered as a child component.\n    - className (string): Additional CSS classes for styling.\n  - Methods: None\n\n  BreadcrumbPage:\n  - Purpose: Represents the current page in the breadcrumb navigation.\n  - Attributes:\n    - className (string): Additional CSS classes for styling.\n  - Methods: None\n\n  BreadcrumbSeparator:\n  - Purpose: Represents a separator between breadcrumb items.\n  - Attributes:\n    - children (ReactNode): Optional content to display as the separator.\n    - className (string): Additional CSS classes for styling.\n  - Methods: None\n\n  BreadcrumbEllipsis:\n  - Purpose: Represents an ellipsis icon for indicating additional breadcrumb items.\n  - Attributes:\n    - className (string): Additional CSS classes for styling.\n  - Methods: None\n\nFunctions: None\n\nOverall, this file provides a set of React components for creating breadcrumb navigation elements in a web application. Each component serves a specific role in constructing and styling the breadcrumb navigation, allowing developers to easily implement and customize breadcrumb functionality in their projects.",
    "packages/ui/shadcn/button.tsx": "Module Overview:\n\nPurpose: This module defines a Button component that can be used in the application for various UI interactions. It provides different variants and sizes for the button, allowing for customization based on the application's design system.\n\nDependencies:\n- React: A JavaScript library for building user interfaces.\n- @radix-ui/react-slot: A library for managing slots in React components.\n- class-variance-authority: A library for defining and managing component variants.\n\nClasses:\n\nButton:\n- Purpose: Represents a customizable button component that can be used in the application.\n- Attributes:\n  - className (string): Additional CSS classes to apply to the button.\n  - variant (string): The variant of the button (e.g., default, destructive, outline).\n  - size (string): The size of the button (e.g., default, sm, lg, icon).\n  - asChild (boolean): Flag indicating if the button should render as a child component.\n- Methods:\n  - None\n\nFunctions:\n- buttonVariants(styles: object) -> function: Generates a function that applies the specified styles to the button variants.\n  - Purpose: Creates a function to apply styles to different button variants.\n  - Arguments:\n    - styles (object): Styles for different button variants.\n  - Returns:\n    - function: A function that applies the specified styles to the button variants.\n  - Exceptions:\n    - None\n\n- Button(props: ButtonProps) -> JSX.Element: Renders the Button component with the specified props.\n  - Purpose: Renders the Button component with the provided props.\n  - Arguments:\n    - props (ButtonProps): Props for customizing the Button component.\n  - Returns:\n    - JSX.Element: The rendered Button component.\n  - Exceptions:\n    - None\n\nOverall, this file defines a Button component with customizable variants and sizes, allowing developers to easily create and style buttons in the application.",
    "packages/ui/shadcn/card.tsx": "Module Overview:\n\nPurpose: This module defines a set of reusable components for creating card UI elements in a React application.\n\nDependencies:\n- @repo/ui/lib/utils: A library providing utility functions for the UI components.\n\nClasses:\n\nCard:\n- Purpose: Represents a card component with a border, background color, and shadow.\n- Attributes:\n  - className (string): Additional CSS classes to apply to the card.\n- Methods: N/A\n\nCardHeader:\n- Purpose: Represents the header section of a card component.\n- Attributes:\n  - className (string): Additional CSS classes to apply to the header.\n- Methods: N/A\n\nCardTitle:\n- Purpose: Represents the title section of a card component.\n- Attributes:\n  - className (string): Additional CSS classes to apply to the title.\n- Methods: N/A\n\nCardDescription:\n- Purpose: Represents the description section of a card component.\n- Attributes:\n  - className (string): Additional CSS classes to apply to the description.\n- Methods: N/A\n\nCardContent:\n- Purpose: Represents the content section of a card component.\n- Attributes:\n  - className (string): Additional CSS classes to apply to the content.\n- Methods: N/A\n\nCardFooter:\n- Purpose: Represents the footer section of a card component.\n- Attributes:\n  - className (string): Additional CSS classes to apply to the footer.\n- Methods: N/A\n\nFunctions: N/A\n\nOverall, this file provides a set of React components for creating customizable card UI elements with different sections like header, title, description, content, and footer. Developers can easily use these components to build visually appealing card layouts in their applications.",
    "packages/ui/shadcn/combobox.tsx": "Module Overview:\n\n  Purpose: The \"use client\" module provides a React component called ComboboxWithCreate that allows users to select options from a list or create new options. It handles user input and interaction for a combobox with a create option.\n  \n  Dependencies: \n  - React: A JavaScript library for building user interfaces.\n  - \"../lib/utils\": A utility library for common functions.\n  - \"./button\": A button component for user interaction.\n  - \"./command\": Components for handling user commands and input.\n\nClasses:\n\n  ComboboxWithCreate:\n  - Purpose: Represents a React functional component for a combobox with create functionality.\n  - Attributes:\n    - options (Option[]): An array of options for the combobox.\n    - onSelect (function): A function to handle option selection.\n    - onSubmit (function): A function to handle submitting a new option.\n    - placeholder (string): Placeholder text for the input field.\n    - emptyMessage (string): Message displayed when no options are found.\n    - createNewMessage (string): Message displayed for creating a new option.\n    - className (string): CSS class for styling.\n  - Methods:\n    - onChangeCapture(e: React.ChangeEvent<HTMLInputElement>): Updates the input value.\n    - useEffect(): Sets initial options when component mounts.\n    - render(): Renders the combobox with options and create functionality.\n\nFunctions: N/A\n\nOverall, the \"use client\" module provides a reusable component for creating a combobox with the ability to select existing options or create new ones. It handles user input, option selection, and submission of new options in a user-friendly manner.",
    "packages/ui/shadcn/command.tsx": "Module Overview:\n\n  Purpose: The \"use client\" module provides components for creating and managing commands within a UI interface.\n  \n  Dependencies: \n  - React: A JavaScript library for building user interfaces.\n  - @radix-ui/react-dialog: A library for creating accessible dialogs.\n  - cmdk: A library for building command interfaces.\n  - @repo/ui: Internal UI components library.\n  \nClasses:\n\n  Command:\n  - Purpose: Represents a command component that can be used within the UI.\n  - Attributes:\n    - className (string): The CSS class name for styling the command component.\n  - Methods: N/A\n\n  CommandDialog:\n  - Purpose: Represents a dialog component that wraps a command component.\n  - Attributes: N/A\n  - Methods: N/A\n\n  CommandInput:\n  - Purpose: Represents an input component for entering commands.\n  - Attributes:\n    - className (string): The CSS class name for styling the input component.\n  - Methods: N/A\n\n  CommandList:\n  - Purpose: Represents a list component for displaying a list of commands.\n  - Attributes:\n    - className (string): The CSS class name for styling the list component.\n  - Methods: N/A\n\n  CommandEmpty:\n  - Purpose: Represents an empty state component for when there are no commands to display.\n  - Attributes: N/A\n  - Methods: N/A\n\n  CommandGroup:\n  - Purpose: Represents a group component for grouping commands.\n  - Attributes:\n    - className (string): The CSS class name for styling the group component.\n  - Methods: N/A\n\n  CommandSeparator:\n  - Purpose: Represents a separator component for visually separating commands.\n  - Attributes:\n    - className (string): The CSS class name for styling the separator component.\n  - Methods: N/A\n\n  CommandItem:\n  - Purpose: Represents an item component within a list of commands.\n  - Attributes:\n    - className (string): The CSS class name for styling the item component.\n  - Methods: N/A\n\n  CommandShortcut:\n  - Purpose: Represents a shortcut component for displaying keyboard shortcuts.\n  - Attributes:\n    - className (string): The CSS class name for styling the shortcut component.\n  - Methods: N/A\n\nFunctions: N/A\n\nOverall, the \"use client\" module provides a set of components for creating and managing commands within a UI interface. These components can be used to build interactive command interfaces with various functionalities such as input, lists, groups, and shortcuts.",
    "packages/ui/shadcn/dialog.tsx": "Module Overview:\n\nPurpose: The \"use client\" file is responsible for managing dialog components in the application, including triggers, portals, overlays, content, headers, footers, titles, and descriptions.\n\nDependencies:\n- React: A JavaScript library for building user interfaces.\n- DialogPrimitive: A library for creating accessible dialog components.\n- lucide-react: A library for icons.\n\nClasses:\n\nDialog:\n- Purpose: Represents the root dialog component.\n- Attributes: N/A\n- Methods: N/A\n\nDialogPortal:\n- Purpose: Represents the portal where the dialog content is rendered.\n- Attributes: N/A\n- Methods: N/A\n\nDialogOverlay:\n- Purpose: Represents the overlay that covers the screen when the dialog is open.\n- Attributes: className\n- Methods: N/A\n\nDialogContent:\n- Purpose: Represents the content of the dialog.\n- Attributes: className, children\n- Methods: N/A\n\nDialogHeader:\n- Purpose: Represents the header section of the dialog.\n- Attributes: className\n- Methods: N/A\n\nDialogFooter:\n- Purpose: Represents the footer section of the dialog.\n- Attributes: className\n- Methods: N/A\n\nDialogTitle:\n- Purpose: Represents the title of the dialog.\n- Attributes: className\n- Methods: N/A\n\nDialogDescription:\n- Purpose: Represents the description of the dialog.\n- Attributes: className\n- Methods: N/A\n\nFunctions:\n\nN/A\n\nOverall, the \"use client\" file provides the necessary components for creating and managing dialog interfaces in the application, ensuring a smooth and accessible user experience.",
    "packages/ui/shadcn/divider.tsx": "Module Overview:\n\n  Purpose: This module defines a Divider component that can be used to create a horizontal line to visually separate content on a webpage.\n\n  Dependencies: \n  - @repo/ui/lib/utils: The module that provides the 'cn' utility function for generating CSS class names.\n\nFunctions:\n\n  Divider:\n  - Purpose: Represents a horizontal line divider component.\n  - Arguments:\n    - className (string): Optional CSS class name to customize the appearance of the divider.\n  - Returns:\n    - JSX.Element: A div element representing the horizontal line divider.\n  - Exceptions:\n    - None",
    "packages/ui/shadcn/drawer.tsx": "Module Overview:\n\nPurpose: The \"use client\" module provides components for creating a drawer interface in a React application.\n\nDependencies:\n- React: A JavaScript library for building user interfaces.\n- vaul: A library for creating UI components.\n- @repo/ui/lib/utils: Utility functions for UI components.\n\nClasses:\n\nDrawer:\n- Purpose: Represents a drawer component that can be used to display content in a sliding panel.\n- Attributes:\n  - shouldScaleBackground (boolean): Indicates whether the background should scale when the drawer is open.\n- Methods: N/A\n\nDrawerOverlay:\n- Purpose: Represents an overlay component that covers the screen when the drawer is open.\n- Attributes: N/A\n- Methods: N/A\n\nDrawerContent:\n- Purpose: Represents the content area of the drawer where the main content is displayed.\n- Attributes: N/A\n- Methods: N/A\n\nDrawerHeader:\n- Purpose: Represents the header section of the drawer.\n- Attributes: N/A\n- Methods: N/A\n\nDrawerFooter:\n- Purpose: Represents the footer section of the drawer.\n- Attributes: N/A\n- Methods: N/A\n\nDrawerTitle:\n- Purpose: Represents the title of the drawer.\n- Attributes: N/A\n- Methods: N/A\n\nDrawerDescription:\n- Purpose: Represents the description text of the drawer.\n- Attributes: N/A\n- Methods: N/A\n\nFunctions: N/A\n\nOverall, the \"use client\" module provides a set of components for creating a customizable drawer interface in a React application. Developers can use these components to easily implement a sliding panel with various sections such as content, header, footer, title, and description.",
    "packages/ui/shadcn/dropdown-menu.tsx": "Module Overview:\n\nPurpose: The \"use client\" file is responsible for defining various components related to dropdown menus in a React application. These components include triggers, content, items, labels, separators, and shortcuts for dropdown menus.\n\nDependencies:\n- React: A JavaScript library for building user interfaces.\n- @radix-ui/react-dropdown-menu: A library for creating accessible dropdown menus in React.\n- lucide-react: A library of icons for use in React applications.\n- @repo/ui/lib/utils: Utility functions for the UI components in the application.\n\nClasses:\n\nDropdownMenu:\n- Purpose: Represents the root component for a dropdown menu.\n- Attributes: None\n- Methods: None\n\nDropdownMenuTrigger:\n- Purpose: Represents the trigger element that opens the dropdown menu.\n- Attributes: None\n- Methods: None\n\nDropdownMenuContent:\n- Purpose: Represents the content area of the dropdown menu.\n- Attributes: sideOffset (number) - The offset value for positioning the content.\n- Methods: None\n\nDropdownMenuItem:\n- Purpose: Represents an item within the dropdown menu.\n- Attributes: inset (boolean) - Indicates if the item is inset.\n- Methods: None\n\nDropdownMenuCheckboxItem:\n- Purpose: Represents a checkbox item within the dropdown menu.\n- Attributes: checked (boolean) - Indicates if the checkbox is checked.\n- Methods: None\n\nDropdownMenuRadioItem:\n- Purpose: Represents a radio item within the dropdown menu.\n- Attributes: None\n- Methods: None\n\nDropdownMenuLabel:\n- Purpose: Represents a label within the dropdown menu.\n- Attributes: inset (boolean) - Indicates if the label is inset.\n- Methods: None\n\nDropdownMenuSeparator:\n- Purpose: Represents a separator within the dropdown menu.\n- Attributes: None\n- Methods: None\n\nDropdownMenuShortcut:\n- Purpose: Represents a shortcut element within the dropdown menu.\n- Attributes: None\n- Methods: None\n\nFunctions:\n\nNone\n\nOverall, the \"use client\" file provides a comprehensive set of components for creating and customizing dropdown menus in a React application. Developers can easily integrate these components into their UI to enhance user interaction and navigation.",
    "packages/ui/shadcn/form.tsx": "Module Overview:\n\nPurpose: This file contains components and utilities related to form handling in React applications. It provides a set of components for building forms with validation and error handling.\n\nDependencies:\n- React: A JavaScript library for building user interfaces.\n- react-hook-form: A library for managing form state and validation in React applications.\n- @radix-ui/react-label: A library for styling form labels.\n- @repo/ui: Custom UI components and utilities.\n\nClasses:\n\nFormField:\n- Purpose: Represents a form field component that integrates with react-hook-form for form state management.\n- Attributes:\n  - name (string): The name of the form field.\n- Methods: N/A\n\nFormItem:\n- Purpose: Represents a form item component that wraps form elements and provides spacing.\n- Attributes:\n  - id (string): The unique identifier of the form item.\n- Methods: N/A\n\nFormLabel:\n- Purpose: Represents a form label component that associates a label with a form field.\n- Attributes: N/A\n- Methods: N/A\n\nFormControl:\n- Purpose: Represents a form control component that manages form field accessibility and error messaging.\n- Attributes: N/A\n- Methods: N/A\n\nFormDescription:\n- Purpose: Represents a form description component for providing additional context or instructions for a form field.\n- Attributes: N/A\n- Methods: N/A\n\nFormMessage:\n- Purpose: Represents a form message component for displaying error messages related to a form field.\n- Attributes: N/A\n- Methods: N/A\n\nFunctions:\n\nuseFormField:\n- Purpose: A custom hook for accessing form field context and state within form components.\n- Arguments: N/A\n- Returns: An object containing form field information such as id, name, and field state.\n- Exceptions: Throws an error if used outside of a FormField component.\n\ncreate_user(username: str, email: str) -> User:\n- Purpose: Creates a new user account.\n- Arguments:\n  - username (str): The desired username.\n  - email (str): The email address of the new user.\n- Returns:\n  - User: The newly created user object.\n- Exceptions:\n  - ValueError: If the username or email is invalid.\n\ndelete_user(user: User) -> None:\n- Purpose: Deletes a user account.\n- Arguments:\n  - user (User): The user account to be deleted.\n- Returns: None\n- Exceptions:\n  - PermissionError: If the user does not have the required permissions.\n  - DatabaseError: If there is an issue deleting the user.",
    "packages/ui/shadcn/input.tsx": "Module Overview:\n\nPurpose: The file is responsible for defining an Input component using React. This component is used for creating input fields in forms within the application.\n\nDependencies:\n- React: A JavaScript library for building user interfaces.\n- @repo/ui/lib/utils: A library for utility functions used in the UI components.\n\nClasses:\n\nInput:\n- Purpose: Represents an input field component for forms.\n- Attributes:\n  - className (string): Additional CSS classes for styling.\n  - type (string): The type of input field (e.g., text, password).\n- Methods:\n  - None\n\nFunctions:\n- None\n\nOverall, this file provides a reusable Input component that can be easily integrated into forms across the application.",
    "packages/ui/shadcn/label.tsx": "Module Overview:\n\nPurpose: The \"use client\" module is responsible for defining and exporting the Label component, which is a customized label element used in the application.\n\nDependencies:\n- React: A JavaScript library for building user interfaces.\n- @radix-ui/react-label: A library for creating accessible label components.\n- class-variance-authority: A library for defining and managing component variants.\n- @repo/ui/lib/utils: Utility functions for the application.\n\nClasses:\n\nLabel:\n- Purpose: Represents a customized label component used in the application.\n- Attributes: \n  - className (string): The CSS class name for styling the label component.\n- Methods:\n  - React.forwardRef(): A higher-order component that forwards a ref to the LabelPrimitive.Root component.\n  - cn(): A utility function for combining class names.\n  - displayName: A property that sets the display name of the Label component.\n\nFunctions:\n- None\n\nOverall, the \"use client\" module provides the Label component, which is styled using the class-variance-authority library and React components. It is used for displaying labels in the application with customizable styles.",
    "packages/ui/shadcn/popover.tsx": "Module Overview:\n\n  Purpose: The \"use client\" module provides functionality for creating and managing popovers in a React application.\n  \n  Dependencies: \n  - React: A JavaScript library for building user interfaces.\n  - @radix-ui/react-popover: A library for creating accessible popovers.\n  - @repo/ui/lib/utils: Utility functions for the UI.\n\nClasses:\n\n  Popover:\n  - Purpose: Represents the root element of a popover.\n  \n  PopoverTrigger:\n  - Purpose: Represents the trigger element that activates the popover.\n  \n  PopoverContent:\n  - Purpose: Represents the content of the popover.\n  - Attributes:\n    - align (string): The alignment of the popover content.\n    - sideOffset (number): The offset from the trigger element.\n  - Methods:\n    - None\n\nFunctions:\n  \n  None",
    "packages/ui/shadcn/progress.tsx": "Module Overview:\n\nPurpose: The \"use client\" module is responsible for creating a progress bar component in a React application. It utilizes the ProgressPrimitive component from the @radix-ui/react-progress library to display a customizable progress indicator.\n\nDependencies:\n- React: A JavaScript library for building user interfaces.\n- ProgressPrimitive: A component library for creating progress indicators.\n- @repo/ui/lib/utils: Utility functions for styling and handling components.\n\nClasses:\n- Progress:\n  - Purpose: Represents a progress bar component that displays the progress of a task.\n  - Attributes:\n    - className (string): Additional CSS classes for styling.\n    - value (number): The current progress value (0-100).\n  - Methods:\n    - None\n\nFunctions:\n- None\n\nOverall, the \"use client\" module provides a reusable Progress component that can be easily integrated into React applications to visualize progress in a visually appealing manner.",
    "packages/ui/shadcn/scroll-area.tsx": "Module Overview:\n\n  Purpose: The \"use client\" module provides components for creating scrollable areas with custom scrollbars in React applications.\n  \n  Dependencies: \n  - React: A JavaScript library for building user interfaces.\n  - @radix-ui/react-scroll-area: A library for creating scrollable areas with custom scrollbars.\n  - @repo/ui/lib/utils: Utility functions for styling and handling classes.\n\nClasses:\n\n  ScrollArea:\n  - Purpose: Represents a scrollable area component with custom scrollbars.\n  - Attributes:\n    - className (string): Additional CSS classes for styling.\n    - children (ReactNode): The content to be displayed within the scrollable area.\n  - Methods:\n    - N/A\n\n  ScrollBar:\n  - Purpose: Represents a custom scrollbar component for the scrollable area.\n  - Attributes:\n    - className (string): Additional CSS classes for styling.\n    - orientation (string): The orientation of the scrollbar (vertical or horizontal).\n  - Methods:\n    - N/A\n\nFunctions:\n  N/A\n\nOverall, the \"use client\" module provides components for creating scrollable areas with custom scrollbars in React applications. The ScrollArea component represents the scrollable area itself, while the ScrollBar component represents the custom scrollbar. These components can be used to enhance the user experience when dealing with scrollable content.",
    "packages/ui/shadcn/select.tsx": "File Summary: \"use client\"\n\nModule Overview:\n\nPurpose: This file provides components for creating custom select dropdowns in React applications.\nDependencies:\n- React: A JavaScript library for building user interfaces.\n- @radix-ui/react-select: A library for building accessible select components.\n- lucide-react: A library of icons for use in React applications.\n- @repo/ui/lib/utils: Utility functions for styling and handling UI elements.\n\nClasses:\n\nSelect:\n- Purpose: Represents the root select component.\n- Attributes: N/A\n- Methods: N/A\n\nSelectGroup:\n- Purpose: Represents a group of options within the select component.\n- Attributes: N/A\n- Methods: N/A\n\nSelectValue:\n- Purpose: Represents the selected value within the select component.\n- Attributes: N/A\n- Methods: N/A\n\nSelectTrigger:\n- Purpose: Represents the trigger element that opens the select dropdown.\n- Attributes: className, children\n- Methods: N/A\n\nSelectScrollUpButton:\n- Purpose: Represents the scroll up button within the select dropdown.\n- Attributes: className\n- Methods: N/A\n\nSelectScrollDownButton:\n- Purpose: Represents the scroll down button within the select dropdown.\n- Attributes: className\n- Methods: N/A\n\nSelectContent:\n- Purpose: Represents the content area of the select dropdown.\n- Attributes: className, children, position\n- Methods: N/A\n\nSelectLabel:\n- Purpose: Represents the label for the select component.\n- Attributes: className\n- Methods: N/A\n\nSelectItem:\n- Purpose: Represents an individual selectable item within the select dropdown.\n- Attributes: className, children\n- Methods: N/A\n\nSelectSeparator:\n- Purpose: Represents a separator within the select dropdown.\n- Attributes: className\n- Methods: N/A\n\nFunctions: N/A\n\nOverall, this file provides a set of components for creating customizable select dropdowns in React applications, with various elements such as triggers, buttons, labels, items, and separators.",
    "packages/ui/shadcn/separator.tsx": "Module Overview:\n\n  Purpose: The \"use client\" module provides a React component for rendering a separator element, which can be used to visually separate content within the application.\n  \n  Dependencies: \n  - React: A JavaScript library for building user interfaces.\n  - @radix-ui/react-separator: A library for creating accessible separator components.\n  - @repo/ui/lib/utils: Utility functions for the UI components.\n\nClasses:\n\n  Separator:\n  - Purpose: Represents a separator component that can be used to visually separate content.\n  - Attributes:\n    - className (string): Additional CSS classes to apply to the separator element.\n    - orientation (string): The orientation of the separator, either \"horizontal\" or \"vertical\".\n    - decorative (boolean): Indicates if the separator is purely decorative.\n  - Methods:\n    - None\n\nFunctions:\n  None\n\nOverall, the \"use client\" module provides a reusable Separator component that can be easily integrated into the application to visually separate content.",
    "packages/ui/shadcn/skeleton.tsx": "Module Overview:\n\n  Purpose: The file defines a React component called Skeleton, which is used to display a loading animation placeholder for content.\n  \n  Dependencies: \n  - @repo/ui/lib/utils: The file imports the cn function from this library for handling CSS class names.\n\nFunctions:\n\n  Skeleton:\n  - Purpose: Renders a div element with a loading animation placeholder.\n  - Arguments:\n    - className (string): Additional CSS classes to be applied to the div element.\n    - props (React.HTMLAttributes<HTMLDivElement>): Additional HTML attributes to be applied to the div element.\n  - Returns:\n    - JSX.Element: The rendered div element with the loading animation.\n  - Exceptions:\n    - None\n\nExported:\n- Skeleton: The Skeleton component is exported for use in other parts of the application.",
    "packages/ui/shadcn/sonner.tsx": "Module Overview:\n\n  Purpose: The \"use client\" module is responsible for managing the display of toast notifications in the application. It utilizes the \"next-themes\" library for theme management and the \"sonner\" library for displaying toast notifications.\n\n  Dependencies: \n  - next-themes: Library for managing themes in Next.js applications.\n  - sonner: Library for displaying toast notifications.\n\nClasses:\n\n  Toaster:\n  - Purpose: Represents a component for displaying toast notifications.\n  - Attributes:\n    - theme (string): The current theme for the toast notifications.\n  - Methods:\n    - render() -> JSX.Element: Renders the toast notification component.\n          - Args:\n            - props (ToasterProps): Props for customizing the toast notification.\n          - Returns:\n            - JSX.Element: The rendered toast notification component.\n\nFunctions:\n  N/A\n\nOverall, the \"use client\" module provides a reusable component for displaying toast notifications in the application, with customizable themes and options.",
    "packages/ui/shadcn/switch.tsx": "Module Overview:\n\n  Purpose: The \"use client\" module provides a custom switch component for use in React applications.\n  \n  Dependencies: \n  - React: A JavaScript library for building user interfaces.\n  - @radix-ui/react-switch: A library for creating accessible switch components.\n  - @repo/ui/lib/utils: Utility functions for styling and handling class names.\n\nClasses:\n\n  Switch:\n  - Purpose: Represents a custom switch component that can be used in React applications.\n  - Attributes:\n    - className (string): Additional CSS classes to apply to the switch component.\n  - Methods:\n    - None\n\nFunctions:\n  None\n\nOverall, the \"use client\" module provides a reusable switch component that can be easily integrated into React applications. It relies on React and @radix-ui/react-switch for its functionality and styling.",
    "packages/ui/shadcn/tabs.tsx": "File Summary: \"use client\"\n\nModule Overview:\n  Purpose: This file provides components for creating tabs in a React application.\n  Dependencies: \n  - React: A JavaScript library for building user interfaces.\n  - @radix-ui/react-tabs: A library for creating accessible tab components.\n  - @repo/ui/lib/utils: Utility functions for styling components.\n\nClasses:\n  Tabs:\n  - Purpose: Represents the root component for the tabs.\n  \n  TabsList:\n  - Purpose: Represents the list of tabs.\n  - Attributes:\n    - className (string): The CSS class name for styling the list.\n  - Methods: N/A\n\n  TabsTrigger:\n  - Purpose: Represents the trigger for each tab.\n  - Attributes:\n    - className (string): The CSS class name for styling the trigger.\n  - Methods: N/A\n\n  TabsContent:\n  - Purpose: Represents the content of each tab.\n  - Attributes:\n    - className (string): The CSS class name for styling the content.\n  - Methods: N/A\n\nFunctions: N/A\n\nOverall, this file provides components for creating tabs in a React application, including the root component, list, trigger, and content components. Developers can use these components to easily implement tab functionality in their applications.",
    "packages/ui/shadcn/textarea.tsx": "Module Overview:\n\nPurpose: The Textarea module provides a reusable component for rendering a textarea input field with customizable styling.\n\nDependencies:\n- React: The core library for building user interfaces in React applications.\n- @repo/ui/lib/utils: A utility library for common functions used in the UI components.\n\nClasses:\n\nTextarea:\n- Purpose: Represents a textarea input field component.\n- Attributes:\n  - className (string): Additional CSS classes to apply to the textarea element.\n  - props (TextareaProps): Props passed to the textarea element.\n- Methods:\n  - render() -> JSX.Element: Renders the textarea input field with the specified styling and properties.\n\nFunctions:\nNone\n\nOverall, the Textarea module serves as a convenient way to include a styled textarea input field in React applications, with the ability to customize its appearance and behavior through props.",
    "packages/ui/shadcn/theme-toggle.tsx": "Module Overview:\n\n  Purpose: The \"use client\" module is responsible for handling the theme toggle functionality within the application.\n  \n  Dependencies: \n  - next-app-theme/use-theme: A module for managing the application's theme.\n  - lucide-react: A library for displaying icons.\n\nFunctions:\n\n  ThemeToggle():\n  - Purpose: Renders a button that toggles between a light and dark theme.\n  - Arguments: None\n  - Returns: JSX element representing the theme toggle button.\n  - Exceptions: None\n\nClasses: None",
    "packages/ui/shadcn/toast.tsx": "Module Overview:\n\nPurpose: The \"use client\" module provides components for displaying toast notifications in a React application.\n\nDependencies:\n- React: A JavaScript library for building user interfaces.\n- @radix-ui/react-toast: A library for creating accessible toast notifications.\n- class-variance-authority: A library for managing variant styles in components.\n- lucide-react: A library of icons for use in React applications.\n- @repo/ui/lib/utils: Utility functions for styling components.\n\nClasses:\n\nToastViewport:\n- Purpose: Represents the viewport for displaying toast notifications.\n- Attributes: \n  - className (string): The CSS class name for styling the viewport.\n- Methods: N/A\n\nToast:\n- Purpose: Represents a toast notification.\n- Attributes:\n  - className (string): The CSS class name for styling the toast.\n  - variant (string): The variant style of the toast.\n- Methods: N/A\n\nToastAction:\n- Purpose: Represents an action button within a toast notification.\n- Attributes:\n  - className (string): The CSS class name for styling the action button.\n- Methods: N/A\n\nToastClose:\n- Purpose: Represents a close button for dismissing a toast notification.\n- Attributes:\n  - className (string): The CSS class name for styling the close button.\n- Methods: N/A\n\nToastTitle:\n- Purpose: Represents the title of a toast notification.\n- Attributes:\n  - className (string): The CSS class name for styling the title.\n- Methods: N/A\n\nToastDescription:\n- Purpose: Represents the description text of a toast notification.\n- Attributes:\n  - className (string): The CSS class name for styling the description.\n- Methods: N/A\n\nFunctions: N/A\n\nOverall, the \"use client\" module provides components for creating and displaying customizable toast notifications in a React application. It includes various components such as the viewport, toast, action button, close button, title, and description for a comprehensive toast notification system.",
    "packages/ui/shadcn/toaster.tsx": "File Summary: use client\n\nModule Overview:\n\n  Purpose: This file provides functionality for displaying toast notifications to users within the application.\n  Dependencies: \n  - @repo/ui/shadcn/toast: Provides components for displaying toast notifications.\n  - @repo/ui/shadcn/use-toast: Provides a hook for managing toast notifications.\n\nFunctions:\n\n  Toaster():\n  - Purpose: Renders a toast notification component with the provided data.\n  - Arguments: None\n  - Returns: JSX element representing the toast notification.\n  - Exceptions: None\n\nClasses: None\n\nOverall, the \"use client\" file is essential for managing and displaying toast notifications in the application using the provided components and hook.",
    "packages/ui/shadcn/tooltip.tsx": "Module Overview:\n\nPurpose: The \"use client\" module provides functionality for creating and managing tooltips within the application.\n\nDependencies:\n- React: A JavaScript library for building user interfaces.\n- TooltipPrimitive: A library for creating tooltips in React applications.\n- @repo/ui/lib/utils: Utility functions for the UI components.\n\nClasses:\n\nTooltipProvider:\n- Purpose: Represents the provider component for tooltips.\n- Attributes: None\n- Methods: None\n\nTooltip:\n- Purpose: Represents the root component for tooltips.\n- Attributes: None\n- Methods: None\n\nTooltipTrigger:\n- Purpose: Represents the trigger component for tooltips.\n- Attributes: None\n- Methods: None\n\nTooltipContent:\n- Purpose: Represents the content component for tooltips.\n- Attributes:\n  - sideOffset (number): The offset value for the tooltip's position.\n- Methods: None\n\nFunctions: None\n\nOverall, the \"use client\" module provides components for creating and managing tooltips in the application, utilizing the TooltipPrimitive library and React for UI interactions.",
    "packages/ui/shadcn/use-toast.ts": "File Summary: \"use client\"\n\nModule Overview:\n\n  Purpose: This file provides functionality for managing toast notifications in a React application. It includes actions to add, update, dismiss, and remove toast notifications.\n  \n  Dependencies: \n  - React: A JavaScript library for building user interfaces.\n  - @repo/ui/shadcn/toast: A library for styling toast notifications.\n\nFunctions:\n\n  genId():\n  - Purpose: Generates a unique ID for each toast notification.\n  - Returns: A string representing the generated ID.\n\n  addToRemoveQueue(toastId: string):\n  - Purpose: Adds a toast ID to a queue for removal after a specified delay.\n  - Arguments:\n    - toastId (string): The ID of the toast notification to be removed.\n\n  dispatch(action: Action):\n  - Purpose: Dispatches an action to update the state of toast notifications.\n  - Arguments:\n    - action (Action): An object representing the action to be performed.\n\n  toast({ ...props }: Toast):\n  - Purpose: Creates and displays a new toast notification.\n  - Arguments:\n    - props (Toast): An object containing the properties of the toast notification.\n  - Returns: An object with methods to dismiss and update the toast.\n\n  useToast():\n  - Purpose: A custom React hook for managing toast notifications.\n  - Returns: An object containing the current state of toast notifications and methods to add, dismiss, and update toast notifications.\n\nClasses: N/A\n\nOverall, this file provides essential functions and hooks for managing toast notifications in a React application, allowing developers to easily add, update, dismiss, and remove toast notifications.",
    "packages/ui/tailwind.config.ts": "File Summary: tailwind.config.js\n\nModule Overview:\n\n  Purpose: This module exports the configuration settings for the Tailwind CSS framework used in the application.\n  Dependencies: \n  - @repo/tailwind-config: The Tailwind CSS configuration module.\n\nClasses: N/A\n\nFunctions: N/A\n\nThis file serves as the central configuration file for Tailwind CSS, providing settings for customizing the design system of the application. Developers can modify this file to adjust colors, typography, spacing, and other design-related properties used throughout the application.",
    "packages/ui/turbo/generators/config.ts": "Module Overview:\n\n  Purpose: This file serves as a generator for adding a new React component to the internal UI library.\n  Dependencies: \n  - PlopTypes: Imported from \"@turbo/gen\" for defining the types used in the generator.\n\nFunctions:\n\n  generator(plop: PlopTypes.NodePlopAPI) -> void:\n  - Purpose: Defines a generator to add a new React component to the internal UI library.\n  - Arguments:\n    - plop (PlopTypes.NodePlopAPI): The Plop API object used to define the generator.\n  - Returns:\n    - void\n",
    "packages/ui/types.d.ts": "File Summary: declare module \"*.svg\"\n\nModule Overview:\n\n  Purpose: This module declares a module for importing SVG files in a React application. It defines the type of the imported SVG file as a React functional component that accepts SVG attributes.\n  \n  Dependencies: \n  - React: The JavaScript library for building user interfaces.\n  - SVGElement: The interface representing an SVG element in the DOM.\n\nClasses:\nThis file does not define any classes.\n\nFunctions:\nThis file does not define any functions.\n\nAdditional Information:\nThis file serves as a declaration module specifically for importing SVG files in a React application. It ensures that the imported SVG files are treated as React functional components with SVG attributes."
}