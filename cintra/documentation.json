{
    ".eslintrc.js": "File Summary: eslint-config.js\n\nModule Overview:\n\n  Purpose: This configuration file sets up the ESLint rules for the package manager root in the application.\n  Dependencies: \n  - eslint: The ESLint library for linting JavaScript code.\n  - @typescript-eslint/parser: The TypeScript parser for ESLint.\n\nClasses: N/A\n\nFunctions: N/A\n\nAttributes:\n- ignorePatterns (array): An array of file patterns to ignore during linting.\n- extends (array): An array of configurations to extend from.\n- parser (string): The parser to use for parsing the code.\n- parserOptions (object): Options for the parser, such as project setup.\n- rules (object): Specific ESLint rules to apply, such as \"@typescript-eslint/consistent-type-imports\".\n\nOverall, this configuration file sets up ESLint rules for the package manager root, ignores certain file patterns, extends from a specific configuration, uses the TypeScript parser, and defines specific ESLint rules to follow.",
    "apps/cf-ai-backend/src/helper.ts": "File Summary: initQuery.ts\n\nModule Overview:\n\nPurpose: The initQuery module is responsible for initializing a query with specific models based on the input provided. It creates instances of different AI models (OpenAI, Google Generative AI, Anthropic) and returns the selected model along with a CloudflareVectorizeStore instance.\n\nDependencies:\n- hono: Importing the Context class from the hono library.\n- types: Importing Env, vectorObj, and Chunks from the types module.\n- @langchain/cloudflare: Importing the CloudflareVectorizeStore class from the @langchain/cloudflare library.\n- utils/OpenAIEmbedder: Importing the OpenAIEmbeddings class from the utils/OpenAIEmbedder module.\n- @ai-sdk/openai: Importing the createOpenAI function from the @ai-sdk/openai library.\n- @ai-sdk/google: Importing the createGoogleGenerativeAI function from the @ai-sdk/google library.\n- @ai-sdk/anthropic: Importing the createAnthropic function from the @ai-sdk/anthropic library.\n- zod: Importing the z function from the zod library.\n- utils/seededRandom: Importing the seededRandom function from the utils/seededRandom module.\n- utils/kvBulkInsert: Importing the bulkInsertKv function from the utils/kvBulkInsert module.\n\nFunctions:\n\ninitQuery:\n- Purpose: Initializes a query with a specified model and creates instances of AI models based on the input.\n- Arguments:\n  - c: Context<{ Bindings: Env }> - The context object containing environment bindings.\n  - model: string (optional) - The model to be used for the query (default is \"gpt-4o\").\n- Returns:\n  - Promise<{ store: CloudflareVectorizeStore, model: selectedModel }> - An object containing the CloudflareVectorizeStore instance and the selected AI model.\n- Exceptions: None\n\ndeleteDocument:\n- Purpose: Deletes a document based on the provided URL and user information.\n- Arguments:\n  - url: string - The URL of the document to be deleted.\n  - user: string - The user associated with the document.\n  - c: Context<{ Bindings: Env }> - The context object containing environment bindings.\n  - store: CloudflareVectorizeStore - The CloudflareVectorizeStore instance.\n- Returns: None\n- Exceptions: None\n\nbatchCreateChunksAndEmbeddings:\n- Purpose: Creates chunks and embeddings for a given body and context, storing them in the CloudflareVectorizeStore.\n- Arguments:\n  - store: CloudflareVectorizeStore - The CloudflareVectorizeStore instance.\n  - body: vectorObj - The body object containing information for creating chunks and embeddings.\n  - chunks: Chunks - The Chunks object containing chunk information.\n  - context: Context<{ Bindings: Env }> - The context object containing environment bindings.\n- Returns: None\n- Exceptions: None\n\nThis module handles the initialization of queries with different AI models, deletion of documents, and batch creation of chunks and embeddings in the CloudflareVectorizeStore.",
    "apps/cf-ai-backend/src/index.ts": "Module Overview:\n\nPurpose: This file serves as the main entry point for the application, defining various routes and middleware for handling API requests. It also includes functions for adding, searching, and deleting content, as well as interacting with an AI model for chat responses.\n\nDependencies:\n- zod: A library for data validation.\n- hono: Custom modules for logging, timing, authentication, and more.\n- ai: Module for interacting with AI models.\n- types: Custom types used in the application.\n- helper: Helper functions for database operations.\n- utils: Utility functions for chunking text and processing images.\n- prompts: Functions for generating prompts for AI models.\n- swagger-ui: Module for displaying API documentation.\n\nFunctions:\n\n- app.get(\"/\", (c) => {...}): Handles the root endpoint and returns a simple message indicating that the backend API is running.\n- app.post(\"/api/add\", zValidator(\"json\", vectorObj), async (c) => {...}): Adds content to the database based on the type of content (tweet, page, note).\n- app.post(\"/api/add-with-image\", zValidator(\"form\", ...), async (c) => {...}): Adds content with images to the database, processing images and generating descriptions.\n- app.get(\"/api/ask\", zValidator(\"query\", ...), async (c) => {...}): Handles user queries and returns AI-generated responses.\n- app.get(\"/api/search\", zValidator(\"query\", ...), async (c) => {...}): Searches for content based on user query and user metadata.\n- app.post(\"/api/autoChatOrAdd\", zValidator(\"query\", ...), zValidator(\"json\", chatObj), async (c) => {...}): Handles user requests to add content or chat with the AI model.\n- app.delete(\"/api/delete\", zValidator(\"query\", ...), async (c) => {...}): Deletes a document from the database based on the provided URL and user.\n\nThis file also includes additional routes and functions for handling chat interactions, editor AI requests, and more.\n\nPlease note that this is a high-level summary and does not cover all the details of each function or route.",
    "apps/cf-ai-backend/src/prompts/prompt1.ts": "Module Overview:\n\nPurpose: The designated file contains a constant export named systemPrompt, which defines an AI assistant called Supermemory. This AI assistant acts as a \"Second Brain\" by answering questions based on provided context.\n\nDependencies: There are no external dependencies for this file.\n\nFunctions:\n- template({ contexts, question }): This function generates a prompt by mapping over provided contexts and the question. It constructs a final prompt with the given context and question.\n\nJustification:\nThe purpose of the file is to provide a template for generating prompts for an AI assistant. The systemPrompt constant defines the AI assistant's role and functionality, while the template function structures the prompt generation process. This file is essential for creating a seamless interaction between users and the AI assistant.",
    "apps/cf-ai-backend/src/types.ts": "Module Overview:\n\nPurpose: This module defines various types and interfaces related to tweet data, key-value pairs, and content objects used within the application.\n\nDependencies:\n- zod: A library for data validation and schema definition.\n- \"@repo/shared-types\": A module providing shared types used across the application.\n- \"./utils/chunkTweet\": A utility module for chunking tweet data.\n\nClasses:\n\nTweetData:\n- Purpose: Represents a single tweet data object.\n- Attributes:\n  - tweetText (string): The text content of the tweet.\n  - postUrl (string): The URL of the tweet post.\n  - authorName (string): The name of the tweet author.\n  - handle (string): The Twitter handle of the author.\n  - time (string): The timestamp of the tweet.\n  - saveToUser (string): The user to save the tweet to.\n\nBaseChunks:\n- Purpose: Represents the base structure of different types of chunks.\n- Attributes:\n  - type (\"tweet\" | \"page\" | \"note\" | \"image\"): The type of chunk.\n\nTweetChunks:\n- Purpose: Represents tweet chunks.\n- Attributes:\n  - type: \"tweet\"\n  - chunks: An array of ThreadTweetData objects.\n\nPageOrNoteChunks:\n- Purpose: Represents page or note chunks.\n- Attributes:\n  - type: \"page\" | \"note\"\n  - chunks: An array of strings.\n\nImageChunks:\n- Purpose: Represents image chunks.\n- Attributes:\n  - type: \"image\"\n  - chunks: An array of strings.\n\nKVBulkItem:\n- Purpose: Represents a key-value pair for bulk operations.\n- Attributes:\n  - key (string): The key of the item.\n  - value (string): The value of the item.\n  - base64 (boolean): Indicates if the value is base64 encoded.\n\nFunctions:\n\ncontentObj:\n- Purpose: Defines a schema for content objects.\n- Returns: A zod object schema for content objects.\n\nchatObj:\n- Purpose: Defines a schema for chat objects.\n- Returns: A zod object schema for chat objects.\n\nvectorObj:\n- Purpose: Defines a schema for vector objects.\n- Returns: A zod object schema for vector objects.\n\nOverall, this file provides type definitions for tweet data, key-value pairs, and content objects used in the application, along with validation schemas for these data structures.",
    "apps/cf-ai-backend/src/utils/OpenAIEmbedder.ts": "Page Title: OpenAIEmbeddings.ts\n\nModule Overview:\n\n  Purpose: This module provides functionality for embedding documents using the OpenAI API.\n  Dependencies: \n  - zod: A library for data validation.\n  - fetch: A built-in function for making HTTP requests.\n\nClasses:\n\n  OpenAIEmbeddings:\n  - Purpose: Represents a service for embedding documents using the OpenAI API.\n  - Attributes:\n    - apiKey (string): The API key used for authentication.\n    - modelName (string): The name of the model to use for embedding.\n  - Methods:\n    - constructor({ apiKey, modelName }: OpenAIEmbeddingsParams): Initializes the OpenAIEmbeddings object with the provided apiKey and modelName.\n    - embedDocuments(texts: string[]): Promise<number[][]>: Embeds an array of texts and returns an array of embeddings.\n    - embedQuery(text: string): Promise<number[]>: Embeds a single text and returns its embedding.\n\nFunctions: N/A",
    "apps/cf-ai-backend/src/utils/chonker.ts": "File Summary: chunkText.ts\n\nModule Overview:\n\n  Purpose: This module provides a function to split text into chunks of a specified maximum size with some overlap for continuity.\n  Dependencies: \n  - compromise: A library for natural language processing.\n\nFunctions:\n\n  chunkText(text: string, maxChunkSize: number, overlap: number = 0.2) -> string[]:\n  - Purpose: Splits the input text into chunks of specified max size with overlap.\n  - Arguments:\n    - text (string): The input text to be chunked.\n    - maxChunkSize (number): The maximum size of each chunk.\n    - overlap (number): The amount of overlap between chunks (default is 0.2).\n  - Returns:\n    - string[]: An array of chunked text strings.\n  - Exceptions:\n    - None\n\nThis file utilizes the compromise library to process the input text and split it into chunks based on the specified parameters. The function calculates overlap between chunks to ensure continuity in the text chunks.",
    "apps/cf-ai-backend/src/utils/chunkPageOrNotes.ts": "Page Title: chunker.ts\n\nModule Overview:\n\n  Purpose: This module provides functions for chunking text content into smaller segments for better handling and processing within the application.\n\n  Dependencies: \n  - chonker: The module providing the chunkText function for splitting text content.\n  - types: The module containing the PageOrNoteChunks type definition.\n\nFunctions:\n\n  chunkPage(pageContent: string) -> PageOrNoteChunks:\n  - Purpose: Chunks the provided page content into segments of 1536 characters each.\n  - Arguments:\n    - pageContent (string): The content of the page to be chunked.\n  - Returns:\n    - PageOrNoteChunks: An object containing the type \"page\" and the segmented chunks of the page content.\n  - Exceptions:\n    - None\n\n  chunkNote(noteContent: string) -> PageOrNoteChunks:\n  - Purpose: Chunks the provided note content into segments of 1536 characters each.\n  - Arguments:\n    - noteContent (string): The content of the note to be chunked.\n  - Returns:\n    - PageOrNoteChunks: An object containing the type \"note\" and the segmented chunks of the note content.\n  - Exceptions:\n    - None",
    "apps/cf-ai-backend/src/utils/chunkTweet.ts": "Page Title: thread_tweet_data.ts\n\nModule Overview:\n\n  Purpose: This module handles the processing of thread text data, chunking it into smaller segments, and extracting metadata such as tweet IDs, links, videos, and images.\n  \n  Dependencies: \n  - types: Importing the TweetChunks type from the types module.\n  - chonker: Importing the chunkText function from the chonker module.\n  - @repo/shared-types/utils: Importing the getRawTweet function from the shared-types/utils module.\n\nClasses:\n\n  Tweet:\n  - Purpose: Represents a single tweet with an ID, text, links, images, and videos.\n  - Attributes:\n    - id (string): The unique identifier of the tweet.\n    - text (string): The content of the tweet.\n    - links (Array<string>): An array of URLs included in the tweet.\n    - images (Array<string>): An array of image URLs included in the tweet.\n    - videos (Array<string>): An array of video URLs included in the tweet.\n\n  Metadata:\n  - Purpose: Contains metadata related to a tweet, including tweet ID, links, videos, and images.\n  - Attributes:\n    - tweetId (string): The ID of the tweet.\n    - tweetLinks (any[]): An array of expanded URLs from the tweet.\n    - tweetVids (any[]): An array of video URLs from the tweet.\n    - tweetImages (any[]): An array of image URLs from the tweet.\n\n  ThreadTweetData:\n  - Purpose: Represents the data structure for a chunked tweet and its metadata.\n  - Attributes:\n    - chunkedTweet (string[]): An array of chunked tweet segments.\n    - metadata (Metadata): Metadata related to the tweet.\n\nFunctions:\n\n  chunkThread(threadText: string) -> TweetChunks:\n  - Purpose: Processes the thread text, chunks it into smaller segments, and extracts metadata for each segment.\n  - Arguments:\n    - threadText (string): The text of the thread to be processed.\n  - Returns:\n    - TweetChunks: An object containing the type \"tweet\" and an array of chunked tweets with metadata.\n  - Exceptions:\n    - JSON.parse error: If the thread text is not valid JSON.\n    - TypeError: If the thread text is not a string.\n\nOverall, this file is responsible for chunking thread text data, extracting metadata from tweets, and structuring the data for further processing within the application.",
    "apps/cf-ai-backend/src/utils/kvBulkInsert.ts": "Page Title: bulkInsertKv.ts\n\nModule Overview:\n\n  Purpose: This module handles the bulk insertion of key-value pairs into a Cloudflare KV namespace.\n  Dependencies: \n  - fetch: A built-in JavaScript function for making HTTP requests.\n  - KVBulkItem: A custom type defined in \"../types\" for representing key-value pairs.\n\nFunctions:\n\n  bulkInsertKv(credentials: { CF_KV_AUTH_TOKEN: string, KV_NAMESPACE_ID: string, CF_ACCOUNT_ID: string }, keyData: { chunkIds: Array<string>, urlid: string }) -> Promise<any>:\n  - Purpose: Inserts multiple key-value pairs into a Cloudflare KV namespace.\n  - Arguments:\n    - credentials (object): An object containing Cloudflare authentication tokens and account information.\n      - CF_KV_AUTH_TOKEN (string): The Cloudflare KV authentication token.\n      - KV_NAMESPACE_ID (string): The ID of the Cloudflare KV namespace.\n      - CF_ACCOUNT_ID (string): The Cloudflare account ID.\n    - keyData (object): An object containing key data for insertion.\n      - chunkIds (Array<string>): An array of chunk IDs to be used as keys.\n      - urlid (string): The URL ID to be used as the value.\n  - Returns:\n    - Promise<any>: A promise that resolves with the response data from the insertion.\n  - Exceptions:\n    - Error: If the insertion fails, an error is thrown with details of the failure.\n\nNote: This file does not contain any classes.",
    "apps/cf-ai-backend/src/utils/seededRandom.ts": "Page Title: randomGenerator.ts\n\nModule Overview:\n\n  Purpose: This module provides functions for generating seeded random numbers between 0 and 1 using the Mersenne Twister algorithm.\n  Dependencies: \n  - random-js: Library for generating random numbers.\n\nFunctions:\n\n  hashString(seed: string) -> number:\n  - Purpose: Hashes a string to a 32-bit integer.\n  - Arguments:\n    - seed (string): The input string to hash.\n  - Returns:\n    - number: The hashed 32-bit integer value.\n  \n  seededRandom(seed: string) -> () => number:\n  - Purpose: Returns a function that generates the same sequence of random numbers for a given seed between 0 and 1.\n  - Arguments:\n    - seed (string): The seed for generating random numbers.\n  - Returns:\n    - () => number: A function that generates random numbers between 0 and 1.\n  - Exceptions:\n    - None\n\nDependencies:\n  - MersenneTwister19937: Random number generator engine.\n  - integer: Function for generating random integers within a specified range.",
    "apps/cf-ai-backend/vite.config.ts": "File Summary: vite.config.js\n\nModule Overview:\n\n  Purpose: This module configures the Vite build tool for the application.\n  Dependencies: \n  - vite: The Vite build tool.\n  - honox: A plugin for Vite.\n\nFunctions:\n\n  defineConfig(config: object) -> object:\n  - Purpose: Defines the configuration for the Vite build tool.\n  - Arguments:\n    - config (object): The configuration object for Vite.\n    - Returns:\n       - object: The updated configuration object.\n\n  honox() -> void:\n  - Purpose: Initializes the honox plugin for Vite.\n  - Arguments: None\n  - Returns: None\n  - Exceptions: None",
    "apps/extension/background.ts": "File Summary: batchImportAll.ts\n\nModule Overview:\n\nPurpose: This file contains the batchImportAll function responsible for importing tweets from Twitter and storing them in the backend. It also includes helper functions for fetching and processing tweet data.\n\nDependencies:\n- chrome: Chrome extension API for storage and messaging.\n- fetch: Web API for making HTTP requests.\n- helpers: Helper functions for processing tweet data.\n- react-tweet/api: Module for Tweet data structure.\n\nFunctions:\n\nbatchImportAll(cursor: string, totalImported: number) => void:\n- Purpose: Imports tweets from Twitter and stores them in the backend.\n- Arguments:\n  - cursor (string): Cursor for pagination.\n  - totalImported (number): Total count of imported tweets.\n- Returns: void\n- Exceptions: None\n\ngetAllTweets(rawJson: any) => Tweet[]:\n- Purpose: Extracts and transforms tweet data from the raw JSON response.\n- Arguments:\n  - rawJson (any): Raw JSON data containing tweet information.\n- Returns: Array of Tweet objects\n- Exceptions: None\n\nfetchData(params: FetchDataParams) => Promise<void>:\n- Purpose: Fetches data from a given URL and saves it to the backend.\n- Arguments:\n  - params (FetchDataParams): Object containing data to be saved.\n- Returns: Promise<void>\n- Exceptions: None\n\nsendMessageToTab(message: string) => void:\n- Purpose: Sends a message to the active tab.\n- Arguments:\n  - message (string): Message to be sent.\n- Returns: void\n- Exceptions: None\n\nchrome.webRequest.onBeforeSendHeaders.addListener(callback, filter, extraInfoSpec):\n- Purpose: Listens for web requests and modifies headers before sending.\n- Arguments:\n  - callback: Function to handle the request.\n  - filter: URL filter for requests.\n  - extraInfoSpec: Additional information to be included.\n- Returns: void\n- Exceptions: None\n\nchrome.runtime.onMessage.addListener(callback):\n- Purpose: Listens for messages from other parts of the extension.\n- Arguments:\n  - callback: Function to handle incoming messages.\n- Returns: void\n- Exceptions: None\n\nchrome.runtime.onInstalled.addListener(callback):\n- Purpose: Listens for the extension being installed or updated.\n- Arguments:\n  - callback: Function to handle the installation event.\n- Returns: void\n- Exceptions: None\n\nchrome.contextMenus.onClicked.addListener(callback):\n- Purpose: Listens for context menu item clicks.\n- Arguments:\n  - callback: Function to handle the click event.\n- Returns: void\n- Exceptions: None\n\nNote: This file primarily handles the batch import of tweets from Twitter, interacts with the backend API, and manages Chrome extension functionality related to saving content to the backend.",
    "apps/extension/content/ContentApp.tsx": "Module Overview:\n\nPurpose: The ContentApp module is responsible for managing user interactions and data processing related to the supermemory.ai extension. It handles user authentication, data storage, and interaction with the backend API.\n\nDependencies:\n- React: A JavaScript library for building user interfaces.\n- @mozilla/readability: A library for parsing and extracting content from web pages.\n- \"./ui/shadcn/tooltip\": Tooltip components for user interface interactions.\n- \"./ui/shadcn/popover\": Popover components for user interface interactions.\n- \"./ui/shadcn/toaster\": Toaster component for displaying notifications.\n- \"./ui/shadcn/select\": Select components for user interface interactions.\n- \"./ui/shadcn/use-toast\": Custom hook for displaying toast notifications.\n- \"./ui/shadcn/input\": Input component for user input.\n- \"./ui/shadcn/label\": Label component for form labels.\n- \"./ui/shadcn/textarea\": Textarea component for multi-line text input.\n\nClasses:\n\n- ContentApp:\n  - Purpose: Represents the main component of the extension, handling user interactions and data processing.\n  - Attributes:\n    - token (string | undefined): Authentication token for accessing the backend API.\n    - shadowRoot (ShadowRoot): Shadow DOM root element for encapsulating styles and functionality.\n  - Methods:\n    - showLoginToast(): Displays a toast notification prompting the user to login to the supermemory.ai extension.\n    - getSpaces(): Fetches user spaces from the backend API.\n    - sendUrlToAPI(spaces: string[]): Sends the current URL and page content to the backend API for storage.\n    - useEffect(): Hook for handling side effects in the component.\n    - handleKeyDown(e: KeyboardEvent): Event handler for keydown events.\n    - render(): Renders the component UI based on state and props.\n\nFunctions:\n\n- None\n\nOverall, the ContentApp module serves as the core component for managing user interactions, data processing, and API communication within the supermemory.ai extension. It utilizes various UI components and custom hooks to provide a seamless user experience.",
    "apps/extension/content/base.css": "File Title: supermemory-extension-host.css\n\nModule Overview:\n\n  Purpose: This file contains CSS rules for styling the supermemory extension host element within the application. The element is positioned fixed at the bottom right corner of the screen with a high z-index value to ensure it stays on top of other elements.\n\n  Dependencies: \n  - None\n\nClasses:\n\n  None\n\nFunctions:\n\n  None\n\nOverall, this file is responsible for styling the supermemory extension host element to ensure it is always visible and easily accessible to users.",
    "apps/extension/content/content.tsx": "Page Title: contentApp.js\n\nModule Overview:\n\n  Purpose: This module is responsible for rendering the main content application using React and Tailwind CSS within a shadow DOM.\n  Dependencies: \n  - React: JavaScript library for building user interfaces.\n  - Tailwind CSS: Utility-first CSS framework for styling web applications.\n  - Chrome API: Browser API for interacting with Chrome browser features.\n\nFunctions:\n\n  appendTailwindStyleData(shadowRoot: ShadowRoot) -> void:\n  - Purpose: Fetches and appends custom CSS styles to the shadow DOM.\n  - Arguments:\n    - shadowRoot (ShadowRoot): The shadow DOM element to append the styles to.\n  - Returns: void\n  - Exceptions: None\n\n  appendTailwindStyleLink(shadowRoot: ShadowRoot) -> void:\n  - Purpose: Appends the link to the Tailwind CSS stylesheet to the shadow DOM.\n  - Arguments:\n    - shadowRoot (ShadowRoot): The shadow DOM element to append the link to.\n  - Returns: void\n  - Exceptions: None\n\n  initial() -> void:\n  - Purpose: Initializes the content application by creating a shadow DOM, rendering the React app, and handling JWT token authentication.\n  - Arguments: None\n  - Returns: void\n  - Exceptions: None\n\n  window.addEventListener(\"message\", (event) -> void:\n  - Purpose: Listens for messages from the window and handles JWT token authentication based on the source and hostname.\n  - Arguments:\n    - event (MessageEvent): The message event received.\n  - Returns: void\n  - Exceptions: None\n\nOverall, the contentApp.js file is crucial for setting up and rendering the main content application using React and Tailwind CSS within a shadow DOM, as well as handling JWT token authentication for secure access to the application.",
    "apps/extension/content/ui/shadcn/input.tsx": "Module Overview:\n\n  Purpose: This module defines an Input component that can be used for user input forms in the application.\n  Dependencies: \n  - React: The React library for building user interfaces.\n  - cn: A utility function for combining class names.\n\nClasses:\n\n  Input:\n  - Purpose: Represents an input element for user input forms.\n  - Attributes:\n    - className (string): Additional class names for styling.\n    - type (string): The type of input element (e.g., text, password).\n  - Methods:\n    - None\n\nFunctions:\n  None",
    "apps/extension/content/ui/shadcn/label.tsx": "Module Overview:\n\nPurpose: The \"use client\" module is responsible for defining and exporting the Label component, which is a customized label element used in the application.\n\nDependencies:\n- React: A JavaScript library for building user interfaces.\n- @radix-ui/react-label: A library for creating accessible label components.\n- class-variance-authority: A library for defining and managing component variants.\n- \"../../utils\": A utility module for common functions used in the application.\n\nClasses:\n\nLabel:\n- Purpose: Represents a customized label component used in the application.\n- Attributes: \n  - className (string): The CSS class name for styling the label component.\n  - props (object): Additional props passed to the label component.\n- Methods:\n  - React.forwardRef(): A higher-order component that forwards a ref to the label component.\n    - Args:\n      - className (string): The CSS class name for styling the label component.\n      - props (object): Additional props passed to the label component.\n    - Returns:\n      - React.ElementRef: A reference to the label component.\n    - Exceptions:\n      - None\n\nFunctions:\n- None\n\nOverall, the \"use client\" module provides a reusable Label component that can be easily customized and used throughout the application for labeling elements.",
    "apps/extension/content/ui/shadcn/popover.tsx": "Module Overview:\n\nPurpose: The \"use client\" module provides components for creating popovers in a React application.\n\nDependencies:\n- React: A JavaScript library for building user interfaces.\n- @radix-ui/react-popover: A library for creating accessible popovers in React applications.\n- \"../../utils\": A utility module for common functions.\n\nClasses:\n\nPopover:\n- Purpose: Represents the root element of a popover component.\n- Attributes: None.\n- Methods: None.\n\nPopoverTrigger:\n- Purpose: Represents the trigger element that activates the popover.\n- Attributes: None.\n- Methods: None.\n\nPopoverContent:\n- Purpose: Represents the content of the popover.\n- Attributes:\n  - align (string): The alignment of the popover content.\n  - sideOffset (number): The offset from the side of the trigger element.\n- Methods: None.\n\nFunctions: None.",
    "apps/extension/content/ui/shadcn/select.tsx": "File Summary: \"use client\"\n\nModule Overview:\n\n  Purpose: This file provides components for creating custom select dropdowns in React applications.\n  Dependencies: \n  - React: JavaScript library for building user interfaces.\n  - @radix-ui/react-select: Library for building accessible select components.\n  - lucide-react: Library for SVG icons.\n\nClasses:\n\n  Select:\n  - Purpose: Root component for the custom select dropdown.\n  - Attributes: None\n  - Methods: None\n\n  SelectGroup:\n  - Purpose: Group component for grouping select options.\n  - Attributes: None\n  - Methods: None\n\n  SelectValue:\n  - Purpose: Value component for displaying the selected option.\n  - Attributes: None\n  - Methods: None\n\n  SelectTrigger:\n  - Purpose: Trigger component for opening/closing the select dropdown.\n  - Attributes: className, children\n  - Methods: None\n\nFunctions: None\n\nOverall, this file provides components for creating custom select dropdowns with various functionalities like grouping options, displaying selected values, and handling trigger actions.",
    "apps/extension/content/ui/shadcn/textarea.tsx": "Module Overview:\n\nPurpose: The Textarea module provides a reusable component for rendering a textarea input field with customizable styling.\n\nDependencies:\n- React: The React library for building user interfaces.\n- cn: A utility function for combining class names.\n\nClasses:\nTextarea:\n- Purpose: Represents a textarea input field component.\n- Attributes:\n  - className (string): Additional class names for styling.\n- Methods:\n  - None\n\nFunctions:\n- None\n\nOverall, the Textarea module serves as a convenient way to implement textarea input fields with consistent styling across the application.",
    "apps/extension/content/ui/shadcn/toast.tsx": "Module Overview:\n\nPurpose: The \"use client\" module provides components for displaying toast notifications in a React application.\n\nDependencies:\n- React: A JavaScript library for building user interfaces.\n- @radix-ui/react-toast: A library for creating accessible toast notifications.\n- class-variance-authority: A library for managing variant styles in components.\n- lucide-react: A library of icons for use in React applications.\n- \"../../utils\": A utility module for common functions.\n\nClasses:\n\nToastProvider:\n- Purpose: A provider component for managing toast notifications.\n- Attributes: None.\n- Methods: None.\n\nToastViewport:\n- Purpose: A viewport component for displaying toast notifications.\n- Attributes:\n  - className (string): The CSS class name for styling the component.\n- Methods: None.\n\nToast:\n- Purpose: A toast notification component.\n- Attributes:\n  - className (string): The CSS class name for styling the component.\n  - variant (string): The variant style for the toast notification.\n- Methods: None.\n\nToastAction:\n- Purpose: An action component for interacting with toast notifications.\n- Attributes:\n  - className (string): The CSS class name for styling the component.\n- Methods: None.\n\nToastClose:\n- Purpose: A close button component for dismissing toast notifications.\n- Attributes:\n  - className (string): The CSS class name for styling the component.\n- Methods: None.\n\nToastTitle:\n- Purpose: A title component for displaying the title of a toast notification.\n- Attributes:\n  - className (string): The CSS class name for styling the component.\n- Methods: None.\n\nToastDescription:\n- Purpose: A description component for displaying the content of a toast notification.\n- Attributes:\n  - className (string): The CSS class name for styling the component.\n- Methods: None.\n\nFunctions: None.\n\nOverall, the \"use client\" module provides a set of components for creating and managing toast notifications in a React application. These components offer customizable styles and interactions for displaying informative messages to users.",
    "apps/extension/content/ui/shadcn/toaster.tsx": "File Summary: \"use client\"\n\nModule Overview:\n\n  Purpose: This file provides functionality for displaying toast notifications in the application.\n  Dependencies: \n  - \"../shadcn/toast\": Contains components for displaying toast notifications.\n  - \"../shadcn/use-toast\": Contains a custom hook for managing toast notifications.\n\nFunctions:\n\n  Toaster():\n  - Purpose: Renders a list of toast notifications.\n  - Arguments: None\n  - Returns: JSX element containing toast notifications.\n  - Exceptions: None\n\nClasses: None\n\nOverall, the \"use client\" file is essential for managing and displaying toast notifications in the application. It utilizes components from the \"../shadcn/toast\" module and the custom hook from \"../shadcn/use-toast\" to render toast notifications for the user.",
    "apps/extension/content/ui/shadcn/tooltip.tsx": "Module Overview:\n\n  Purpose: The \"use client\" module provides functionality for using a tooltip component in the application.\n  Dependencies: \n  - React: A JavaScript library for building user interfaces.\n  - TooltipPrimitive: A library for creating tooltips in React applications.\n\nClasses:\n\n  TooltipProvider:\n  - Purpose: Represents the provider component for the tooltip functionality.\n  - Attributes: None\n  - Methods: None\n\n  Tooltip:\n  - Purpose: Represents the root component for the tooltip functionality.\n  - Attributes: None\n  - Methods: None\n\n  TooltipTrigger:\n  - Purpose: Represents the trigger component for the tooltip functionality.\n  - Attributes: None\n  - Methods: None\n\n  TooltipContent:\n  - Purpose: Represents the content component for the tooltip functionality.\n  - Attributes:\n    - className (string): The CSS class name for styling the tooltip content.\n    - sideOffset (number): The offset value for positioning the tooltip.\n  - Methods: None\n\nFunctions: None\n\nOverall, the \"use client\" module provides components for creating and displaying tooltips in the application using the TooltipPrimitive library in conjunction with React.",
    "apps/extension/content/ui/shadcn/use-toast.ts": "File Summary: \"use client\"\n\nModule Overview:\n\nPurpose: This file provides functionality for managing toast notifications in a React application. It includes actions to add, update, dismiss, and remove toast notifications.\n\nDependencies:\n- React: A JavaScript library for building user interfaces.\n\nFunctions:\n\n- genId(): Generates a unique identifier for toast notifications.\n  - Arguments: None\n  - Returns: A unique identifier as a string.\n\n- addToRemoveQueue(toastId: string): Adds a toast notification to the removal queue after a delay.\n  - Arguments:\n    - toastId (string): The unique identifier of the toast notification.\n  - Returns: None\n\n- dispatch(action: Action): Dispatches an action to update the state of toast notifications.\n  - Arguments:\n    - action (Action): The action to be dispatched.\n  - Returns: None\n\n- toast({ ...props }: Toast): Creates and displays a new toast notification.\n  - Arguments:\n    - props (Toast): The properties of the toast notification.\n  - Returns: An object with methods to dismiss and update the toast.\n\n- useToast(): Custom React hook for managing toast notifications.\n  - Arguments: None\n  - Returns: An object containing the current state of toast notifications and methods to manage them.\n\nClasses: None\n\nOverall, this file provides essential functions and hooks for handling toast notifications in a React application, allowing developers to easily add, update, dismiss, and remove toast notifications in their user interfaces.",
    "apps/extension/content/utils.ts": "File Summary: cn.ts\n\nModule Overview:\n\n  Purpose: This module provides a function for combining and merging CSS class names using the clsx and tailwind-merge libraries.\n  \n  Dependencies: \n  - clsx: A library for conditionally joining class names together.\n  - tailwind-merge: A library for merging Tailwind CSS class names.\n\nFunctions:\n\n  cn(...inputs: ClassValue[]) -> string:\n  - Purpose: Combines and merges the provided CSS class names using clsx and tailwind-merge.\n  - Arguments:\n    - inputs (ClassValue[]): An array of CSS class names to be combined.\n  - Returns:\n    - string: The merged CSS class names.\n  - Exceptions:\n    - None.",
    "apps/extension/extension-env.d.ts": "File Summary: extension-types.d.ts\n\nModule Overview:\n\n  Purpose: This file provides type definitions for TypeScript projects, specifically for extensions and polyfills used in the application.\n  Dependencies: None\n\nClasses: None\n\nFunctions: None\n\nThis file serves as a reference for developers to include the necessary types for extensions and polyfills in their TypeScript projects. It is auto-generated and should not be excluded from the project. Developers can create new *.d.ts files for additional types and reference them in the \"include\" array in the tsconfig.json file. The file also includes references to extension-create types and polyfill types for browser.* APIs.",
    "apps/extension/helpers.ts": "Module Overview:\n\nPurpose: This module provides functions for transforming tweet data into a standardized format for display within the application.\n\nDependencies: \n- react-tweet/api: The Tweet class is imported from this library for data transformation.\n\nFunctions:\n\ntransformTweetData(input: any) -> Tweet | null:\n- Purpose: Transforms raw tweet data into a standardized format for display.\n- Arguments:\n  - input (any): The raw tweet data to be transformed.\n- Returns:\n  - Tweet | null: The transformed tweet data or null if the input data is invalid.\n- Exceptions:\n  - None\n\nOverall, this module plays a crucial role in processing tweet data and ensuring a consistent display format within the application.",
    "apps/extension/postcss.config.js": "File Summary: tailwind.config.js\n\nModule Overview:\n\n  Purpose: This module exports configuration options for Tailwind CSS and Autoprefixer plugins used in the application's styling.\n  Dependencies: None\n\nClasses: None\n\nFunctions: None\n\nOverall, this file serves as a central location for configuring the Tailwind CSS and Autoprefixer plugins, allowing developers to customize the styling and prefixing options for the application.",
    "apps/extension/public/output.css": "Module Overview:\n\nPurpose: The file tailwindcss.css contains the styling rules for the application, providing a consistent design across all pages.\nDependencies: This file does not have any external dependencies.\n\nClasses:\nThis file does not contain any classes.\n\nFunctions:\nThis file does not contain any functions.\n\nFile Overview:\nThe tailwindcss.css file includes a comprehensive set of CSS rules for styling various elements in the application. It covers typography, colors, spacing, borders, shadows, and more. The file also includes custom utility classes for common design patterns, such as flexbox, grid, and responsive design. Additionally, it defines keyframe animations and transitions for interactive elements.\n\nAdditional Documentation:\nThe remaining portion of the file contains additional CSS rules for specific elements and interactions within the application. These rules include styling for toast notifications, custom animations, transitions, and hover effects. The file also defines specific classes for disabled states, focus states, and responsive design breakpoints.\n\nThe file utilizes custom properties to define colors, shadows, transitions, and other styling attributes, allowing for easy customization and maintenance of the design system. It also includes media queries for different screen sizes to ensure a responsive layout.\n\nOverall, the tailwindcss.css file plays a crucial role in maintaining a cohesive and visually appealing design for the application, enhancing the user experience and interface consistency.",
    "apps/extension/tailwind.config.ts": "File Summary: tailwind.config.js\n\nModule Overview:\n\n  Purpose: This module exports the configuration settings for the Tailwind CSS framework used in the application.\n  Dependencies: \n  - @repo/tailwind-config: The Tailwind CSS configuration module.\n\nClasses: N/A\n\nFunctions: N/A\n\nThis file serves as the central configuration file for Tailwind CSS, allowing developers to customize the design system of the application by modifying various settings such as colors, typography, spacing, and more. The exported object contains all the configuration options that Tailwind CSS uses to generate the final CSS output. Developers can tweak these settings to tailor the design system to the specific needs of the project.",
    "apps/web/.eslintrc.js": "File Summary: eslint-config.js\n\nModule Overview:\n\n  Purpose: This module defines the ESLint configuration for the project, ensuring consistent code style and quality across the codebase.\n  Dependencies: \n  - eslint: The ESLint library for linting JavaScript code.\n  - @typescript-eslint/parser: The TypeScript parser for ESLint.\n\nClasses: N/A\n\nFunctions: N/A\n\nThis file sets the root configuration for ESLint, extends the \"@repo/eslint-config/next.js\" configuration, specifies the TypeScript parser, and ignores the \"postcss.config.js\" file for linting.",
    "apps/web/app/(auth)/layout.tsx": "File Summary: Layout.tsx\n\nModule Overview:\n\n  Purpose: This file defines a React component called Layout, which serves as a wrapper for other components in the application. It renders the children components passed to it and includes a Toaster component for displaying notifications.\n\n  Dependencies: \n  - React: A JavaScript library for building user interfaces.\n  - Toaster: A component from the \"@repo/ui/shadcn/sonner\" library for displaying notifications.\n\nFunctions:\n\n  Layout:\n  - Purpose: Renders the children components within a div element and includes a Toaster component for displaying notifications.\n  - Arguments:\n    - children (React.ReactNode): The child components to be rendered within the Layout component.\n  - Returns: \n    - React element representing the Layout component.\n  - Exceptions: \n    - None\n\nClasses:\n\n  None\n\nOverall, the Layout.tsx file provides a reusable layout component that simplifies the structure of the application and includes a notification feature for user interaction.",
    "apps/web/app/(auth)/onboarding/page.tsx": "File Summary: \"use client\"\n\nModule Overview:\n\nPurpose: The file \"use client\" is a React component that serves as the main entry point for the SuperMemory application. It handles the onboarding process for new users, guiding them through the steps to get started with the application.\n\nDependencies:\n- \"@heroicons/react/24/solid\": Icon components for the UI\n- \"@heroicons/react/24/outline\": Outline icon components\n- \"framer-motion\": Library for animations in React\n- \"react\": React library for building user interfaces\n- \"sonner\": Library for displaying toast notifications\n- \"next/navigation\": Next.js navigation library\n- \"next/image\": Next.js component for optimizing images\n- \"@repo/ui/lib/utils\": Utility functions for the UI\n- \"../signin/_components/TextGradient/gradient.module.css\": CSS module for text gradients\n\nFunctions:\n\n- Home(): The main component that renders the onboarding process for new users. It includes different steps and guides users through the setup process.\n  - useState(0): State variable to track the current step in the onboarding process.\n  - useEffect(): Runs an asynchronous function to complete the onboarding process when the current step is greater than 3.\n  - StepOne(): Renders the content for the first step of the onboarding process.\n  - StepTwo(): Renders the content for the second step of the onboarding process.\n  - StepThree(): Renders the content for the third step of the onboarding process.\n  - Navbar(): Renders the navigation bar at the top of the page.\n\n- StepOne({ currStep }): Component for the first step of the onboarding process. It includes instructions for importing Twitter bookmarks.\n- StepTwo({ currStep }): Component for the second step of the onboarding process. It explains how to add content to SuperMemory.\n- StepThree({ currStep }): Component for the third step of the onboarding process. It allows users to ask questions and create memories.\n- Navbar(): Component for the navigation bar at the top of the page.\n\n- StepIndicator({ currStep, setCurrStep }): Component for displaying the current step in the onboarding process and allowing users to navigate between steps.\n\n- getStatusIcon({ completed }): Function that returns an icon based on whether a step is completed or not.\n\nOverall, the \"use client\" file is crucial for guiding new users through the onboarding process of the SuperMemory application, providing a seamless experience for getting started with the platform.",
    "apps/web/app/(auth)/privacy/page.tsx": "Page Title: PrivacyPolicy.js\n\nModule Overview:\n\n  Purpose: This module displays the Privacy Policy for the Supermemory.ai web app and browser extension, outlining the collection, storage, and protection of user information.\n  \n  Dependencies: \n  - React: A JavaScript library for building user interfaces.\n  - Markdown: A component for rendering Markdown content in React.\n\nFunctions:\n\n  Page():\n  - Purpose: Renders the Privacy Policy content on the web app.\n  - Arguments: None\n  - Returns: JSX element containing the Privacy Policy content.\n  - Exceptions: None\n\nThis file serves as the frontend component for displaying the Privacy Policy information to users of the Supermemory.ai web app and browser extension. It utilizes the Markdown component to render the policy text in a readable format.",
    "apps/web/app/(auth)/signin/_components/TextGradient/gradient.module.css": "Module Overview:\n\nPurpose: This file contains keyframes animations for various visual effects used in the application, such as background panning, scaling, and rotating elements.\n\nDependencies: None\n\nClasses: None\n\nFunctions: None\n\nThis file defines keyframes animations for background panning, scaling, and rotating elements used in the application. The animations are applied to elements with specific CSS classes to create visually appealing effects. The file also defines custom CSS variables for colors and sizes used in the animations.",
    "apps/web/app/(auth)/signin/page.tsx": "Module Overview:\n\nPurpose: The Signin module handles the authentication process for users, allowing them to sign in using Google authentication. It also provides a user interface for the sign-in page.\n\nDependencies:\n- next/image: For displaying images efficiently.\n- next/link: For client-side navigation.\n- \"@/public/logo.svg\": The logo image used in the UI.\n- \"@/server/auth\": For authentication functionality.\n- \"@repo/ui/components/icons\": For displaying Google icon.\n- \"./_components/TextGradient/gradient.module.css\": Styles for text gradient effect.\n- \"@repo/ui/lib/utils\": Utility functions for UI components.\n- \"next/navigation\": For client-side navigation.\n- \"sonner\": For displaying toast notifications.\n\nFunctions:\n\nSignin:\n- Purpose: Renders the sign-in page with Google authentication.\n- Arguments:\n  - searchParams (Record<string, string>): The search parameters from the URL.\n- Returns: JSX element representing the sign-in page UI.\n- Exceptions: None\n\nOverall, the Signin module provides a visually appealing sign-in page with Google authentication functionality for users to log in to the application.",
    "apps/web/app/(auth)/tos/page.tsx": "Page Title: Page.js\n\nModule Overview:\n\n  Purpose: This module represents the Terms of Service page for the Supermemory app. It displays the terms and conditions that users must agree to when using the app.\n  \n  Dependencies: \n  - React: A JavaScript library for building user interfaces.\n  - Markdown: A library for rendering Markdown content in React components.\n\nFunctions:\n\n  Page():\n  - Purpose: Renders the Terms of Service content on the page.\n  - Arguments: None\n  - Returns: JSX element containing the Terms of Service content.\n  - Exceptions: None",
    "apps/web/app/(dash)/(memories)/content.tsx": "Module Overview:\n\nPurpose: The \"use client\" file is responsible for rendering and managing memories and spaces within the application. It provides functionality for displaying memories and spaces, filtering them based on different criteria, and exporting data in JSON format.\n\nDependencies:\n- \"@/server/db/schema\": Contains schemas for content and stored spaces.\n- \"@repo/ui/icons\": Icons used for UI elements.\n- \"lucide-react\": Icons library for lucid icons.\n- \"next/image\": Next.js component for optimized images.\n- \"next/link\": Next.js component for client-side navigation.\n- \"react\": React library for building user interfaces.\n- \"react-layout-masonry\": Library for creating masonry layouts.\n- \"@repo/shared-types/utils\": Utility functions for shared types.\n- \"../../../components/twitter/render-tweet\": Component for rendering tweets.\n- \"@repo/ui/shadcn/dropdown-menu\": Dropdown menu component for UI.\n- \"@repo/ui/shadcn/button\": Button component for UI.\n- \"@/app/actions/doers\": Actions for adding users to spaces, deleting items, and moving items.\n- \"sonner\": Library for displaying toast notifications.\n- \"@repo/ui/shadcn/input\": Input component for UI.\n- \"framer-motion\": Library for animations.\n- \"next/navigation\": Next.js navigation utilities.\n\nFunctions:\n\nMemoriesPage:\n- Purpose: Renders memories and spaces, allows filtering and exporting data.\n- Arguments:\n  - memoriesAndSpaces: Object containing memories and spaces data.\n  - title (optional): Title for the page.\n  - currentSpace (optional): Currently selected space.\n  - usersWithAccess (optional): Array of users with access to the space.\n- Returns: JSX element representing the MemoriesPage component.\n- Exceptions: None.\n\nTabComponent:\n- Purpose: Renders a tab for a space with title and description.\n- Arguments:\n  - title: Title of the space.\n  - description: Description of the space.\n  - id: ID of the space.\n- Returns: JSX element representing the TabComponent.\n- Exceptions: None.\n\nLinkComponent:\n- Purpose: Renders a link component for different types of content.\n- Arguments:\n  - type: Type of content (page, note, tweet).\n  - content: Content of the item.\n  - title: Title of the item.\n  - url: URL of the item.\n  - image (optional): Image URL for the item.\n  - description: Description of the item.\n  - spaces: Array of stored spaces.\n  - id: ID of the item.\n- Returns: JSX element representing the LinkComponent.\n- Exceptions: None.\n\nFilters:\n- Purpose: Renders filter buttons for filtering memories and spaces.\n- Arguments:\n  - setFilter: Function to set the filter.\n  - filter: Current filter value.\n  - filterMethods: Array of filter methods.\n- Returns: JSX element representing the Filters component.\n- Exceptions: None.\n\nOverall, the \"use client\" file is crucial for managing and displaying memories and spaces within the application, providing a user-friendly interface for users to interact with their content.",
    "apps/web/app/(dash)/(memories)/memories/page.tsx": "Page Title: fetchMemories.js\n\nModule Overview:\n\n  Purpose: This module is responsible for fetching all user memories and spaces from the server and displaying them on the MemoriesPage component.\n\n  Dependencies: \n  - \"@/app/actions/fetchers\": Module containing the getAllUserMemoriesAndSpaces function for fetching user memories and spaces.\n  - \"next/navigation\": Module containing the redirect function for navigating to a different page.\n  - \"../content\": Module containing the MemoriesPage component for displaying user memories and spaces.\n\nFunctions:\n\n  Page():\n  - Purpose: Asynchronously fetches all user memories and spaces, redirects to the home page if the request is unsuccessful, and renders the MemoriesPage component with the fetched data.\n  - Arguments: None\n  - Returns: JSX element representing the MemoriesPage component with the fetched data.\n  - Exceptions: None\n\nNote: This file does not contain any classes.",
    "apps/web/app/(dash)/(memories)/space/[spaceid]/page.tsx": "Page Title: fetchMemoriesInsideSpace.js\n\nModule Overview:\n\n  Purpose: This module is responsible for fetching memories inside a specific space and displaying them on the MemoriesPage component.\n  \n  Dependencies: \n  - fetchers: Module containing functions for fetching data.\n  - next/navigation: Module for handling navigation in Next.js.\n  - content: Module containing the MemoriesPage component.\n  - db: Module for interacting with the database.\n  - drizzle-orm: Library for querying the database.\n  - server/db/schema: Module containing database schema definitions.\n  - server/auth: Module for handling authentication.\n\nFunctions:\n\n  Page({ params: { spaceid } }: { params: { spaceid: number }):\n  - Purpose: Retrieves memories inside a specified space and renders them on the MemoriesPage component.\n  - Arguments:\n    - spaceid (number): The ID of the space to fetch memories from.\n  - Returns:\n    - JSX element: The MemoriesPage component with the fetched memories and space information.\n  - Exceptions:\n    - Redirect to \"/home\" if fetching memories is unsuccessful or no data is returned.\n\nNote: This file does not define any classes.",
    "apps/web/app/(dash)/chat/CodeBlock.tsx": "Module Overview:\n\n  Purpose: This module provides a reusable code block component for displaying code snippets with syntax highlighting and a copy button.\n  Dependencies: \n  - React: JavaScript library for building user interfaces.\n  - useRef: Hook for accessing DOM elements.\n  - useState: Hook for managing component state.\n\nClasses:\n\n  CodeBlock:\n  - Purpose: Represents a code block component that displays code snippets with syntax highlighting.\n  - Attributes:\n    - lang (string): The programming language of the code snippet.\n    - codeChildren (React.ReactNode[]): The code snippet content.\n  - Methods: N/A\n\n  CodeBar:\n  - Purpose: Represents a code block toolbar component with a copy button.\n  - Attributes:\n    - lang (string): The programming language of the code snippet.\n    - codeRef (React.RefObject<HTMLElement>): Reference to the code block element.\n  - Methods:\n    - setIsCopied(isCopied: boolean) -> void: Sets the copied state of the code block.\n          - Args:\n            - isCopied (boolean): The new copied state.\n\nFunctions: N/A\n\nOverall, this file contains two React components - CodeBlock and CodeBar, where CodeBlock is the main component for displaying code snippets with syntax highlighting, and CodeBar is a toolbar component with a copy button functionality. The components utilize useRef and useState hooks for managing DOM elements and component state, respectively.",
    "apps/web/app/(dash)/chat/[chatid]/loading.tsx": "Page Title: Page.tsx\n\nModule Overview:\n\n  Purpose: This module represents a page component that displays a chat window with specified search parameters.\n\n  Dependencies: \n  - React: A JavaScript library for building user interfaces.\n  - chatSearchParamsCache: A module for caching search parameters.\n  - ChatWindow: A component for displaying chat messages.\n\nFunctions:\n\n  Page:\n  - Purpose: Renders a ChatWindow component with specified search parameters.\n  - Arguments:\n    - searchParams (Record<string, string | string[] | undefined>): The search parameters to be used.\n  - Returns:\n    - JSX.Element: The rendered ChatWindow component.\n  - Exceptions:\n    - None\n\nClasses:\n\n  None\n\nOverall, this file serves as a page component that displays a chat window based on the provided search parameters. It utilizes the React library, a search parameter caching module, and the ChatWindow component to achieve this functionality.",
    "apps/web/app/(dash)/chat/[chatid]/page.tsx": "Page Title: Page.tsx\n\nModule Overview:\n\n  Purpose: This module is responsible for rendering a chat page with the full chat thread based on the provided chat id. It also handles error cases when the chat is not found or when there is an error fetching the chat thread.\n\n  Dependencies: \n  - getFullChatThread: Function from \"@/app/actions/fetchers\" for fetching the full chat thread.\n  - chatSearchParamsCache: Object from \"@/lib/searchParams\" for parsing search parameters.\n  - ChatWindow: Component for rendering the chat window.\n\nFunctions:\n\n  Page:\n  - Purpose: Renders the chat page with the full chat thread based on the provided chat id.\n  - Arguments:\n    - params: Object containing the chat id.\n    - searchParams: Object containing search parameters.\n  - Returns:\n    - JSX Element: The rendered ChatWindow component with the chat thread.\n  - Exceptions:\n    - Displays an error message if there is an error fetching the chat thread or if the chat is not found.",
    "apps/web/app/(dash)/chat/chatQueryInput.tsx": "Module Overview:\n\nPurpose: The \"use client\" module provides a QueryInput component that allows users to input queries and interact with spaces in the application.\n\nDependencies:\n- @repo/ui/icons: Provides icons for the component.\n- next/image: Handles image rendering.\n- react: Library for building user interfaces.\n- @repo/ui/shadcn/divider: Divider component for visual separation.\n- next/navigation: Provides routing functionality.\n- @app/actions/fetchers: Fetches data from the server.\n- @repo/ui/shadcn/combobox: Combobox component for selecting options.\n- lucide-react: Library for icons.\n- sonner: Library for displaying toast notifications.\n- @app/actions/doers: Performs actions on the server.\n\nFunctions:\n\nQueryInput:\n- Purpose: Represents a component for inputting queries and interacting with spaces.\n- Arguments:\n  - initialQuery (string): The initial query value.\n  - initialSpaces ({ id: number, name: string }[]): The initial list of spaces.\n  - disabled (boolean): Indicates if the component is disabled.\n  - className (string): Custom CSS class for styling.\n  - mini (boolean): Indicates if the component is in mini mode.\n  - handleSubmit: Function to handle form submission.\n  - setInitialSpaces: Function to set the initial spaces.\n- Returns: A React component for inputting queries and interacting with spaces.\n- Exceptions: None\n\nOverall, the \"use client\" module provides a QueryInput component that allows users to input queries and interact with spaces in the application. It relies on various dependencies for functionality and provides a structured component for handling user interactions.",
    "apps/web/app/(dash)/chat/chatWindow.tsx": "Module Overview:\n\nPurpose: The \"use client\" file is responsible for managing the chat window functionality within the application. It handles user queries, displays chat history, and interacts with the API to fetch responses.\n\nDependencies:\n- framer-motion: Library for animations.\n- react: JavaScript library for building user interfaces.\n- @repo/ui: UI components library.\n- next/navigation: Next.js navigation module.\n- @repo/shared-types: Shared types used in the application.\n- sonner: Library for displaying toast notifications.\n- @heroicons/react: Icon library.\n\nFunctions:\n\nChatWindow:\n- Purpose: Represents the chat window component.\n- Arguments:\n  - q (string): The user query.\n  - spaces (array): Array of space objects.\n  - initialChat (array): Initial chat history.\n  - threadId (string): The thread ID.\n  - proMode (boolean): Indicates if the chat is in pro mode.\n- Methods:\n  - removeJustificationFromText(text: string) -> string: Removes justification from text.\n  - handleTTS(text: string, idx: number) -> void: Handles text-to-speech functionality.\n  - stopTTS() -> void: Stops text-to-speech.\n  - getAnswer(query: string, spaces: string[], proMode: boolean) -> Promise<void>: Fetches response from the API.\n- Dependencies:\n  - QueryInput: Component for user input.\n  - Markdown: Component for rendering markdown.\n  - remarkGfm: Plugin for parsing GitHub Flavored Markdown.\n  - remarkMath: Plugin for parsing math equations in markdown.\n  - rehypeKatex: Plugin for rendering math equations.\n  - rehypeHighlight: Plugin for syntax highlighting.\n  - code, p: Helper functions for markdown rendering.\n  - codeLanguageSubset: Subset of code languages for syntax highlighting.\n  - toast: Function for displaying toast notifications.\n  - Link: Component for linking to other pages.\n  - createChatObject: Function for creating chat objects.\n  - ClipboardIcon, SpeakerWaveIcon, SpeakerXMarkIcon: Icons for clipboard and speech functionality.\n\nOverall, the \"use client\" file manages the chat window component, handles user queries, and interacts with the API to fetch responses, providing a seamless chat experience for users.",
    "apps/web/app/(dash)/chat/markdownRenderHelpers.tsx": "Module Overview:\n\n  Purpose: This module provides components for rendering code blocks and paragraphs with specific styling.\n  Dependencies: \n  - react: A JavaScript library for building user interfaces.\n  - react-markdown: A library for rendering Markdown content in React applications.\n  - CodeBlock: A custom component for displaying code blocks with syntax highlighting.\n\nFunctions:\n\n  code:\n  - Purpose: Renders a code block with syntax highlighting based on the specified language.\n  - Arguments:\n    - props: JSX.IntrinsicElements[\"code\"]: The props for the code block component.\n  - Returns:\n    - JSX.Element: The rendered code block component.\n  - Exceptions:\n    - None\n\n  p:\n  - Purpose: Renders a paragraph element with pre-wrap whitespace styling.\n  - Arguments:\n    - props?: Omit<DetailedHTMLProps<HTMLAttributes<HTMLParagraphElement>, HTMLParagraphElement>, \"ref\">: Optional props for the paragraph element.\n  - Returns:\n    - JSX.Element: The rendered paragraph element.\n  - Exceptions:\n    - None\n\nThis file contains two memoized functional components, 'code' and 'p', which are used for rendering code blocks and paragraphs with specific styling in React applications. The 'code' component extracts the language from the className prop to determine syntax highlighting, while the 'p' component applies pre-wrap whitespace styling to paragraphs.",
    "apps/web/app/(dash)/chat/route.ts": "File Title: next_navigation.js\n\nModule Overview:\n\n  Purpose: This module provides functionality for redirecting users to different pages within the application using the Next.js framework.\n  \n  Dependencies: \n  - next/navigation: The module for handling navigation within the Next.js application.\n\nFunctions:\n\n  GET():\n  - Purpose: This function performs a redirect to the \"/home\" page.\n  - Arguments: None\n  - Returns: A redirect to the \"/home\" page\n  - Exceptions: None",
    "apps/web/app/(dash)/dialogContentContainer.tsx": "Module Overview:\n\nPurpose: The DialogContentContainer module is responsible for managing the creation of memories within the application. It allows users to add content, select spaces, like, and bookmark memories.\n\nDependencies:\n- \"@/server/db/schema\": Imported StoredSpace from the server database schema.\n- \"react\": Imported useEffect, useMemo, and useState from React.\n- \"../actions/doers\": Imported createMemory and createSpace from the doers actions.\n- \"@repo/ui/shadcn/combobox\": Imported ComboboxWithCreate from the UI library.\n- \"sonner\": Imported toast from the sonner library.\n- \"../actions/fetchers\": Imported getSpaces from the fetchers actions.\n- \"lucide-react\": Imported MinusIcon, PlusCircleIcon, HeartIcon, and BookmarkIcon from lucide-react.\n- \"@repo/ui/shadcn/dialog\": Imported DialogContent, DialogDescription, DialogFooter, DialogHeader, and DialogTitle from the UI library.\n- \"@repo/ui/shadcn/label\": Imported Label from the UI library.\n- \"@repo/ui/shadcn/textarea\": Imported Textarea from the UI library.\n- \"@repo/ui/shadcn/button\": Imported Button from the UI library.\n\nFunctions:\n\ncreateMemory(content: string, spaces?: number[]) -> void:\n- Purpose: Creates a new memory with the provided content and spaces.\n- Arguments:\n  - content (string): The content of the memory.\n  - spaces (optional number[]): An array of space IDs associated with the memory.\n- Returns: void\n- Exceptions: Displays error toast if content is empty or if memory creation fails.\n\ngetSpaces() -> Promise<void>:\n- Purpose: Retrieves the list of spaces from the server.\n- Arguments: None\n- Returns: Promise<void>\n- Exceptions: Displays warning toast if unable to get spaces from the server.\n\nhandleLike() -> void:\n- Purpose: Increments the likes count for the memory.\n- Arguments: None\n- Returns: void\n\nhandleBookmark() -> void:\n- Purpose: Toggles the bookmark status of the memory.\n- Arguments: None\n- Returns: void\n\nDialogContentContainer Component:\n- Purpose: Renders a dialog content container for adding memories.\n- Attributes:\n  - spaces (StoredSpace[]): Array of stored spaces.\n  - content (string): The content of the memory.\n  - selectedSpaces (number[]): Array of selected space IDs.\n  - likesCount (number): The count of likes for the memory.\n  - isBookmarked (boolean): Indicates if the memory is bookmarked.\n- Methods:\n  - handleSubmit(content?: string, spaces?: number[]) -> void: Handles memory submission.\n  - autoDetectedType() -> string: Detects the type of content (tweet, page, note).\n- Dependencies: Uses various UI components for rendering the dialog content container.",
    "apps/web/app/(dash)/dialogTriggerWrapper.tsx": "File Summary: \"use client\"\n\nModule Overview:\n\nPurpose: This file contains components related to triggering dialogs for desktop and mobile views within the application.\nDependencies:\n- \"@repo/ui/shadcn/dialog\": Dialog and DialogTrigger components from the UI library.\n- \"react\": React library for building user interfaces.\n- \"./dialogContentContainer\": DialogContentContainer component for displaying dialog content.\n- \"@heroicons/react/24/solid\": PlusIcon component for displaying a plus icon.\n\nFunctions:\n\nDialogDesktopTrigger():\n- Purpose: Renders a button trigger for opening a dialog on desktop view.\n- Arguments: None\n- Returns: JSX element for the desktop trigger button.\n\nDialogMobileTrigger():\n- Purpose: Renders a button trigger for opening a dialog on mobile view.\n- Arguments: None\n- Returns: JSX element for the mobile trigger button.\n\nDialogTriggerWrapper({ children: React.ReactNode }):\n- Purpose: Wraps the dialog trigger components and manages the dialog state.\n- Arguments:\n  - children (React.ReactNode): Child components to be rendered within the dialog trigger wrapper.\n- Returns: JSX element containing the dialog trigger and dialog content container components.\n- Exceptions: None\n\nOverall, this file provides components for triggering dialogs on desktop and mobile views, along with the necessary wrapper component for managing the dialog state.",
    "apps/web/app/(dash)/header/autoBreadCrumbs.tsx": "Module Overview:\n\nPurpose: The \"use client\" module is responsible for managing the breadcrumbs displayed on the application's UI. It dynamically generates breadcrumb links based on the current pathname.\n\nDependencies:\n- @repo/ui/shadcn/breadcrumb: Provides components for rendering breadcrumbs.\n- next/navigation: Provides the usePathname hook for accessing the current pathname.\n- React: JavaScript library for building user interfaces.\n\nFunctions:\n\nAutoBreadCrumbs():\n- Purpose: Dynamically generates breadcrumb links based on the current pathname.\n- Arguments: None\n- Returns: React component for rendering breadcrumbs.\n- Exceptions: None\n\nOverall, the \"use client\" module plays a crucial role in enhancing user navigation within the application by providing dynamic breadcrumb functionality based on the current pathname.",
    "apps/web/app/(dash)/header/header.tsx": "File Summary: Header.js\n\nModule Overview:\n\nPurpose: The Header module is responsible for rendering the header component of the application, which includes the logo, chat history dropdown menu, and sign out button.\n\nDependencies:\n- React: A JavaScript library for building user interfaces.\n- Next.js: A React framework for building server-side rendered applications.\n- @repo/ui/shadcn/dropdown-menu: A custom dropdown menu component.\n- @radix-ui/react-icons: A library of accessible SVG icons.\n\nFunctions:\n\nHeader():\n- Purpose: Asynchronously fetches chat history data and renders the header component.\n- Returns: The JSX element representing the header component.\n- Exceptions: None\n\nClasses: None\n\nOverall, the Header module plays a crucial role in providing the user interface elements for navigating the application, displaying the logo, managing chat history, and enabling user sign out functionality.",
    "apps/web/app/(dash)/header/newChatButton.tsx": "Page Title: NewChatButton.js\n\nModule Overview:\n\n  Purpose: This module defines a React component called NewChatButton, which renders a button to start a new chat if the current path is \"/chat\".\n  Dependencies: \n  - @repo/ui/icons: Provides the ChatIcon component.\n  - next/image: Allows for the rendering of images.\n  - next/link: Enables linking to other pages in the application.\n  - next/navigation: Provides the usePathname hook for accessing the current path.\n  - react: The React library for building user interfaces.\n\nFunctions:\n\n  NewChatButton():\n  - Purpose: Renders a button to start a new chat if the current path is \"/chat\".\n  - Arguments: None\n  - Returns: A React component representing the new chat button.\n  - Exceptions: None\n\nNote: This file does not contain any classes, only a functional component.",
    "apps/web/app/(dash)/header/signOutButton.tsx": "File Summary: SignOutButton.js\n\nModule Overview:\n\n  Purpose: This file defines a SignOutButton component that allows users to sign out of the application.\n  Dependencies: \n  - \"@/server/auth\": Module for handling user authentication and sign out functionality.\n  - \"@repo/ui/shadcn/button\": Button component for displaying the sign out button.\n\nClasses:\nNone\n\nFunctions:\n\n  SignOutButton():\n  - Purpose: Renders a form with a sign out button that triggers the signOut function.\n  - Arguments: None\n  - Returns: JSX element representing the sign out button form.\n  - Exceptions: None\n\nOverall, the SignOutButton.js file provides a simple and reusable component for users to sign out of the application. It relies on the signOut function from the authentication module and the Button component for styling and functionality.",
    "apps/web/app/(dash)/home/filterSpaces.tsx": "File Summary: FilterSpaces.tsx\n\nModule Overview:\n\n  Purpose: This module provides a component for filtering and selecting spaces within the application.\n  Dependencies: \n  - @repo/ui/shadcn/command: Provides components for handling commands and lists.\n  - lucide-react: Library for icons.\n  - React: Library for building user interfaces.\n\nFunctions:\n\n  FilterSpaces:\n  - Purpose: Renders a component for filtering and selecting spaces.\n  - Arguments:\n    - initialSpaces (space[]): Array of initial spaces to display.\n    - selectedSpaces (space[]): Array of selected spaces.\n    - setSelectedSpaces (React.Dispatch<React.SetStateAction<space[]>>): Function to update selected spaces.\n  - Returns: JSX element representing the filter spaces component.\n  - Exceptions: None\n\n  handleKeyDown:\n  - Purpose: Handles keydown events for input field.\n  - Arguments:\n    - e (React.KeyboardEvent<HTMLInputElement>): Keyboard event object.\n  - Returns: None\n  - Exceptions: None\n\n  handleSelect:\n  - Purpose: Handles selection of a space.\n  - Arguments:\n    - selectedSpace (space): Space object to be selected.\n  - Returns: None\n  - Exceptions: None\n\nNote: This file contains a React component for filtering and selecting spaces, with functions to handle user interactions.",
    "apps/web/app/(dash)/home/history.tsx": "Module Overview:\n\n  Purpose: The History module is responsible for displaying query suggestions to users based on their search history. It fetches query suggestions from the server and renders them in a list format for users to select from.\n  \n  Dependencies: \n  - \"@heroicons/react/24/outline\": Provides the ArrowLongRightIcon component for displaying an arrow icon.\n  - \"@repo/ui/shadcn/skeleton\": Provides the Skeleton component for displaying loading placeholders.\n  - \"react\": Library for building user interfaces.\n  - \"framer-motion\": Library for creating animations.\n  - \"@/app/actions/doers\": Module containing the getQuerySuggestions function for fetching query suggestions.\n\nClasses:\n- N/A\n\nFunctions:\n\n  getQuerySuggestions() -> Promise<{ success: boolean, data: string[] | null, error: string | null }>: \n  - Purpose: Fetches query suggestions from the server.\n  - Returns: A Promise containing an object with success status, data (array of query suggestions or null), and error message if any.\n  - Exceptions: N/A\n\n  History({ setQuery }: { setQuery: (q: string) => void }) -> ReactElement:\n  - Purpose: Renders a list of query suggestions for users to select from.\n  - Arguments:\n    - setQuery (function): Callback function to set the selected query.\n  - Returns: A React element representing the query suggestions list.\n  - Exceptions: N/A\n\nNote: The History module primarily focuses on fetching and displaying query suggestions to users, utilizing various React and animation libraries for rendering the UI components.",
    "apps/web/app/(dash)/home/page.tsx": "Module Overview:\n\nPurpose: The \"use client\" module is responsible for handling client-side interactions and functionalities within the application.\n\nDependencies:\n- React: A JavaScript library for building user interfaces.\n- QueryInput: A component for handling user input queries.\n- getSessionAuthToken, getSpaces, linkTelegramToUser, createChatThread, getQuerySuggestions: Functions for fetching data and performing actions.\n- toast: A library for displaying toast notifications.\n- motion: A library for adding animations to components.\n- ChromeIcon, GithubIcon, MailIcon, TwitterIcon: Icons used for visual representation.\n- Link: A component for navigating to different pages.\n- History: A component for displaying search history.\n\nFunctions:\n\nPage({ searchParams }: { searchParams: Record<string, string> }):\n- Purpose: Renders the main page component with search functionality.\n- Arguments:\n  - searchParams (Record<string, string>): Object containing search parameters.\n- Returns: JSX element representing the main page component.\n- Exceptions: None\n\ncreateChatThread(q: string) -> Promise<{ success: boolean, data: string }:\n- Purpose: Creates a chat thread based on the provided query.\n- Arguments:\n  - q (string): The query to create the chat thread with.\n- Returns: Promise containing an object with success status and thread data.\n- Exceptions: None\n\nlinkTelegramToUser(telegramUser: string) -> Promise<{ success: boolean }:\n- Purpose: Links a Telegram user to the current user.\n- Arguments:\n  - telegramUser (string): The Telegram user to link.\n- Returns: Promise containing an object with success status.\n- Exceptions: None\n\ngetSpaces() -> Promise<{ success: boolean, data: { id: number, name: string }[] }:\n- Purpose: Retrieves spaces data.\n- Returns: Promise containing an object with success status and spaces data.\n- Exceptions: None\n\ngetSessionAuthToken() -> Promise<{ data: string }:\n- Purpose: Retrieves the session authentication token.\n- Returns: Promise containing an object with the authentication token.\n- Exceptions: None\n\nOverall, the \"use client\" module handles client-side interactions, data fetching, and user interface components for the application. It utilizes various dependencies and functions to provide a seamless user experience.",
    "apps/web/app/(dash)/home/queryinput.tsx": "Module Overview:\n\n  Purpose: The \"use client\" module provides a query input component for users to search and submit queries. It includes functionalities for filtering spaces, enabling pro mode, and submitting queries.\n\n  Dependencies: \n  - React: JavaScript library for building user interfaces.\n  - next/image: Image component for optimizing images in Next.js.\n  - @repo/ui/icons: Icon component library.\n  - @repo/ui/shadcn/switch: Switch component for toggling options.\n  - @repo/ui/shadcn/label: Label component for form inputs.\n\nFunctions:\n\n  QueryInput:\n  - Purpose: Represents the query input component for users to search and submit queries.\n  - Arguments:\n    - initialSpaces (optional): An array of initial spaces with id and name.\n    - mini (optional): A boolean flag for mini mode.\n    - handleSubmit: Function to handle query submission.\n    - query: The current query string.\n    - setQuery: Function to update the query string.\n  - Returns: The QueryInput component.\n  - Exceptions: None\n\n  handleSubmit:\n  - Purpose: Handles the submission of a query with selected spaces and pro mode.\n  - Arguments:\n    - q (string): The query string.\n    - spaces ({ id: number, name: string }[]): An array of selected spaces.\n    - proMode (boolean): Flag indicating pro mode.\n  - Returns: None\n  - Exceptions: None\n\n  setQuery:\n  - Purpose: Updates the query string in the component state.\n  - Arguments:\n    - q (string): The new query string.\n  - Returns: None\n  - Exceptions: None\n\n  onCheckedChange:\n  - Purpose: Handles the change event for the pro mode switch.\n  - Arguments:\n    - v (string): The new value of the switch.\n  - Returns: None\n  - Exceptions: None\n\nThis summary provides an overview of the \"use client\" module, its functionalities, and dependencies, aiding developers in understanding its significance within the codebase.",
    "apps/web/app/(dash)/layout.tsx": "Page Title: Layout.tsx\n\nModule Overview:\n\n  Purpose: This module defines the layout structure of the application, including the header, menu, and main content area. It also handles user authentication and onboarding checks.\n  \n  Dependencies: \n  - Header: Imported from \"./header/header\"\n  - Menu: Imported from \"./menu\"\n  - redirect: Imported from \"next/navigation\"\n  - auth: Imported from \"../../server/auth\"\n  - Toaster: Imported from \"@repo/ui/shadcn/sonner\"\n  - BackgroundPlus: Imported from \"../(landing)/GridPatterns/PlusGrid\"\n  - getUser: Imported from \"../actions/fetchers\"\n\nFunctions:\n\n  Layout:\n  - Purpose: Renders the main layout of the application, including the header, menu, and main content area. It also handles user authentication and onboarding checks.\n  - Arguments:\n    - children (React.ReactNode): The child components to be rendered within the layout.\n  - Returns:\n    - React.ReactNode: The rendered layout components.\n  - Exceptions:\n    - None\n\nClasses:\n- None\n\nOverall, the Layout.tsx file is responsible for rendering the main layout of the application, including key components like the header, menu, and main content area. It also handles user authentication and onboarding checks to ensure a smooth user experience.",
    "apps/web/app/(dash)/menu.tsx": "Module Overview:\n\nPurpose: The \"use client\" file is responsible for defining the Menu component, which allows users to interact with the application by adding memories, selecting spaces, and navigating through different sections of the app.\n\nDependencies:\n- React: A JavaScript library for building user interfaces.\n- Next.js: A React framework for building server-rendered applications.\n- @repo/ui: Custom UI components for the application.\n- lucide-react: A library of icons for React applications.\n- sonner: A library for displaying toast notifications.\n- @heroicons/react: A set of icons for React applications.\n- react-use-measure: A React hook for measuring elements.\n- @/lib/useKeyPress: A custom hook for handling key presses.\n\nFunctions:\n\nMenu():\n- Purpose: Renders the Menu component with functionality for adding memories, selecting spaces, and navigating through different sections of the app.\n- Arguments: None\n- Returns: JSX elements representing the Menu component.\n- Exceptions: None\n\nhandleSubmit(content?: string, spaces?: number[]):\n- Purpose: Handles the submission of a memory with optional content and selected spaces.\n- Arguments:\n  - content (string): The content of the memory.\n  - spaces (number[]): An array of selected space IDs.\n- Returns: Promise containing the result of memory creation.\n- Exceptions: Throws an error if content is empty or memory creation fails.\n\nAttributes and Methods:\n- The file also defines various attributes, such as menuItems, content, selectedSpaces, autoDetectedType, dialogOpen, options, and menuItems, along with methods like useEffect, useKeyPress, and handleSubmit.\n\nOverall, the \"use client\" file plays a crucial role in providing user interaction features within the application, such as adding memories, selecting spaces, and navigating through different sections.",
    "apps/web/app/(dash)/note/[noteid]/page.tsx": "Page Title: Page.tsx\n\nModule Overview:\n\n  Purpose: This module represents a page component that displays a note based on the provided note id.\n  Dependencies: \n  - getNoteFromId: Function from \"@/app/actions/fetchers\" for fetching a note based on its id.\n  - NotebookIcon: Component from \"lucide-react\" for displaying a notebook icon.\n\nFunctions:\n\n  Page({ params }: { params: { noteid: string } }) -> JSX.Element:\n  - Purpose: Renders a page displaying the note with the given note id.\n  - Arguments:\n    - params (object): An object containing the note id.\n  - Returns:\n    - JSX.Element: The rendered page component.\n  - Exceptions: None\n\nDependencies:\n- getNoteFromId: Function for fetching a note based on its id.\n- NotebookIcon: Component for displaying a notebook icon.",
    "apps/web/app/(landing)/CardPatterns/AnimatedBeam.tsx": "File Summary: \"use client\"\n\nModule Overview:\n\nPurpose: The \"use client\" file contains the implementation of the AnimatedBeam component, which creates an animated beam connecting two elements on a web page.\n\nDependencies:\n- \"@repo/ui/lib/utils\": Library for utility functions.\n- \"framer-motion\": Library for creating animations in React.\n- \"react\": Library for building user interfaces in React.\n\nClasses:\n\nAnimatedBeam:\n- Purpose: Represents the AnimatedBeam component, which creates an animated beam connecting two elements.\n- Attributes:\n  - className (string): Additional CSS class for styling.\n  - containerRef (RefObject<HTMLElement>): Reference to the container element.\n  - fromRef (RefObject<HTMLElement>): Reference to the starting element.\n  - toRef (RefObject<HTMLElement>): Reference to the ending element.\n  - curvature (number): Curvature of the beam.\n  - reverse (boolean): Flag to reverse the gradient coordinates.\n  - pathColor (string): Color of the beam path.\n  - pathWidth (number): Width of the beam path.\n  - pathOpacity (number): Opacity of the beam path.\n  - gradientStartColor (string): Start color of the gradient.\n  - gradientStopColor (string): Stop color of the gradient.\n  - delay (number): Delay before animation starts.\n  - duration (number): Duration of the animation.\n  - startXOffset (number): X-axis offset for the starting point.\n  - startYOffset (number): Y-axis offset for the starting point.\n  - endXOffset (number): X-axis offset for the ending point.\n  - endYOffset (number): Y-axis offset for the ending point.\n- Methods:\n  - updatePath(): Updates the path of the beam based on element positions.\n  - resizeObserver(): Initializes ResizeObserver to track container size changes.\n\nFunctions: N/A\n\nOverall, the \"use client\" file provides the implementation for the AnimatedBeam component, allowing developers to create visually appealing animated connections between elements on a web page.",
    "apps/web/app/(landing)/CardPatterns/AnimatedBeamWithOutput.tsx": "Functions:\n\nGoogleDriveIcon():\n- Purpose: Renders the Google Drive icon as an SVG element.\n- Arguments: None\n- Returns: SVG element representing the Google Drive icon.\n- Exceptions: None\n\nGoogleDocsIcon():\n- Purpose: Renders the Google Docs icon as an SVG element.\n- Arguments: None\n- Returns: SVG element representing the Google Docs icon.\n- Exceptions: None\n\nNotionIcon():\n- Purpose: Renders the Notion icon as an SVG element.\n- Arguments: None\n- Returns: SVG element representing the Notion icon.\n- Exceptions: None\n\nWhatsAppIcon():\n- Purpose: Renders the WhatsApp icon as an SVG element.\n- Arguments: None\n- Returns: SVG element representing the WhatsApp icon.\n- Exceptions: None\n\nMessengerIcon():\n- Purpose: Renders the Messenger icon as an SVG element.\n- Arguments: None\n- Returns: SVG element representing the Messenger icon.\n- Exceptions: None\n\nZapierIcon():\n- Purpose: Renders the Zapier icon as an SVG element.\n- Arguments: None\n- Returns: SVG element representing the Zapier icon.\n- Exceptions: None\n\nThe additional functions in the code file are responsible for rendering specific custom SVG icons for Google Drive, Google Docs, Notion, WhatsApp, Messenger, and Zapier. Each function takes no arguments and returns an SVG element representing the respective icon. These icons enhance the visual appeal of the application by providing recognizable branding elements within the animated beam show component.",
    "apps/web/app/(landing)/CardPatterns/AnimatedGrid.tsx": "File Summary: \"use client\"\n\nModule Overview:\n\nPurpose: The \"use client\" file contains the GridPattern component, which generates a grid pattern with animated squares. This component is used for visual effects in the application.\n\nDependencies:\n- \"@repo/ui/lib/utils\": For utility functions.\n- \"framer-motion\": For animations.\n- \"react\": For building user interfaces.\n\nFunctions:\n\nGridPattern:\n- Purpose: Renders a grid pattern with animated squares.\n- Arguments:\n  - width (number): Width of each square.\n  - height (number): Height of each square.\n  - x (number): X-coordinate of the pattern.\n  - y (number): Y-coordinate of the pattern.\n  - strokeDasharray (any): Stroke dash array for the pattern.\n  - numSquares (number): Number of squares in the pattern.\n  - className (string): Additional CSS classes.\n  - maxOpacity (number): Maximum opacity for squares.\n  - duration (number): Duration of animation.\n  - repeatDelay (number): Delay between animation repeats.\n- Returns: JSX element representing the grid pattern.\n- Exceptions: None.\n\nupdateSquarePosition:\n- Purpose: Updates the position of a single square.\n- Arguments:\n  - id (number): ID of the square to update.\n- Returns: None.\n- Exceptions: None.\n\ngenerateSquares:\n- Purpose: Generates an array of squares with IDs and positions.\n- Arguments:\n  - count (number): Number of squares to generate.\n- Returns: Array of square objects.\n- Exceptions: None.\n\ncreate_user:\n- Purpose: Creates a new user account.\n- Arguments:\n  - username (str): The desired username.\n  - email (str): The email address of the new user.\n- Returns: User object.\n- Exceptions:\n  - ValueError: If the username or email is invalid.\n\ndelete_user:\n- Purpose: Deletes a user account.\n- Arguments:\n  - user (User): The user account to be deleted.\n- Returns: None.\n- Exceptions:\n  - PermissionError: If the user does not have the required permissions.\n  - DatabaseError: If there is an issue deleting the user.",
    "apps/web/app/(landing)/CardPatterns/Glare.tsx": "Module Overview:\n\nPurpose: The \"use client\" file contains the GlareCard component, which is responsible for rendering a visually appealing card with interactive hover effects.\n\nDependencies:\n- \"@repo/ui/lib/utils\": Utility functions from the UI library.\n- \"react\": React library for building user interfaces.\n\nClasses:\n\nGlareCard:\n- Purpose: Represents a card component with glare and background effects.\n- Attributes:\n  - children (React.ReactNode): The content to be displayed inside the card.\n  - className (string): Optional class name for styling purposes.\n- Methods:\n  - updateStyles() -> void: Updates the styles of the card based on user interaction.\n\nFunctions:\n\nNone in this file.\n\nOverall, the \"use client\" file contains the GlareCard component, which creates a visually appealing card with interactive hover effects. It relies on utility functions from the UI library and the React library for its functionality.",
    "apps/web/app/(landing)/Cta.tsx": "Module Overview:\n\nPurpose: The Cta module represents a call-to-action section on a webpage, encouraging users to sign up for a waitlist for a product launch.\n\nDependencies:\n- React: A JavaScript library for building user interfaces.\n- EmailInput: A custom component for inputting email addresses.\n- lucide-react: A library of icons for use in React applications.\n- next/link: A routing library for Next.js applications.\n\nFunctions:\n\nCta():\n- Purpose: Renders the call-to-action section with information about the product launch and a sign-up form.\n- Arguments: None\n- Returns: JSX element representing the call-to-action section\n- Exceptions: None\n\nOverall, the Cta module is responsible for displaying a visually appealing call-to-action section on a webpage, prompting users to sign up for a waitlist for a product launch.",
    "apps/web/app/(landing)/EmailInput.tsx": "Module Overview:\n\n  Purpose: The \"use client\" module is responsible for handling email input functionality within the application. It allows users to submit their email address to join a waitlist and receive notifications upon launch.\n  \n  Dependencies: \n  - react: A JavaScript library for building user interfaces.\n  - formSubmitAction: A function for submitting form data.\n  - useToast: A custom hook for displaying toast notifications.\n  - lucide-react: A library for adding icons to the application.\n\nFunctions:\n\n  EmailInput():\n  - Purpose: Represents the email input form component.\n  - Attributes:\n    - email (string): The user's email address.\n    - toast (function): A function for displaying toast notifications.\n    - loading (boolean): Indicates if the form is currently submitting.\n  - Methods:\n    - onSubmit(e: FormEvent<HTMLFormElement>) -> void: Handles form submission and displays appropriate notifications based on the response.\n          - Args:\n            - e (FormEvent<HTMLFormElement>): The form submission event.\n          - Returns:\n            - void\n          - Exceptions:\n            - None\n\nNote: The EmailInput component is a functional component that utilizes React hooks for state management and form submission handling. It also integrates with the useToast hook for displaying notifications to the user.",
    "apps/web/app/(landing)/FeatureCardContent.tsx": "Module Overview:\n\nPurpose: This file, FUIFeatureSectionWithCards, is responsible for rendering a section with feature cards on the UI. It displays various features with icons, titles, and descriptions in a visually appealing layout.\n\nDependencies:\n- \"@repo/ui/components/icons\": Provides icons like Twitter, Search, and MessageCircle for the feature cards.\n- \"./CardPatterns/Glare\": Imports the GlareCard component for styling the feature cards.\n- \"react\": Allows the use of React components in the file.\n- \"lucide-react\": Provides additional icons like Search for the feature cards.\n\nFunctions:\n- No standalone functions are defined in this file.\n\nClasses:\n- FUIFeatureSectionWithCards:\n  - Purpose: Renders a section with feature cards displaying icons, titles, and descriptions.\n  - Attributes: \n    - features (array): An array of objects, each representing a feature with an icon, title, and description.\n  - Methods: None\n\nFeature Objects:\n- Each feature object in the features array represents a specific feature to be displayed in a feature card.\n  - icon: The icon representing the feature.\n  - title: The title of the feature.\n  - desc: The description of the feature.\n\nOverall, this file is crucial for displaying feature cards with icons, titles, and descriptions on the UI, providing users with information about various features available in the application.",
    "apps/web/app/(landing)/FeatureContent.tsx": "File Summary: features.js\n\nModule Overview:\n\n  Purpose: This file defines an array of features that cater to different user roles within the application, such as researchers, content writers, and developers.\n  Dependencies: None\n\nClasses: N/A\n\nFunctions: N/A\n\nFunctions:\n\n  N/A\n\nOverall, this file serves as a central repository for defining the features available to different user roles in the application. Each feature is represented as an object within the 'features' array, containing a title, description, and an associated SVG icon component. Developers can easily reference this file to understand the available features and their descriptions for each user role.",
    "apps/web/app/(landing)/Features.tsx": "Module Overview:\n\nPurpose: The Features file is responsible for rendering a section on the webpage that showcases the features of the application. It includes a header, description, and a call-to-action button for users to get started.\n\nDependencies:\n- react: A JavaScript library for building user interfaces.\n- lucide-react: A library of icons for use in React applications.\n- next/link: A routing library for Next.js applications.\n- ./FeatureCardContent: A custom component for displaying feature cards.\n\nFunctions:\n- heightFix(): This function adjusts the height of the parent element based on the height of the tabs.\n  - Arguments: None\n  - Returns: None\n  - Exceptions: None\n\nClasses: None\n\nOverall, the Features file is essential for displaying the key features of the application to users and prompting them to take action. It utilizes various dependencies to create an engaging user experience.",
    "apps/web/app/(landing)/Features/chatbubble.tsx": "Module Overview:\n\n  Purpose: The ChatBubbleWing module provides a component for rendering a chat bubble wing icon in the application.\n  Dependencies: None\n\nFunctions:\n\n  ChatBubbleWing:\n  - Purpose: Renders a chat bubble wing icon.\n  - Arguments:\n    - className (string): Optional class name for styling.\n    - pathClassName (string): Optional class name for styling the path element.\n    - Returns: JSX element representing the chat bubble wing icon.\n    - Exceptions: None\n\nNote: This file exports the ChatBubbleWing component as the default export.",
    "apps/web/app/(landing)/Features/features.tsx": "File Summary: Gradient.tsx\n\nModule Overview:\n\n  Purpose: This file defines a React component called Gradient, which renders a gradient effect with customizable opacity.\n  Dependencies: \n  - cn: A utility function from \"@repo/ui/lib/utils\" for generating class names.\n\nFunctions:\n\n  Gradient:\n  - Purpose: Renders a gradient effect with customizable opacity.\n  - Arguments:\n    - opacity (number): The opacity level of the gradient effect (default is 50).\n  - Returns:\n    - JSX.Element: The rendered gradient effect.\n  - Exceptions:\n    - None\n\nThis file contains a single function component called Gradient, which takes an optional opacity prop and renders a gradient effect with the specified opacity level. The component uses the cn utility function to generate class names for styling the gradient effect.",
    "apps/web/app/(landing)/Features/generating.tsx": "Module Overview:\n\n  Purpose: This module defines a component called Generating that displays a loading message with a loader icon while searching for information.\n\n  Dependencies: \n  - lucide-react: A library for displaying icons in React components.\n\nFunctions:\n\n  Generating:\n  - Purpose: Renders a loading message with a loader icon.\n  - Arguments:\n    - className (string): Optional class name for styling the component.\n  - Returns:\n    - JSX element: A div element with the loading message and loader icon.\n  - Exceptions:\n    - None\n\nClasses:\n\n  None",
    "apps/web/app/(landing)/Features/index.tsx": "Module Overview:\n\nPurpose: The Services module is responsible for rendering a section of the application that showcases the features and benefits of the product. It includes visual elements, text content, and interactive components to engage users.\n\nDependencies:\n- lucide-react: Provides icons used in the component.\n- \"./features\": Imports the Gradient component used in the module.\n- \"./generating\": Imports the Generating component used in the module.\n- \"next/image\": Allows for optimized image loading and rendering.\n- \"../CardPatterns/AnimatedBeamWithOutput\": Imports the AnimatedBeamShow component used in the module.\n\nFunctions:\n- Services: Renders the Services section of the application, displaying information about the product features, team mission, integrations, privacy measures, and open-source availability. It includes images, text content, lists, and interactive elements.\n\nAttributes:\n- supermemoryPoints: An array containing key points about the product's features and benefits.\n\nOverall, the Services module serves as a visually engaging and informative section of the application that highlights the product's key features, mission, integrations, privacy focus, and open-source nature.",
    "apps/web/app/(landing)/GridPatterns/PlusGrid.tsx": "Module Overview:\n\nPurpose: The BackgroundPlus module provides a React functional component for rendering a background pattern with a plus sign overlay. It allows customization of the plus sign color, size, background color, and fade effect.\n\nDependencies: \n- React: JavaScript library for building user interfaces.\n\nFunctions:\n\nBackgroundPlus:\n- Purpose: Renders a background pattern with a plus sign overlay.\n- Arguments:\n  - plusColor (string): The color of the plus sign. Default is \"#6b6b6b\".\n  - backgroundColor (string): The background color. Default is \"transparent\".\n  - plusSize (number): The size of the plus sign. Default is 60.\n  - className (string): Additional CSS class names.\n  - fade (boolean): Whether to apply a fade effect. Default is true.\n  - style (React.CSSProperties): Additional inline styles.\n  - props (object): Additional props.\n- Returns:\n  - React element: A div element with the specified background pattern and plus sign overlay.\n- Exceptions:\n  - None\n\nOverall, the BackgroundPlus module provides a flexible and customizable way to add a visually appealing background pattern with a plus sign overlay to a React application.",
    "apps/web/app/(landing)/Headers/Navbar.tsx": "Module Overview:\n\nPurpose: The SlideNavTabs file is responsible for rendering a fixed navigation bar with slide tabs for easy navigation within the application.\nDependencies:\n- React: A JavaScript library for building user interfaces.\n- framer-motion: A library for creating animations in React components.\n- next/image: A component for optimizing images in Next.js applications.\n- next/link: A component for client-side navigation in Next.js.\n- lucide-react: A library of icons for React components.\n\nFunctions:\n\nSlideNavTabs:\n- Purpose: Renders a fixed navigation bar with slide tabs.\n- Returns: JSX element containing the navigation bar.\n\nSlideTabs:\n- Purpose: Renders the slide tabs within the navigation bar.\n- Attributes:\n  - position (object): State object containing the position, width, and opacity of the tabs.\n- Returns: JSX element containing the slide tabs.\n\nTab:\n- Purpose: Represents an individual tab within the navigation bar.\n- Attributes:\n  - children (ReactNode): The content of the tab.\n  - setPosition (function): Callback function to update the position state.\n- Returns: JSX element representing the tab.\n\nCursor:\n- Purpose: Renders a cursor element for highlighting active tabs.\n- Arguments:\n  - position (object): Object containing the position, width, and opacity of the cursor.\n- Returns: JSX element representing the cursor.\n\nOverall, the SlideNavTabs file provides a user-friendly navigation experience with slide tabs and animations for seamless interaction within the application.",
    "apps/web/app/(landing)/Hero.tsx": "Module Overview:\n\nPurpose: The \"use client\" module is responsible for rendering the Hero component, which is a key part of the landing page for the application. It displays a visually appealing and informative section introducing the Supermemory platform to users.\n\nDependencies:\n- React: A JavaScript library for building user interfaces.\n- framer-motion: A library for creating animations in React components.\n- @repo/ui/components/icons: Custom icons used in the component.\n- EmailInput: A custom input component for email addresses.\n- linkArrow: A custom arrow component for links.\n- twitterLink: A custom Twitter link component.\n- ImageSliders: A component for displaying animated logos.\n- lucide-react: A library of icons for React components.\n- next/link: A library for client-side routing in Next.js applications.\n\nFunctions:\n\nHero():\n- Purpose: Renders the Hero component, which introduces the Supermemory platform to users.\n- Arguments: None\n- Returns: JSX elements representing the Hero component.\n- Exceptions: None\n\nOverall, the \"use client\" module plays a crucial role in presenting the Supermemory platform to users through the Hero component, utilizing various dependencies for styling and functionality.",
    "apps/web/app/(landing)/ImageSliders.tsx": "Summary for AnimatedLogoCloud.tsx:\n\nModule Overview:\n\nPurpose: The AnimatedLogoCloud module displays a cloud of animated logos for various apps, providing a visually appealing component for the application.\n\nDependencies: This module depends on the logos array, which contains information about the logos to be displayed.\n\nClasses:\n- No classes defined in this module.\n\nFunctions:\n- AnimatedLogoCloud: This function renders a cloud of animated logos for various apps.\n  - Purpose: Displays a visually appealing component with animated logos.\n  - Arguments: None.\n  - Returns: JSX element representing the animated logo cloud.\n  - Exceptions: None.\n\nOverall, the AnimatedLogoCloud module enhances the visual appeal of the application by showcasing animated logos for different apps in a cloud-like formation.",
    "apps/web/app/(landing)/Navbar.tsx": "File Summary: \"use client\"\n\nModule Overview:\n\n  Purpose: This file contains the Navbar component for the application, which includes navigation tabs and animations based on scroll position.\n  \n  Dependencies: \n  - \"@radix-ui/react-icons\": Library for using icons.\n  - \"next/image\": Library for optimizing images.\n  - \"next/link\": Library for creating links in Next.js.\n  - \"react\": Library for building user interfaces.\n  - \"framer-motion\": Library for creating animations.\n  - \"./Headers/Navbar\": Custom component for navigation tabs.\n\nClasses:\n- None\n\nFunctions:\n- NavbarContent(): Renders the SlideNavTabs component within a div.\n  - Purpose: Display navigation tabs.\n  - Arguments: None\n  - Returns: JSX element\n\n- Navbar(): Renders the Navbar component with animations based on scroll position.\n  - Purpose: Display the Navbar with animations.\n  - Arguments: None\n  - Returns: JSX element\n  - Exceptions: None\n\nOverall, this file provides the Navbar component with navigation tabs and animations for the application.",
    "apps/web/app/(landing)/RotatingIcons.tsx": "Module Overview:\n\nPurpose: The \"use client\" module is responsible for displaying rotating icons of various social media platforms and a logo on a webpage. It adds visual appeal and interactivity to the user interface.\n\nDependencies:\n- framer-motion: A library for creating animations in React components.\n- @repo/ui/components/icons: Custom icons for social media platforms.\n- next/image: A component for optimizing and displaying images in Next.js applications.\n\nFunctions:\n- RotatingIcons: A React functional component that displays rotating icons of social media platforms and a logo. It creates a visually appealing animation effect by rotating the icons continuously. The component also includes a heading and a paragraph for additional context.\n\nClasses:\nN/A\n\nOverall, the \"use client\" module enhances the user experience by adding dynamic and engaging visual elements to the webpage.",
    "apps/web/app/(landing)/Showcase.tsx": "Module Overview:\n\nPurpose: The \"use client\" module is responsible for showcasing the features of the Supermemory application, highlighting different use cases such as Ideation, Bookmarks, and Contacts. It provides a visual representation of these features through images and icons.\n\nDependencies:\n- react: A JavaScript library for building user interfaces.\n- next/image: A component for optimizing images in Next.js applications.\n- @headlessui/react: A library for building accessible UI components.\n- clsx: A utility for conditionally joining classNames together.\n- \"../../public/images\": Directory containing images used in the features section.\n\nClasses:\n- Feature:\n  - Purpose: Represents a specific feature of the Supermemory application.\n  - Attributes:\n    - name (React.ReactNode): The name of the feature.\n    - summary (string): A brief summary of the feature.\n    - description (string): Detailed description of the feature.\n    - image (ImageProps[\"src\"]): Source of the image representing the feature.\n    - icon (React.ComponentType): Icon component representing the feature.\n\nFunctions:\n- Feature:\n  - Purpose: Renders a feature component with the provided feature data.\n  - Arguments:\n    - feature (Feature): The feature object to render.\n    - isActive (boolean): Indicates if the feature is currently active.\n    - className (string): Additional CSS classes for styling.\n  - Returns: A React component representing the feature.\n\n- FeaturesMobile:\n  - Purpose: Renders the features section for mobile devices.\n  - Returns: A React component displaying features in a mobile-friendly layout.\n\n- FeaturesDesktop:\n  - Purpose: Renders the features section for desktop devices using tabs.\n  - Returns: A React component displaying features in a tabbed layout.\n\n- Showcases:\n  - Purpose: Renders the showcases section of the Supermemory application, showcasing different features.\n  - Returns: A React component displaying the showcases section.\n\n- Container:\n  - Purpose: A wrapper component for setting max-width and padding.\n  - Arguments:\n    - className (string): Additional CSS classes for styling.\n  - Returns: A div element with specified styling.\n\nOverall, the \"use client\" module is crucial for presenting the features of the Supermemory application in an engaging and informative way, catering to both mobile and desktop users.",
    "apps/web/app/(landing)/footer.tsx": "Module Overview:\n\nPurpose: The Footer module represents the footer component of the application, providing essential links for users to contact the company through email, Twitter, and GitHub.\n\nDependencies: \n- React: A JavaScript library for building user interfaces.\n- LinkArrow: A custom component for displaying arrow icons in links.\n\nFunctions:\n\nFooter():\n- Purpose: Renders the footer component with contact links.\n- Arguments: None\n- Returns: The rendered footer component.\n- Exceptions: None",
    "apps/web/app/(landing)/formSubmitAction.ts": "File Summary: use server\n\nModule Overview:\n\n  Purpose: This file contains a function for submitting an email form and handling rate limiting based on the client's IP address.\n  Dependencies: \n  - next/headers: Library for handling HTTP headers.\n  - fetch: Library for making HTTP requests.\n\nFunctions:\n\n  formSubmitAction(email: string, token: string) -> Promise<{ value: any, success: boolean }>: \n  - Purpose: Submits an email form and handles rate limiting based on the client's IP address.\n  - Arguments:\n    - email (string): The email address to be submitted.\n    - token (string): The token for authorization.\n  - Returns:\n    - Promise<{ value: any, success: boolean }>: An object containing the response value and success status.\n  - Exceptions:\n    - None\n\nNote: This file does not contain any classes.",
    "apps/web/app/(landing)/linkArrow.tsx": "Module Overview:\n\nPurpose: This module defines a functional component called LinkArrow that renders an SVG arrow icon with customizable styling.\n\nDependencies: \n- React: The React library for building user interfaces.\n\nFunctions:\n\nLinkArrow:\n- Purpose: Renders an SVG arrow icon with customizable styling.\n- Arguments:\n  - classname (string): Optional class name for styling.\n  - stroke (string): Optional stroke color for the arrow.\n- Returns: \n  - JSX element: The SVG arrow icon.\n- Exceptions: None\n\nOverall, this file provides a reusable component for displaying arrow icons in React applications.",
    "apps/web/app/(landing)/page.tsx": "Page Title: Home.js\n\nModule Overview:\n\n  Purpose: This module represents the home page of the application, displaying various sections and components to the user.\n  Dependencies: \n  - RotatingIcons: Component for displaying rotating icons.\n  - Hero: Component for the hero section of the page.\n  - Navbar: Component for the navigation bar.\n  - Cta: Component for the call-to-action section.\n  - Toaster: Component for displaying toast notifications.\n  - Features: Component for displaying features section.\n  - Footer: Component for the footer section.\n  - auth: Function for authenticating the user.\n  - redirect: Function for redirecting the user to a different page.\n  - Services: Component for displaying services section.\n  - Showcases: Component for showcasing content.\n  - BackgroundPlus: Component for displaying a grid pattern background.\n  \nClasses: N/A\n\nFunctions:\n\n  Home():\n  - Purpose: Asynchronous function representing the home page of the application.\n  - Arguments: None\n  - Returns: JSX elements representing the home page layout.\n  - Exceptions: None\n\nOverall, the Home.js file is responsible for rendering the home page of the application, including various sections and components such as the hero section, navigation bar, call-to-action section, features section, and more. It also includes authentication logic and functions for redirecting users.",
    "apps/web/app/(landing)/twitterLink.tsx": "Module Overview:\n\nPurpose: The \"use client\" file is responsible for rendering a Twitter follow button with a hover effect on a webpage. It provides a visually appealing way for users to follow a Twitter account.\n\nDependencies:\n- React: A JavaScript library for building user interfaces.\n- framer-motion: A library for creating animations in React.\n- @repo/ui/lib/utils: Utility functions for the UI components.\n- @repo/ui/components/icons: Icons component for UI elements.\n- linkArrow: A custom component for displaying a link arrow.\n\nFunctions:\n\nTwitterBorder():\n- Purpose: Renders a Twitter follow button with a hover effect.\n- Arguments: None\n- Returns: JSX element representing the Twitter follow button.\n- Exceptions: None\n\nHoverBorderGradient():\n- Purpose: Renders a container with a gradient effect that changes direction on hover.\n- Arguments:\n  - children: The content to be displayed inside the container.\n  - containerClassName: Additional class name for the container.\n  - className: Additional class name for the inner content.\n  - as: The HTML tag to be used for the container.\n  - duration: Duration of the gradient animation.\n  - clockwise: Boolean indicating the direction of rotation.\n- Returns: JSX element representing the container with the gradient effect.\n- Exceptions: None\n\nOverall, the \"use client\" file provides components for creating visually appealing UI elements with interactive hover effects, enhancing the user experience on the webpage.",
    "apps/web/app/(quicklinks)/extension/route.ts": "Page Title: next_navigation.js\n\nModule Overview:\n\n  Purpose: This module handles navigation within the application using the Next.js framework. It specifically includes a function to perform a redirect to a specified URL.\n\n  Dependencies: \n  - next/navigation: The Next.js navigation module for handling routing within the application.\n\nFunctions:\n\n  GET():\n  - Purpose: Performs a redirect to a specified URL.\n  - Arguments: None\n  - Returns: Redirects the user to the specified URL.\n  - Exceptions: None",
    "apps/web/app/(quicklinks)/ph/route.ts": "Page Title: next_navigation.js\n\nModule Overview:\n\n  Purpose: This module provides functionality for redirecting users to a specified URL using the Next.js framework.\n  \n  Dependencies: \n  - next/navigation: The module for handling navigation within the Next.js application.\n\nFunctions:\n\n  GET():\n  - Purpose: Redirects the user to the specified URL.\n  - Arguments: None\n  - Returns: None\n  - Exceptions: None",
    "apps/web/app/(thinkpad)/canvasStyles.css": "Page Title: tldraw.css\n\nModule Overview:\n\n  Purpose: This file contains styling rules for the TLDraw application, defining the visual appearance of various UI elements.\n  Dependencies: \n  - tldraw.css: This file imports styles from the tldraw.css file.\n\nClasses:\nThis file does not contain any classes.\n\nFunctions:\nThis file does not contain any functions.\n\nOverall, the tldraw.css file is responsible for defining the background colors, borders, and other visual styles for different components of the TLDraw application. It imports styles from the tldraw.css file and sets specific styling rules for elements such as panels, menus, buttons, dialogs, and the minimap.",
    "apps/web/app/(thinkpad)/layout.tsx": "Page Title: RootLayout.tsx\n\nModule Overview:\n\n  Purpose: This module defines the RootLayout component, which serves as the main layout for the application. It handles authentication, redirects users to the sign-in page if necessary, and renders the children components within a container with a fixed height.\n  \n  Dependencies: \n  - \"@/server/auth\": Module for handling authentication.\n  - \"./canvasStyles.css\": CSS file for styling the layout.\n  - \"next/navigation\": Module for handling navigation within the Next.js framework.\n  - \"@repo/ui/shadcn/sonner\": Module for displaying toast notifications.\n\nFunctions:\n\n  RootLayout:\n  - Purpose: Renders the main layout of the application, including the children components and a toast notification.\n  - Arguments:\n    - children (React.ReactNode): The components to be rendered within the layout.\n  - Returns:\n    - JSX.Element: The rendered layout.\n  - Exceptions:\n    - None\n\n  info:\n  - Purpose: Retrieves authentication information using the auth module.\n  - Arguments:\n    - None\n  - Returns:\n    - Promise<any>: The authentication information.\n  - Exceptions:\n    - None\n\n  redirect:\n  - Purpose: Redirects the user to a specified URL.\n  - Arguments:\n    - url (string): The URL to redirect to.\n  - Returns:\n    - void\n  - Exceptions:\n    - None\n\n  Toaster:\n  - Purpose: Renders a toast notification component.\n  - Arguments:\n    - None\n  - Returns:\n    - JSX.Element: The rendered toast notification.\n  - Exceptions:\n    - None",
    "apps/web/app/(thinkpad)/thinkpad/[id]/page.tsx": "Page Title: fetchers.ts\n\nModule Overview:\n\n  Purpose: This module provides functions for fetching data related to user canvases and handling page redirection.\n  \n  Dependencies: \n  - \"@/app/actions/fetchers\": Module for fetching user data.\n  - \"@/components/canvas/resizablelayout\": Component for displaying resizable layouts.\n  - \"next/navigation\": Library for handling page navigation.\n\nFunctions:\n\n  page({ params }: any) -> JSX.Element:\n  - Purpose: Checks if a canvas exists for the given ID, redirects to \"/thinkpad\" if it doesn't, and displays a resizable layout.\n  - Arguments:\n    - params (any): Parameters passed to the page.\n  - Returns:\n    - JSX.Element: The resizable layout component.\n  - Exceptions:\n    - None\n\nClasses:\n\n  None",
    "apps/web/app/(thinkpad)/thinkpad/image.tsx": "Page Title: ImageComponent.tsx\n\nModule Overview:\n\n  Purpose: The ImageComponent module is responsible for rendering an image component based on canvas data fetched from the server. It utilizes the TldrawImage component to display the image with specified properties.\n  \n  Dependencies: \n  - fetchers: Module for fetching canvas data from the server.\n  - canvas/custom_nodes/twittercard: Custom node utility for Twitter card shapes.\n  - canvas/custom_nodes/textcard: Custom node utility for text card shapes.\n  - react: Library for building user interfaces.\n  - tldraw: Library for drawing and manipulating images.\n\nClasses:\n\n  ImageComponent:\n  - Purpose: Represents the image component that displays the fetched canvas data.\n  - Attributes:\n    - id (string): The unique identifier of the image component.\n    - snapshot (any): The snapshot data fetched from the server.\n  - Methods:\n    - useEffect(): Asynchronous function to fetch canvas data and set the snapshot state.\n    - render(): Renders the TldrawImage component with specified properties based on the fetched snapshot data.\n\nFunctions: N/A\n\nOverall, the ImageComponent module serves as a crucial component for rendering images based on canvas data fetched from the server. It utilizes various dependencies and components to display the image with specific properties and shapes.",
    "apps/web/app/(thinkpad)/thinkpad/page.tsx": "Module Overview:\n\nPurpose: This file is responsible for rendering a page displaying a collection of ThinkPads. It fetches canvas data, allows users to create new canvas items, and displays existing canvas items.\n\nDependencies:\n- \"@/app/actions/doers\": Importing the createCanvas function.\n- \"@/app/actions/fetchers\": Importing the getCanvas function.\n- \"next/link\": Link component for client-side navigation.\n- \"react\": React library for building user interfaces.\n- \"./image\": ImageComponent for displaying images.\n- \"@/app/(dash)/menu\": Menu component for the dashboard.\n- \"@/app/(dash)/header/header\": Header component for the dashboard.\n- \"@/app/(landing)/GridPatterns/PlusGrid\": BackgroundPlus component for the landing page.\n\nFunctions:\n\npage():\n- Purpose: Renders the main page content with canvas data fetched from the server.\n- Returns: JSX element representing the page layout.\n\nBlurHeaderMenu():\n- Purpose: Renders a blurred header menu with a background pattern.\n- Returns: JSX element for the blurred header menu.\n\nCreateCanvas():\n- Purpose: Renders a form for creating a new canvas item.\n- Returns: JSX element for the create canvas form.\n\nCanvas(props: TcanvasInfo):\n- Purpose: Renders a canvas item with the provided title, description, and id.\n- Arguments:\n  - props (TcanvasInfo): Object containing title, description, and id of the canvas item.\n- Returns: JSX element for the canvas item.\n\nNote: The file also exports the page function as the default export.",
    "apps/web/app/actions/doers.ts": "File Summary: \"use server\"\n\nModule Overview:\n\nPurpose: This file contains server-side functions for user onboarding, space creation, memory management, and user interactions.\nDependencies:\n- next/cache\n- server/db\n- types\n- server/auth\n- react-tweet/api\n- @/lib/get-metadata\n- drizzle-orm\n- @/lib/constants\n- @repo/shared-types\n- @/server/encrypt\n- next/navigation\n- @repo/shared-types/utils\n- ../api/ensureAuth\n- @/lib/utils\n- @cloudflare/next-on-pages\n\nFunctions:\n\n1. completeOnboarding():\n   - Purpose: Marks a user as onboarded.\n   - Returns: ServerActionReturnType<boolean>\n   - Exceptions: Error message if user update fails.\n\n2. createSpace(input: string | FormData):\n   - Purpose: Creates a new space.\n   - Arguments: input (string | FormData)\n   - Returns: ServerActionReturnType<number>\n   - Exceptions: Error message if space creation fails.\n\n3. createMemory(content: string, likes: number, bookmarks: number):\n   - Purpose: Creates a new memory.\n   - Arguments: content (string), likes (number), bookmarks (number)\n   - Returns: ServerActionReturnType<number>\n   - Exceptions: Error message if memory creation fails.\n\n4. addLikeToMemory(memoryId: number):\n   - Purpose: Adds a like to a memory.\n   - Arguments: memoryId (number)\n   - Returns: ServerActionReturnType<boolean>\n   - Exceptions: Error message if like addition fails.\n\n5. addBookmarkToMemory(memoryId: number):\n   - Purpose: Adds a bookmark to a memory.\n   - Arguments: memoryId (number)\n   - Returns: ServerActionReturnType<boolean>\n   - Exceptions: Error message if bookmark addition fails.\n\nThis file handles user onboarding, space creation, memory management, and user interactions on the server side. It depends on various modules and libraries for its functionality.",
    "apps/web/app/actions/fetchers.ts": "File Summary: \"use server\"\n\nModule Overview:\n\nPurpose: This file contains server-side functions for handling user authentication, retrieving user data, managing chat threads, and accessing user memories and spaces.\nDependencies:\n- drizzle-orm: Library for database operations.\n- @repo/shared-types: Shared types for chat history.\n- zod: Library for data validation.\n- next/navigation: Library for client-side navigation.\n- next/headers: Library for handling HTTP headers.\n- \"@/lib/unfirlsite\": Custom library for fetching website metadata.\n\nFunctions:\n\n1. getUser():\n- Purpose: Retrieves user data based on authentication.\n- Returns: An object with success status and user data.\n- Exceptions: Redirects to \"/signin\" if user is not authenticated.\n\n2. getSpaces():\n- Purpose: Retrieves stored spaces for a user.\n- Returns: An object with success status and space data.\n- Exceptions: Redirects to \"/signin\" if user is not authenticated.\n\n3. getAllMemories(freeMemoriesOnly: boolean):\n- Purpose: Retrieves all memories or memories not in any space.\n- Arguments: freeMemoriesOnly (boolean) - Flag to filter memories.\n- Returns: An object with success status and memory data.\n- Exceptions: Redirects to \"/signin\" if user is not authenticated.\n\n4. getMemoriesInsideSpace(spaceId: number):\n- Purpose: Retrieves memories and spaces inside a specific space.\n- Arguments: spaceId (number) - ID of the space.\n- Returns: An object with success status and memory and space data.\n- Exceptions: Redirects to \"/signin\" if user is not authenticated.\n\n5. getAllUserMemoriesAndSpaces():\n- Purpose: Retrieves all memories and spaces for a user.\n- Returns: An object with success status and memory and space data.\n- Exceptions: Redirects to \"/signin\" if user is not authenticated.\n\n6. getFullChatThread(threadId: string):\n- Purpose: Retrieves full chat history for a specific thread.\n- Arguments: threadId (string) - ID of the chat thread.\n- Returns: An object with success status and chat history data.\n- Exceptions: Redirects to \"/signin\" if user is not authenticated.\n\n7. getChatHistory():\n- Purpose: Retrieves chat history for a user.\n- Returns: An object with success status and chat thread data.\n- Exceptions: Redirects to \"/signin\" if user is not authenticated.\n\n8. getSessionAuthToken():\n- Purpose: Retrieves the session token for authentication.\n- Returns: An object with success status and session token data.\n\n9. getNoteFromId(noteId: string):\n- Purpose: Retrieves a note based on the note ID.\n- Arguments: noteId (string) - ID of the note.\n- Returns: An object with success status and note data.\n- Exceptions: Redirects to \"/signin\" if user is not authenticated.\n\n10. getCanvas():\n- Purpose: Retrieves canvas data for a user.\n- Returns: An object with success status and canvas data.\n- Exceptions: Redirects to \"/signin\" if user is not authenticated.\n\n11. userHasCanvas(canvasId: string):\n- Purpose: Checks if a user has a specific canvas.\n- Arguments: canvasId (string) - ID of the canvas.\n- Returns: An object with success status.\n- Exceptions: Redirects to \"/signin\" if user is not authenticated.\n\n12. getCanvasData(canvasId: string):\n- Purpose: Retrieves data for a specific canvas.\n- Arguments: canvasId (string) - ID of the canvas.\n- Returns: Canvas data or an empty object.\n\n13. unfirlSite(website: string):\n- Purpose: Fetches metadata for a website.\n- Arguments: website (string) - URL of the website.\n- Returns: Website metadata.\n\nThis file contains various functions for handling user data, chat history, and canvas operations on the server side. It relies on authentication, database queries, and external libraries for functionality.",
    "apps/web/app/actions/types.ts": "File Summary: types.ts\n\nModule Overview:\n\n  Purpose: This module defines custom types used throughout the application, including the Space type and ServerActionReturnType type.\n  \n  Dependencies: \n  - None\n\nTypes:\n\n  Space:\n  - Purpose: Represents a space entity with specific attributes.\n  - Attributes:\n    - id (number): The unique identifier of the space.\n    - name (string): The name of the space.\n    - numberOfMemories (optional number): The number of memories associated with the space.\n    - createdAt (optional string): The creation date of the space.\n\n  ServerActionReturnType<T>:\n  - Purpose: Represents the return type of server actions, including error handling and data retrieval.\n  - Attributes:\n    - error (optional string): An error message if the action fails.\n    - success (boolean): Indicates if the action was successful.\n    - data (optional T): The data returned by the action.\n\n  Functions:\n  - None\n\nThis file serves as a central location for defining custom types used in various parts of the application, providing a clear structure and understanding of the data being manipulated.",
    "apps/web/app/api/[...nextauth]/route.ts": "Page Title: auth.js\n\nModule Overview:\n\n  Purpose: This module handles authentication functionalities for the application, including handling GET and POST requests related to user authentication.\n  \n  Dependencies: \n  - server/auth: Module for handling server-side authentication logic.\n\nClasses:\n- No classes defined in this module.\n\nFunctions:\n\n  GET:\n  - Purpose: Handles GET requests for user authentication.\n  - Arguments:\n    - None\n  - Returns:\n    - None\n  - Exceptions:\n    - None\n\n  POST:\n  - Purpose: Handles POST requests for user authentication.\n  - Arguments:\n    - None\n  - Returns:\n    - None\n  - Exceptions:\n    - None\n\nConstants:\n- runtime: \"edge\"\n- Purpose: Specifies the runtime environment for the authentication module.",
    "apps/web/app/api/canvas/route.ts": "Page Title: api_routes.ts\n\nModule Overview:\n\n  Purpose: This module defines two functions, GET and POST, that handle HTTP requests and return responses with JSON data. The GET function retrieves a specific parameter from the request URL and returns it as a JSON string. The POST function parses the request body as JSON, retrieves a parameter from the request URL, and returns a JSON object containing the request body and the parameter value.\n\n  Dependencies: \n  - Request: The Request object from the Fetch API for handling HTTP requests.\n  - Response: The Response object from the Fetch API for sending HTTP responses.\n\nFunctions:\n\n  GET(req: Request) -> Response:\n  - Purpose: Retrieves a specific parameter from the request URL and returns it as a JSON string.\n  - Arguments:\n    - req (Request): The HTTP request object.\n  - Returns:\n    - Response: A JSON response containing the retrieved parameter value.\n  - Exceptions:\n    - None\n\n  POST(req: Request) -> Response:\n  - Purpose: Parses the request body as JSON, retrieves a parameter from the request URL, and returns a JSON object containing the request body and the parameter value.\n  - Arguments:\n    - req (Request): The HTTP request object.\n  - Returns:\n    - Response: A JSON response containing the request body and the retrieved parameter value.\n  - Exceptions:\n    - None",
    "apps/web/app/api/canvasai/route.ts": "Page Title: runtime.ts\n\nModule Overview:\n\n  Purpose: This module defines the runtime environment for the application and handles POST requests related to chat functionality.\n  Dependencies: \n  - next/server: Provides functionality for handling server-side logic in Next.js applications.\n  - ensureAuth: Module for ensuring user authentication before processing requests.\n  - @repo/shared-types: Shared types used across the application.\n\nFunctions:\n\n  POST(req: NextRequest) -> Response:\n  - Purpose: Handles POST requests for chat functionality, authenticates the user, and fetches data from the backend.\n  - Arguments:\n    - req (NextRequest): The request object containing user information.\n  - Returns:\n    - Response: The response object containing the fetched data.\n  - Exceptions:\n    - Returns a 401 status response if the user is not authenticated.\n    - Throws an error if there is an issue with fetching or processing the data.",
    "apps/web/app/api/chat/history/route.ts": "Page Title: nextRequestHandler.ts\n\nModule Overview:\n\n  Purpose: This module handles incoming requests and processes them to retrieve chat history data for a specific user.\n  Dependencies: \n  - next/server: Provides server-side functionality for handling requests.\n  - ensureAuth: Ensures that the request is authenticated before processing.\n  - drizzle-orm: A library for interacting with the database.\n  - \"@/server/db\": Module for interacting with the database.\n  - \"@/server/db/schema\": Defines the schema for the database tables.\n\nFunctions:\n\n  GET(req: NextRequest) -> Response:\n  - Purpose: Retrieves chat history data for the authenticated user.\n  - Arguments:\n    - req (NextRequest): The incoming request object.\n  - Returns:\n    - Response: A response object containing the chat history data.\n  - Exceptions:\n    - If the user is not authenticated, a 401 Unauthorized response is returned.\n    - If the BACKEND_SECURITY_KEY environment variable is missing, a 500 Internal Server Error response is returned.\n    - If there is an error querying the database, a 400 Bad Request response is returned.\n\nAttributes:\n- runtime (string): Specifies that the runtime environment is \"edge\".\n\nNote: This file primarily focuses on handling GET requests to retrieve chat history data for authenticated users. It ensures authentication, checks for environment variables, queries the database for chat history data, and returns the data in a response object.",
    "apps/web/app/api/chat/route.ts": "File Summary: chatApi.ts\n\nModule Overview:\n\n  Purpose: This module handles API requests related to chat history and sources, including authentication, rate limiting, and data validation.\n  Dependencies: \n  - next/server: For handling Next.js server requests.\n  - @repo/shared-types: Shared types used in the application.\n  - ensureAuth: Function for ensuring user authentication.\n  - zod: Library for data validation.\n  - drizzle-orm: Library for SQL query building.\n  - path: Node.js module for working with file paths.\n  - \"@/server/db\": Database module for interacting with the database.\n  - \"@/server/db/schema\": Database schema for chat history and threads.\n\nFunctions:\n\n  POST(req: NextRequest) -> Response:\n  - Purpose: Handles POST requests to the chat API, including authentication, rate limiting, data validation, and API calls.\n  - Arguments:\n    - req (NextRequest): The Next.js request object.\n  - Returns:\n    - Response: The response object for the API request.\n  - Exceptions: None\n\nNote: This file contains a single function, POST, which handles the logic for processing POST requests to the chat API. The function includes authentication checks, rate limiting, data validation, and API calls to the backend server.",
    "apps/web/app/api/editorai/route.ts": "File Summary: api/editorai.ts\n\nModule Overview:\n\n  Purpose: This file serves as the backend API endpoint for the EditorAI functionality in the application.\n  Dependencies: \n  - next/server: Import of NextRequest for handling server requests.\n  - ensureAuth: Import of the ensureAuth function for authentication purposes.\n\nFunctions:\n\n  POST(request: NextRequest) -> Response:\n  - Purpose: Handles POST requests to the EditorAI API endpoint.\n  - Arguments:\n    - request (NextRequest): The request object containing the context and request data.\n  - Returns:\n    - Response: The response object containing the result of the API call.\n  - Exceptions:\n    - Error: If there is an error during the API call.\n\nAdditional Notes:\n- The runtime constant is set to \"edge\" in this file.\n- The ensureAuth function is commented out for development purposes.\n- The API endpoint fetches data from the backend based on the context and request parameters.\n- Error handling is included for potential issues during the API call.",
    "apps/web/app/api/ensureAuth.ts": "File Summary: ensureAuth.ts\n\nModule Overview:\n\n  Purpose: This module provides a helper function to protect routes by ensuring user authentication.\n  Dependencies: \n  - next/server: Importing NextRequest from the next/server module.\n  - server/db: Importing db, accounts, sessions, and users from the server/db module.\n  - drizzle-orm: Importing the eq function from the drizzle-orm library.\n\nFunctions:\n\n  ensureAuth(req: NextRequest) -> { user: User, session: Session } | undefined:\n  - Purpose: Protects routes by ensuring user authentication and fetching user data.\n  - Arguments:\n    - req (NextRequest): The request object containing user authentication data.\n  - Returns:\n    - { user: User, session: Session } | undefined: An object containing user and session data if authentication is successful, otherwise undefined.\n  - Exceptions: None\n\nThis file contains the ensureAuth function, which is a helper function to protect routes by ensuring user authentication. It checks for a valid token, fetches user data, and creates a new user if necessary. The function returns user and session data if authentication is successful, otherwise it returns undefined.",
    "apps/web/app/api/getCount/route.ts": "Page Title: content_stats.ts\n\nModule Overview:\n\n  Purpose: This module provides functionality for retrieving statistics related to stored content, such as tweet counts and page counts, based on user authentication.\n  \n  Dependencies: \n  - drizzle-orm: A library for building SQL queries.\n  - next/server: A library for server-side rendering with Next.js.\n  - \"@/server/db\": Module containing database connection and schema definitions.\n  - \"../ensureAuth\": Module for ensuring user authentication.\n\nFunctions:\n\n  GET(req: NextRequest) -> NextResponse:\n  - Purpose: Retrieves tweet counts, page counts, and user information based on the authenticated user.\n  - Arguments:\n    - req (NextRequest): The request object containing user authentication information.\n  - Returns:\n    - NextResponse: A JSON response containing tweet counts, page counts, and user information.\n  - Exceptions:\n    - Response: If the user is unauthorized (status code 401).\n\nAttributes:\n  - runtime: A constant indicating that the module runs on the edge.\n  \n  - db: The database connection object.\n  \nMethods:\n  - No classes defined in this module.",
    "apps/web/app/api/hello/route.ts": "Module Overview:\n\n  Purpose: This file defines a function that handles GET requests in the edge runtime of the application. It returns a simple \"Hello World\" response and demonstrates how to use Bindings available in the application.\n\n  Dependencies: \n  - next/server: Import of NextRequest type for handling Next.js server requests.\n  - @cloudflare/next-on-pages: Import of getRequestContext function for accessing environment variables.\n\nFunctions:\n\n  GET(request: NextRequest) -> Response:\n  - Purpose: Handles GET requests and returns a response with \"Hello World\" text. Demonstrates the usage of Bindings in the edge runtime.\n  - Arguments:\n    - request (NextRequest): The incoming request object.\n  - Returns:\n    - Response: A response object with the \"Hello World\" text.\n  - Exceptions:\n    - None",
    "apps/web/app/api/me/route.ts": "File Summary: runtime.ts\n\nModule Overview:\n\n  Purpose: This module defines the runtime environment for the application, specifically targeting the edge environment.\n  Dependencies: \n  - db: The database module for interacting with the database.\n  - drizzle-orm: A library for object-relational mapping.\n  - next/server: The Next.js server module for handling requests and responses.\n\nFunctions:\n\n  GET(req: NextRequest) -> Response:\n  - Purpose: Retrieves session and user information based on the provided request.\n  - Arguments:\n    - req (NextRequest): The request object containing cookies and headers.\n  - Returns:\n    - Response: A response object containing session and user data.\n  - Exceptions:\n    - If session or user data is not found, a 404 status response is returned.\n\nOverall, this file sets the runtime environment to \"edge\" and provides a GET function to retrieve session and user information based on the request. It relies on the database module for querying session and user data and the Next.js server module for handling responses.",
    "apps/web/app/api/memories/route.ts": "File Summary: runtime.ts\n\nModule Overview:\n\n  Purpose: This module defines the runtime environment for the application, specifically for the edge environment.\n  Dependencies: \n  - next/server: Importing NextRequest from the next/server library.\n  - \"@/server/db\": Importing the db object from the server/db module.\n  - drizzle-orm: Importing the eq function from the drizzle-orm library.\n  - \"@/server/db/schema\": Importing chatThreads, contentToSpace, storedContent, and users from the server/db/schema module.\n  - \"../ensureAuth\": Importing the ensureAuth function from the ensureAuth module.\n\nFunctions:\n\n  GET(req: NextRequest) -> Response:\n  - Purpose: Handles GET requests, authenticates the session, and retrieves data based on the request parameters.\n  - Arguments:\n    - req (NextRequest): The request object containing information about the request.\n  - Returns:\n    - Response: A response object containing the requested data or an error message.\n  - Exceptions:\n    - Returns a 401 status code if the session is unauthorized.\n    - Returns a 500 status code if the BACKEND_SECURITY_KEY is missing.\n    - Returns a 400 status code if there is an error processing the request.\n\nOverall, the runtime.ts file manages the runtime environment for the application, handles GET requests, authenticates sessions, and retrieves data based on the request parameters. It depends on various modules and libraries for its functionality.",
    "apps/web/app/api/spaces/route.ts": "File Summary: server/api/spaces.ts\n\nModule Overview:\n\n  Purpose: This module handles API requests related to spaces, including retrieving, creating, updating, and deleting spaces.\n  Dependencies:\n  - db: Database module for interacting with the database.\n  - space: Schema module defining the structure of a space.\n  - drizzle-orm: Library for querying the database.\n  - next/server: Library for handling server-side logic in Next.js applications.\n  - ensureAuth: Function for ensuring user authentication.\n  - zod: Library for data validation.\n\nFunctions:\n\n  GET(req: NextRequest) -> NextResponse:\n  - Purpose: Retrieves spaces associated with the authenticated user.\n  - Arguments:\n    - req (NextRequest): The incoming request object.\n  - Returns:\n    - NextResponse: JSON response containing the list of spaces.\n  - Exceptions:\n    - Returns a 401 Unauthorized response if the user is not authenticated.\n\n  POST(req: NextRequest) -> Response:\n  - Purpose: Creates a new space based on the provided input data.\n  - Arguments:\n    - req (NextRequest): The incoming request object.\n  - Returns:\n    - Response: JSON response indicating the success or failure of the operation.\n  - Exceptions:\n    - Returns a 401 Unauthorized response if the user is not authenticated.\n    - Returns a 400 Bad Request response if the input data is invalid.\n\n  DELETE(req: NextRequest) -> Response:\n  - Purpose: Deletes a space based on the provided space id.\n  - Arguments:\n    - req (NextRequest): The incoming request object.\n  - Returns:\n    - Response: JSON response indicating the success or failure of the operation.\n  - Exceptions:\n    - Returns a 401 Unauthorized response if the user is not authenticated.\n    - Returns a 400 Bad Request response if the space id is missing or invalid.\n\nOverall, this file provides API endpoints for managing spaces in the application, including retrieving, creating, and deleting spaces. It relies on the database module, schema definitions, data validation, and authentication logic to perform these operations effectively.",
    "apps/web/app/api/store/friend/route.ts": "Module Overview:\n\n  Purpose: This module handles the POST request for creating a new friend entry in the application.\n  Dependencies: \n  - next/server: Provides server-side functionality for handling Next.js requests.\n  - ../helper: Contains helper functions for creating memory entries from API data.\n\nFunctions:\n\n  POST(req: NextRequest) -> Response:\n  - Purpose: Handles the POST request to create a new friend entry.\n  - Arguments:\n    - req (NextRequest): The Next.js request object.\n  - Returns:\n    - Response: A response object indicating the status of the request.\n  - Exceptions:\n    - None\n\nClasses:\n\n  FriendData:\n  - Purpose: Represents the data structure for a friend entry.\n  - Attributes:\n    - id (string): The unique identifier of the friend entry.\n    - created_at (string): The timestamp of when the friend entry was created.\n    - transcript (string): The transcript of the friend entry.\n    - structured (object): Contains structured data about the friend entry.\n      - title (string): The title of the friend entry.\n      - overview (string): An overview of the friend entry.\n      - action_items (array): An array of action items for the friend entry.\n        - description (string): The description of each action item.\n\n  createMemoryFromAPI(data: object) -> void:\n  - Purpose: Creates a memory entry from API data.\n  - Arguments:\n    - data (object): The data object containing information for creating the memory entry.\n      - title (string): The title of the memory entry.\n      - description (string): The description of the memory entry.\n      - pageContent (string): The content of the memory entry.\n      - spaces (array): An array of spaces associated with the memory entry.\n      - type (string): The type of memory entry.\n      - url (string): The URL associated with the memory entry.\n    - userId (string): The user ID associated with the memory entry.\n  - Returns:\n    - None\n  - Exceptions:\n    - None\n\nOverall, this file handles the creation of a new friend entry in the application by processing the POST request, extracting the necessary data, and creating a memory entry from the API data.",
    "apps/web/app/api/store/helper.ts": "Module Overview:\n\nPurpose: The createMemoryFromAPI module is responsible for creating a new memory entry from API data and saving it to the database. It also handles the validation of input data and the creation of relationships between the memory entry and associated spaces.\n\nDependencies:\n- zod: A library for data validation.\n- drizzle-orm: A library for building SQL queries.\n- \"@/server/db\": Module for interacting with the database.\n- \"@/lib/constants\": Module containing application constants.\n- \"@/app/actions/doers\": Module for handling actions related to user limits.\n- \"@repo/shared-types\": Shared types used across the repository.\n\nFunctions:\n\ncreateMemoryFromAPI:\n- Purpose: Creates a new memory entry from API data and saves it to the database.\n- Arguments:\n  - data (AddFromAPIType): The data object containing information about the memory entry.\n  - userId (string): The ID of the user creating the memory entry.\n- Returns:\n  - Object: An object containing the success status, data, and error message if applicable.\n- Exceptions:\n  - Throws an error if there are issues with saving to the database or if the input data is invalid.\n\nOverall, the createMemoryFromAPI module plays a crucial role in handling the creation of memory entries from API data and ensuring the data is properly validated and stored in the database.",
    "apps/web/app/api/store/route.ts": "File Summary: runtime.ts\n\nModule Overview:\n\n  Purpose: This file defines a runtime environment for handling POST requests, ensuring authentication, and processing data from an API.\n  Dependencies: \n  - next/server: Provides the NextRequest type for handling server-side requests.\n  - @repo/shared-types: Contains the addFromAPIType function for parsing API data.\n  - ensureAuth: Module for ensuring user authentication.\n  - @repo/shared-types/utils: Includes the getRawTweet function for processing raw tweet data.\n  - helper: Module for creating memory from API data.\n\nFunctions:\n\n  POST(req: NextRequest) -> Response:\n  - Purpose: Handles POST requests, authenticates the user, processes API data, and saves the document.\n  - Arguments:\n    - req (NextRequest): The request object containing the data to be processed.\n  - Returns:\n    - Response: The response object with the status and message indicating the success or failure of the request.\n  - Exceptions:\n    - Returns 401 status if the user is unauthorized.\n    - Returns 500 status if the BACKEND_SECURITY_KEY is missing.\n    - Returns 400 status if the request is invalid or data parsing fails.\n    - Returns 501 status if there is an error saving the document.\n\nNote: The runtime constant is set to \"edge\" in this file.",
    "apps/web/app/api/telegram/route.ts": "Page Title: telegram_bot.ts\n\nModule Overview:\n\n  Purpose: This module implements a Telegram bot using the Grammy library to interact with users and provide assistance in remembering things better.\n  \n  Dependencies: \n  - db: The database module for querying and storing user information.\n  - schema: Defines the schema for the database tables.\n  - encrypt: Provides encryption functionality for user data.\n  - drizzle-orm: Library for querying the database.\n  - Grammy: Library for creating Telegram bots and handling user interactions.\n\nClasses:\n\n  Bot:\n  - Purpose: Represents the Telegram bot instance.\n  - Attributes:\n    - token (string): The Telegram bot token used for authentication.\n  - Methods:\n    - command(command: string, callback: Function) -> void: Defines a command handler for the bot.\n          - Args:\n            - command (string): The command to handle.\n            - callback (Function): The function to execute when the command is received.\n    - on(event: string, callback: Function) -> void: Defines an event handler for the bot.\n          - Args:\n            - event (string): The event to handle.\n            - callback (Function): The function to execute when the event occurs.\n\nFunctions:\n\n  POST:\n  - Purpose: Handles incoming webhook requests from the bot.\n  - Arguments:\n    - bot (Bot): The Telegram bot instance.\n    - \"std/http\" (string): The type of webhook request.\n    - Returns:\n       - None\n\n  GET:\n  - Purpose: Handles incoming GET requests.\n  - Arguments:\n    - None\n    - Returns:\n       - Response: A response object with status code 200.\n\nThe file initializes the Telegram bot, defines command and event handlers, interacts with the database to retrieve user information, and communicates with an external backend API to process user requests. It also handles message responses and content storage based on user interactions.",
    "apps/web/app/api/upload_image/route.ts": "File Summary: putFile.ts\n\nModule Overview:\n\n  Purpose: This file handles the PUT request for uploading files to an S3 bucket using AWS SDK.\n  Dependencies: \n  - @aws-sdk/client-s3: Provides the S3Client and PutObjectCommand classes for interacting with Amazon S3.\n  - @aws-sdk/s3-request-presigner: Contains the getSignedUrl function for generating pre-signed URLs.\n  - next/server: Imports the NextRequest type for handling Next.js server requests.\n  - ../ensureAuth: Imports the ensureAuth function for ensuring user authentication.\n\nFunctions:\n\n  PUT(request: NextRequest) -> Response:\n  - Purpose: Handles the PUT request to upload a file to the specified S3 bucket.\n  - Arguments:\n    - request (NextRequest): The incoming request object.\n  - Returns:\n    - Response: A response object containing the pre-signed URL for uploading the file.\n  - Exceptions:\n    - Returns a 401 Unauthorized response if authentication fails.\n    - Returns a 400 Bad Request response if the filename is missing.\n    - Returns a 500 Internal Server Error response if required environment variables are missing.\n\nClasses: N/A\n\nOverall, this file is responsible for authenticating the user, generating a pre-signed URL for uploading a file to an S3 bucket, and handling various error scenarios related to missing environment variables or authentication failures.",
    "apps/web/app/global-error.tsx": "Page Title: use client\n\nModule Overview:\n\n  Purpose: This module handles global error handling within the application by capturing exceptions and rendering a generic error message using the Next.js error page component.\n  \n  Dependencies: \n  - @sentry/nextjs: Library for error tracking and monitoring.\n  - next/error: Next.js error page component for rendering error messages.\n  - react: Library for building user interfaces.\n\nFunctions:\n\n  GlobalError:\n  - Purpose: A functional component that captures exceptions and renders a generic error message.\n  - Arguments:\n    - error (Error & { digest?: string }): The error object with an optional digest property.\n  - Returns:\n    - HTML element: The error message rendered within an HTML body.\n  - Exceptions:\n    - None\n\nNote: The file primarily focuses on error handling and rendering a generic error message, making it essential for maintaining a smooth user experience in case of unexpected errors.",
    "apps/web/app/layout.tsx": "Module Overview:\n\nPurpose: This file is responsible for defining the global styles and metadata for the Supermemory application. It also includes the RootLayout component that wraps the application content.\n\nDependencies:\n- \"@repo/tailwind-config/globals.css\": Global styles for the application.\n- \"next\": Next.js metadata for the page.\n- \"@repo/ui/lib/utils\": Utility functions for the UI.\n- \"@repo/ui/shadcn/toaster\": Toaster component for displaying notifications.\n\nClasses:\nN/A\n\nFunctions:\nN/A\n\nRootLayout Component:\n- Purpose: The RootLayout component serves as the top-level layout for the application, providing the basic structure and styling for the content.\n- Arguments:\n  - children (React.ReactNode): The child components to be rendered within the layout.\n- Returns: JSX.Element\n- Exceptions: N/A\n\nOverall, this file sets up the global styles, metadata, and layout structure for the Supermemory application, ensuring a consistent look and feel across the entire application.",
    "apps/web/app/ref/page.tsx": "Page Title: Page.tsx\n\nModule Overview:\n\n  Purpose: This module represents a page component in the Cloudflare Next Saas Starter application. It includes authentication, database operations, theming, and user interface elements.\n  \n  Dependencies: \n  - @repo/ui/shadcn/button: Button component for UI.\n  - \"../../server/auth\": Authentication functions.\n  - \"../../server/db\": Database operations.\n  - \"drizzle-orm\": ORM for database operations.\n  - \"../../server/db/schema\": Database schema.\n  - \"../../lib/get-theme-button\": Function for getting theme toggler.\n\nFunctions:\n\n  Page():\n  - Purpose: Renders the main page content with authentication, database information, theming, and user interface elements.\n  - Returns: JSX element representing the main page content.\n  - Exceptions: None\n\nAttributes:\n- runtime: A constant string \"edge\" indicating the runtime environment.\n\nMethods:\n- None\n\nOverall, this file serves as the main page component for the Cloudflare Next Saas Starter application, integrating authentication, database operations, theming, and UI elements.",
    "apps/web/cf-env.d.ts": "Page Title: process_env.ts\n\nModule Overview:\n\n  Purpose: This module extends the NodeJS ProcessEnv interface with additional environment variables related to various services and configurations used within the application.\n  \n  Dependencies: None\n\nClasses: None\n\nFunctions: None\n\nThis file declares and exports additional environment variables that are crucial for the application's configuration and functionality. These variables include Google OAuth client credentials, authentication secrets, backend URLs, Cloudflare account information, and other service-specific configurations. Developers can access and utilize these environment variables throughout the application to interact with external services and APIs securely.",
    "apps/web/components/canvas/custom_nodes/textcard.tsx": "Module Overview:\n\nPurpose: This file defines a class called textCardUtil that handles the rendering and editing of text card shapes in the application.\n\nDependencies:\n- BaseBoxShapeUtil: A utility class for handling base box shapes.\n- HTMLContainer: A component for rendering HTML containers.\n- TLBaseShape: A base shape class.\n- stopEventPropagation: A function for stopping event propagation.\n\nClasses:\n\ntextCardUtil:\n- Purpose: Represents a utility class for text card shapes.\n- Attributes:\n  - type (string): The type of shape, set to \"Textcard\".\n- Methods:\n  - getDefaultProps() -> ITextCardShape[\"props\"]: Returns the default properties for a text card shape.\n  - canEdit() -> boolean: Returns true to allow editing of the shape.\n  - component(s: ITextCardShape) -> JSX.Element: Renders the text card shape with editing functionality.\n  - indicator(shape: ITextCardShape) -> JSX.Element: Renders an indicator for the shape.\n\nFunctions:\nNone\n\nOverall, this file provides the necessary functionality for rendering and editing text card shapes within the application.",
    "apps/web/components/canvas/custom_nodes/twittercard.tsx": "File Summary: twitterCardUtil.ts\n\nModule Overview:\n\n  Purpose: This file defines a utility class for creating Twitter card shapes in the application. It provides methods for setting default properties, rendering the shape, and displaying an interactive Twitter post.\n  \n  Dependencies: \n  - tldraw: The tldraw library for handling shapes and components.\n  - HTMLContainer: A component for rendering HTML elements.\n  - TLBaseShape: A base shape class for defining shape properties.\n  - toDomPrecision: A utility function for converting values to DOM precision.\n\nClasses:\n\n  twitterCardUtil:\n  - Purpose: Represents a utility class for managing Twitter card shapes.\n  - Attributes: None\n  - Methods:\n    - getDefaultProps() -> ITwitterCardShape[\"props\"]: Returns the default properties for a Twitter card shape.\n    - component(s: ITwitterCardShape) -> JSX.Element: Renders the Twitter card shape with the specified properties.\n    - indicator(shape: ITwitterCardShape) -> JSX.Element: Renders an indicator for the Twitter card shape.\n\nFunctions:\n\n  TwitterPost:\n  - Purpose: Renders an interactive Twitter post within an iframe.\n  - Arguments:\n    - isInteractive (boolean): Indicates if the post is interactive.\n    - width (number): The width of the post.\n    - height (number): The height of the post.\n    - url (string): The URL of the Twitter post.\n  - Returns: JSX.Element\n  - Exceptions: None\n\nOverall, this file provides the necessary utilities for creating and rendering Twitter card shapes within the application.",
    "apps/web/components/canvas/enabled.tsx": "Module Overview:\n\n  Purpose: This file defines a list of UI components that are used within the application for various functionalities such as menus, panels, and actions.\n\n  Dependencies: \n  - tldraw: The tldraw library for UI components.\n\nClasses:\nN/A\n\nFunctions:\nN/A\n\nOverall, this file serves as a central repository for defining UI components used throughout the application. Developers can refer to this file to understand the available components and their usage within the application.",
    "apps/web/components/canvas/resizablelayout.tsx": "File Summary: \"use client\"\n\nModule Overview:\n\n  Purpose: This file defines a ResizableLayout component that manages the layout of a panel group with resizable panels. It includes functionality for collapsing and expanding panels based on user interaction.\n  \n  Dependencies: \n  - react-resizable-panels: Library for creating resizable panels.\n  - next/image: Library for optimizing images in Next.js.\n  - @repo/ui/icons: Library for importing custom icons.\n  - lucide-react: Library for importing Lucide icons.\n  \nClasses:\nNone\n\nFunctions:\nNone\n\nOverall, the \"use client\" file provides a ResizableLayout component that allows for flexible panel resizing and management within the application.",
    "apps/web/components/canvas/savesnap.tsx": "Page Title: SaveStatus.tsx\n\nModule Overview:\n\n  Purpose: This module provides functionality for saving canvas data in the application.\n  Dependencies: \n  - react: A JavaScript library for building user interfaces.\n  - tldraw: A library for drawing and editing canvas elements.\n  - \"@/app/actions/doers\": Module containing the SaveCanvas function for saving canvas data.\n\nFunctions:\n\n  SaveStatus:\n  - Purpose: Renders a button component that displays the current save status and triggers the saving of canvas data.\n  - Arguments:\n    - id (string): The unique identifier of the canvas.\n  - Returns:\n    - JSX.Element: A button component displaying the save status.\n  - Exceptions:\n    - None\n\n  debouncedSave:\n  - Purpose: Debounces the saving of canvas data to prevent multiple save calls within a short time frame.\n  - Arguments:\n    - None\n  - Returns:\n    - None\n  - Exceptions:\n    - None\n\n  useEffect:\n  - Purpose: Listens for changes in the editor store and triggers the saving of canvas data.\n  - Arguments:\n    - None\n  - Returns:\n    - None\n  - Exceptions:\n    - None",
    "apps/web/components/canvas/sidepanel.tsx": "Module Overview:\n\nPurpose: The Sidepanel module is responsible for rendering a side panel component in the application. It allows users to search for and display content based on a search query.\n\nDependencies:\n- React: A JavaScript library for building user interfaces.\n- Heroicons: A set of icons for use in web projects.\n- Next.js: A React framework for building server-side rendered applications.\n- @repo/shared-types: A library for shared types used in the application.\n- Sonner: A library for displaying toast notifications.\n\nFunctions:\n\nSearch:\n- Purpose: Handles the search functionality by fetching data based on the search query and updating the content displayed in the side panel.\n- Arguments: setContent (function): A function to set the content of the side panel.\n- Returns: None\n- Exceptions: None\n\nClasses: None\n\nOverall, the Sidepanel module provides a user-friendly interface for searching and displaying content within the application's side panel. It utilizes various dependencies to enhance the user experience and functionality.",
    "apps/web/components/canvas/sidepanelcard.tsx": "Module Overview:\n\nPurpose: The Card module is responsible for rendering a card component that displays information such as title, content, and source. It also handles drag and drop functionality for the card.\n\nDependencies:\n- @heroicons/react/16/solid: Provides the GlobeAltIcon used in the Icon component.\n- lucide-react: Provides the TwitterIcon and TypeIcon used in the Icon component.\n- react: Provides the useState hook used in the Card component.\n- framer-motion: Provides the motion component used for animations in the Card component.\n- react-use-measure: Provides the useMeasure hook used to measure the size of the card.\n\nClasses:\n- None\n\nFunctions:\n- Card: Renders a card component with title, content, and optional source. Handles drag and drop functionality for the card.\n  - Arguments:\n    - type (CardType): The type of the card.\n    - title (string): The title of the card.\n    - content (string): The content of the card.\n    - source (string, optional): The source of the card.\n  - Returns: JSX element representing the card component.\n  - Exceptions: None\n\n- Icon: Renders an icon based on the type of the card.\n  - Arguments:\n    - type (CardType): The type of the card.\n  - Returns: JSX element representing the icon.\n  - Exceptions: None\n\nOverall, the Card module provides a reusable card component with drag and drop functionality, making it easy to display and interact with information in a visually appealing way.",
    "apps/web/components/canvas/tldrawComponent.tsx": "File Summary: TldrawComponent.tsx\n\nModule Overview:\n\n  Purpose: This file defines the TldrawComponent, which is a React component used for rendering a Tldraw editor with specific functionalities.\n  Dependencies: \n  - React: A JavaScript library for building user interfaces.\n  - tldraw: A library for creating and managing interactive drawings.\n  - enabled.ts: A file containing enabled components.\n  - custom_nodes/twittercard.ts and custom_nodes/textcard.ts: Files containing utility functions for custom nodes.\n  - tldrawDrop.ts: A file defining the DropZone component.\n  - loadSnap.ts and createAssetUrl.ts: Files for loading remote snapshots and creating assets from URLs.\n  - savesnap.ts: A file defining the SaveStatus component.\n  - createEmbeds.ts: A file for creating embeds from URLs.\n\nClasses:\n\n  TldrawComponent:\n  - Purpose: Represents a React component for rendering a Tldraw editor with specific functionalities.\n  - Attributes: \n    - id (string): The unique identifier for the Tldraw editor.\n  - Methods:\n    - None\n\n  Thinkpad:\n  - Purpose: Represents a memoized functional component for rendering the Tldraw editor.\n  - Attributes:\n    - id (string): The unique identifier for the Tldraw editor.\n  - Methods:\n    - None\n\nFunctions:\n\n  None\n\nOverall, this file provides components and functionalities for rendering a Tldraw editor with specific features and dependencies on various modules and libraries.",
    "apps/web/components/canvas/tldrawDrop.tsx": "File Summary: DropZone.tsx\n\nModule Overview:\n\n  Purpose: The DropZone module provides a component that allows users to drag and drop content onto a designated area in the application. It handles the dropping of external content and updates the editor accordingly.\n  \n  Dependencies: \n  - \"@/lib/ExternalDroppedContent\": Module for handling external dropped content.\n  - \"@repo/ui/icons\": Icons used for visual representation.\n  - \"next/image\": Next.js Image component for displaying images.\n  - \"react\": React library for building user interfaces.\n  - \"tldraw\": Library for creating and editing drawings.\n  - \"./tldrawComponent\": Custom context for managing drag and drop functionality.\n\nFunctions:\n\n  handleDrop(event: React.DragEvent<HTMLDivElement>) -> void:\n  - Purpose: Handles the drop event when content is dropped onto the DropZone component.\n  - Arguments:\n    - event (React.DragEvent<HTMLDivElement>): The drag event triggered by dropping content.\n  - Returns: void\n  - Exceptions: None\n\nClasses: None\n\nOverall, the DropZone module provides a user-friendly interface for dragging and dropping content onto the application, with functionality to handle the dropped data and update the editor accordingly.",
    "apps/web/components/twitter/icons/icons.module.css": "File Summary: .verified\n\nModule Overview:\n\n  Purpose: This file contains styling rules for elements with the class \".verified\" in the application. It defines the visual appearance of verified elements.\n  Dependencies: None\n\nClasses: None\n\nFunctions: None\n\nOverall, this file is responsible for styling verified elements in the application, setting their margin, maximum width and height, fill color, and other visual properties. It does not contain any classes or functions, as it solely focuses on defining the styling for the specified class.",
    "apps/web/components/twitter/icons/index.ts": "Page Title: verified.js\n\nModule Overview:\n\n  Purpose: This module exports functionality related to verified entities, including businesses and government entities.\n\n  Dependencies: \n  - verified: The main module for handling verified entities.\n\nClasses:\n\n  N/A\n\nFunctions:\n\n  N/A\n\nThis file simply exports functionality related to verified entities, specifically businesses and government entities. It serves as a way to easily access and import the code related to these entities in other parts of the application.",
    "apps/web/components/twitter/icons/verified-business.tsx": "Module Overview:\n\nPurpose: The icons.module.css module is responsible for styling and displaying various icons within the application.\n\nDependencies: \n- None\n\nClasses:\n- N/A\n\nFunctions:\n- N/A\n\nThis file specifically imports the CSS module for styling the VerifiedBusiness icon, which is displayed as an SVG image. The icon represents a verified account and is styled using linear gradients and paths to create a visually appealing design. The className attribute is used to apply the specific styling defined in the icons.module.css file to the SVG element.",
    "apps/web/components/twitter/icons/verified-government.tsx": "Module Overview:\n\n  Purpose: The icons.module.css module provides styling for various icons used within the application.\n  Dependencies: None\n\nClasses:\nNone\n\nFunctions:\nNone\n\nOverall, the file \"./icons.module.css\" contains CSS styling for the VerifiedGovernment icon, which represents a verified government account within the application. The SVG icon is styled using the class \"verified\" defined in the icons.module.css file.",
    "apps/web/components/twitter/icons/verified.tsx": "Module Overview:\n\nPurpose: The icons.module.css module is responsible for styling and displaying various icons within the application.\n\nDependencies: \n- None\n\nClasses:\n- None\n\nFunctions:\n- Verified: \n  - Purpose: Renders a verified account icon.\n  - Arguments: None\n  - Returns: JSX element representing the verified account icon.\n  - Exceptions: None",
    "apps/web/components/twitter/render-tweet.tsx": "Module Overview:\n\nPurpose: The \"tweet-header.module.tsx\" file provides components and functionality for displaying a Twitter tweet header within a React application.\n\nDependencies:\n- react-tweet: Provides components and utilities for working with Twitter tweets.\n- clsx: A utility for conditionally joining class names together.\n- \"./verified-badge\": A component for displaying a verified badge next to a user's name.\n\nClasses:\n\nTweetHeader:\n- Purpose: Represents the header section of a Twitter tweet, including the user's avatar, name, username, and additional information.\n- Attributes:\n  - tweet: The tweet data, including user information.\n  - components: Optional TwitterComponents for customizing the header components.\n- Methods: N/A\n\nFunctions:\n\nMyTweet:\n- Purpose: Renders a complete Twitter tweet with the header, body, media, and additional information.\n- Arguments:\n  - tweet: The tweet data to be displayed.\n  - components: Optional TwitterComponents for customizing the tweet components.\n- Returns: The rendered tweet component.\n- Exceptions: N/A\n\nAvatarImg:\n- Purpose: Renders an avatar image for a user.\n- Arguments:\n  - src (string): The URL of the image.\n  - alt (string): The alt text for the image.\n  - width (number): The width of the image.\n  - height (number): The height of the image.\n- Returns: The rendered image component.\n- Exceptions: N/A\n\nNote: The file also includes type definitions for Props, AvatarImgProps, and EnrichedTweet to ensure type safety and consistency in the component usage.",
    "apps/web/components/twitter/tweet-header.module.css": "File Summary: tweet-header.css\n\nModule Overview:\n\n  Purpose: This file contains styling rules for the header section of a tweet component in the application.\n  Dependencies: None\n\nClasses:\n\n  .header:\n  - Purpose: Defines the styling for the header section of a tweet.\n  - Attributes:\n    - display: flex;\n    - padding-bottom: 0.75rem;\n    - line-height: var(--tweet-header-line-height);\n    - font-size: var(--tweet-header-font-size);\n    - white-space: nowrap;\n    - overflow-wrap: break-word;\n    - overflow: hidden;\n\n  .avatar:\n  - Purpose: Defines the styling for the avatar image in the tweet header.\n  - Attributes:\n    - position: relative;\n    - height: 48px;\n    - width: 48px;\n\n  .avatarOverflow:\n  - Purpose: Defines the styling for the overflow behavior of the avatar image.\n  - Attributes:\n    - height: 100%;\n    - width: 100%;\n    - position: absolute;\n    - overflow: hidden;\n    - border-radius: 9999px;\n\n  .avatarSquare:\n  - Purpose: Defines the styling for a square-shaped avatar image.\n  - Attributes:\n    - border-radius: 4px;\n\n  .avatarShadow:\n  - Purpose: Defines the styling for the shadow effect on the avatar image.\n  - Attributes:\n    - height: 100%;\n    - width: 100%;\n    - transition-property: background-color;\n    - transition-duration: 0.2s;\n    - box-shadow: rgb(0 0 0 / 3%) 0px 0px 2px inset;\n\n  .author:\n  - Purpose: Defines the styling for the author section in the tweet header.\n  - Attributes:\n    - max-width: calc(100% - 84px);\n    - display: flex;\n    - flex-direction: column;\n    - justify-content: center;\n    - margin: 0 0.5rem;\n\nFunctions: None\n\nThis file contains CSS styling rules for the header section of a tweet component, including the avatar image, author information, and Twitter icon. The classes defined in this file help in structuring and styling the visual representation of a tweet within the application.",
    "apps/web/components/twitter/verified-badge.module.css": "File: styles.css\n\nModule Overview:\n\n  Purpose: This file contains styling rules for elements related to tweet verification in the application.\n\n  Dependencies: \n  - None\n\nClasses:\n- None\n\nFunctions:\n- None\n\nContent Overview:\nThis file defines styling rules for different types of verified tweets in the application. It includes classes for styling verified tweets with different colors based on their verification status. The file also includes commented out code for a government verified tweet color, which is currently not in use.",
    "apps/web/components/twitter/verified-badge.tsx": "Module Overview:\n\n  Purpose: The VerifiedBadge module is responsible for rendering a badge indicating the verification status of a user. It displays different icons based on the user's verification status and type.\n\n  Dependencies: \n  - clsx: A utility for conditionally joining class names together.\n  - Verified, VerifiedBusiness, VerifiedGovernment: Icons used to represent different verification types.\n  - verified-badge.module.css: Styles for the VerifiedBadge component.\n\nFunctions:\n\n  VerifiedBadge:\n  - Purpose: Renders a badge indicating the verification status of a user.\n  - Arguments:\n    - user (any): The user object containing verification information.\n    - className (string, optional): Additional class name for styling purposes.\n  - Returns:\n    - JSX.Element | null: The rendered badge component.\n  - Exceptions:\n    - None\n\nClasses:\n  \n  None",
    "apps/web/drizzle.config.ts": "Page Title: drizzle-kit.ts\n\nModule Overview:\n\n  Purpose: This module defines the configuration settings for the Drizzle Kit, a tool used for managing database migrations. It specifies the database schema file, dialect, driver, database credentials, and output directory for migrations.\n\n  Dependencies: \n  - drizzle-kit: The Drizzle Kit library for managing database migrations.\n\nClasses:\nN/A\n\nFunctions:\nN/A\n\nOverall, the drizzle-kit.ts file serves as a central configuration file for the Drizzle Kit tool, providing essential settings for database migration management.",
    "apps/web/env.d.ts": "Module Overview:\n\n  Purpose: This file defines the interface for Cloudflare environment variables used in the application. It specifies the types of various environment variables related to storage, databases, images, AI, and recommendations.\n\n  Dependencies: None\n\nClasses:\n\n  None\n\nFunctions:\n\n  None\n\nThis file is responsible for defining the structure of the CloudflareEnv interface, which includes the types of various environment variables used in the application such as STORAGE, DATABASE, DEV_IMAGES, CANVAS_SNAPS, AI, and RECOMMENDATIONS. This interface helps in ensuring type safety and consistency when accessing these environment variables throughout the application.",
    "apps/web/instrumentation.ts": "File Summary: sentry.config.js\n\nModule Overview:\n\n  Purpose: This module is responsible for dynamically importing configuration files based on the environment's runtime. It imports either the sentry.server.config file for Node.js runtime or the sentry.edge.config file for Edge runtime.\n\n  Dependencies: \n  - None\n\nFunctions:\n\n  register() -> Promise<void>:\n  - Purpose: Registers the appropriate Sentry configuration file based on the environment's runtime.\n  - Arguments: None\n  - Returns: Promise<void>\n  - Exceptions: None",
    "apps/web/lib/ExternalDroppedContent.ts": "Page Title: handleExternalDroppedContent.ts\n\nModule Overview:\n\n  Purpose: This module handles the processing and creation of content dropped into the editor, including URLs, text, and images.\n  Dependencies: \n  - tldraw: The main editor library for handling shapes and content.\n  - createEmbedsFromUrl: A function for creating embeds from URLs.\n\nFunctions:\n\n  processURL(input: string) -> string | null:\n  - Purpose: Processes a given URL input to ensure it is valid and returns the formatted URL.\n  - Arguments:\n    - input (string): The URL input to be processed.\n  - Returns:\n    - string | null: The formatted URL if valid, or null if invalid.\n\n  formatContent(title: string, content: string) -> string:\n  - Purpose: Formats the title and content text to fit a specific height and width ratio.\n  - Arguments:\n    - title (string): The title text.\n    - content (string): The content text.\n  - Returns:\n    - string: The formatted text with new lines added.\n\n  formatTextToRatio(text: string) -> { height: number; width: number }:\n  - Purpose: Calculates the height and width of text based on a specific ratio and font size.\n  - Arguments:\n    - text (string): The text to calculate dimensions for.\n  - Returns:\n    - { height: number; width: number }: The calculated height and width of the text.\n\n  handleExternalDroppedContent({ droppedData, editor }: { droppedData: DroppedData; editor: Editor }) -> void:\n  - Purpose: Handles the dropped content, creating shapes or cards based on the type of data.\n  - Arguments:\n    - droppedData (DroppedData): The data dropped into the editor.\n    - editor (Editor): The editor instance.\n  - Returns:\n    - void\n  - Exceptions:\n    - None specified.\n\n  createTextCard(editor: Editor, position: { x: number; y: number }, content: string, type: string, extraInfo: string = \"\") -> void:\n  - Purpose: Creates a text card shape in the editor with specified content and type.\n  - Arguments:\n    - editor (Editor): The editor instance.\n    - position ({ x: number; y: number }): The position to place the text card.\n    - content (string): The content text for the card.\n    - type (string): The type of the card.\n    - extraInfo (string): Additional information for the card.\n  - Returns:\n    - void\n\nOverall, this file handles the processing of dropped content in the editor, including URLs, text, and images, and creates shapes or cards based on the content type.",
    "apps/web/lib/constants.ts": "Module Overview:\n\n  Purpose: This module defines constants for various limits and a list of code language subsets used within the application.\n\n  Dependencies: None\n\nConstants:\n- LIMITS:\n  - page (int): The limit for the number of items per page.\n  - tweet (int): The character limit for a tweet.\n  - note (int): The character limit for a note.\n\n- codeLanguageSubset (list): A list of supported code languages within the application.\n\nFunctions: None\n\nClasses: None\n\nOverall, this file provides essential constants for limiting certain functionalities within the application and a list of supported code languages for developers to reference.",
    "apps/web/lib/context.ts": "Module Overview:\n\n  Purpose: This module defines a DragContext for managing drag and drop functionality within a React application.\n  Dependencies: \n  - react: The React library for building user interfaces.\n\nClasses:\n\n  DragContext:\n  - Purpose: Represents the context for drag and drop functionality.\n  - Attributes:\n    - isDraggingOver (boolean): Indicates if an item is currently being dragged over.\n    - setIsDraggingOver (React.Dispatch<React.SetStateAction<boolean>>): Function to set the isDraggingOver state.\n  - Methods: N/A\n\nFunctions:\n\n  useDragContext():\n  - Purpose: Custom hook to access the DragContext within components.\n  - Arguments: N/A\n  - Returns: The context object containing isDraggingOver and setIsDraggingOver.\n  - Exceptions: Throws an error if used outside of the DragContext provider.",
    "apps/web/lib/createAssetUrl.ts": "Page Title: createAssetFromUrl.ts\n\nModule Overview:\n\n  Purpose: This module provides a function to create a bookmark asset from a given URL by fetching metadata from the URL or a specified endpoint.\n  Dependencies: \n  - tldraw: Library for handling asset-related functionalities.\n  - fetch: Web API for making network requests.\n  - DOMParser: Web API for parsing HTML documents.\n\nFunctions:\n\n  createAssetFromUrl({url}: {type: \"url\"; url: string}) -> Promise<TLAsset>:\n  - Purpose: Creates a bookmark asset from the provided URL by fetching metadata from the URL or a specified endpoint.\n  - Arguments:\n    - url (string): The URL from which to create the asset.\n  - Returns:\n    - Promise<TLAsset>: A promise that resolves to the created TLAsset object.\n  - Exceptions:\n    - Error: If there is an issue fetching metadata from the URL or endpoint.\n\nNote: The function handles cases where metadata cannot be fetched by providing default values for the asset properties.",
    "apps/web/lib/createEmbeds.ts": "File Summary: createEmbedsFromUrl.ts\n\nModule Overview:\n\n  Purpose: This file contains a function that creates embeds from a given URL, allowing users to embed external content into the application.\n  Dependencies: \n  - tldraw: External library for drawing and editing shapes.\n  - drophelpers: Module for creating empty bookmark shapes.\n  - fetchers: Module for fetching external content from a URL.\n\nFunctions:\n\n  createEmbedsFromUrl:\n  - Purpose: Creates embeds from a given URL, handling different types of content such as Twitter cards and external embeds.\n  - Arguments:\n    - url (string): The URL of the content to embed.\n    - point (VecLike | undefined): Optional point to position the embed.\n    - sources (TLExternalContentSource[] | undefined): Optional external content sources.\n    - editor (Editor): The editor instance to work with.\n  - Returns: Promise<void>\n  - Exceptions: \n    - Error: If there is an issue creating the asset or fetching external content.\n\nThis function first checks if the URL matches a specific pattern for Twitter or x.com content, creating a Twitter card shape if it does. It then tries to embed the content using the getEmbedInfo function. If successful, it puts the external content into the editor. If not, it creates a bookmark shape with the URL and fetches additional information to create an asset for the content. Finally, it updates the shapes in the editor with the new asset information.\n\nOverall, this function provides a way to easily embed external content into the application, enhancing the user experience and interaction with different types of media.",
    "apps/web/lib/drophelpers.ts": "File Summary: createEmptyBookmarkShape.ts\n\nModule Overview:\n\n  Purpose: This file contains a function to create an empty bookmark shape within the editor.\n  Dependencies: \n  - tldraw: The tldraw library for handling shapes and editor functionalities.\n\nFunctions:\n\n  createEmptyBookmarkShape(editor: Editor, url: string, position: VecLike) -> TLBookmarkShape:\n  - Purpose: Creates an empty bookmark shape at a specified position within the editor.\n  - Arguments:\n    - editor (Editor): The editor instance where the shape will be created.\n    - url (string): The URL associated with the bookmark shape.\n    - position (VecLike): The position where the shape will be placed.\n  - Returns:\n    - TLBookmarkShape: The created bookmark shape object.\n  - Dependencies:\n    - createShapeId(): Generates a unique shape ID.\n    - centerSelectionAroundPoint(editor: Editor, position: VecLike): Centers the selection around a specified point.\n",
    "apps/web/lib/get-metadata.ts": "Module Overview:\n\n  Purpose: The \"use server\" module is responsible for fetching metadata from a given URL, including the title, description, and image. It utilizes the cheerio library to parse HTML content and extract relevant information.\n\n  Dependencies: \n  - cheerio: A library for parsing and manipulating HTML content.\n\nFunctions:\n\n  getMetaData(url: string) -> Object:\n  - Purpose: Fetches metadata from the specified URL and returns an object containing the title, description, image, and base URL.\n  - Arguments:\n    - url (string): The URL from which to fetch metadata.\n  - Returns:\n    - Object: An object containing the extracted metadata.\n  - Exceptions:\n    - None\n\nOverall, the \"use server\" module serves the purpose of extracting metadata from a URL, such as the title, description, and image, to provide relevant information for further processing within the application.",
    "apps/web/lib/get-theme-button.tsx": "Module Overview:\n\n  Purpose: This module provides a dynamic theme toggler component that works seamlessly with the app router, ensuring no flickering or jumping effects when the component loads.\n  \n  Dependencies: \n  - next/dynamic: A library for dynamically importing components in Next.js.\n  - @repo/ui/shadcn/theme-toggle: The theme toggle component from the specified repository.\n\nFunctions:\n\n  getThemeToggler() -> Component:\n  - Purpose: Returns a dynamic theme toggler component that should not be server-side rendered to prevent discrepancies between server and client values.\n  - Returns:\n    - Component: The theme toggler component.\n  - Exceptions:\n    - None\n\nNote: The loading property in the dynamic import ensures a placeholder is displayed while the component is loading to prevent UI jumps.",
    "apps/web/lib/handle-errors.ts": "Module Overview:\n\n  Purpose: This module provides functions for handling error messages and displaying toast notifications to users.\n\n  Dependencies: \n  - next/dist/client/components/redirect: Module for handling redirects in Next.js applications.\n  - sonner: Library for displaying toast notifications.\n  - zod: Library for data validation.\n\nFunctions:\n\n  getErrorMessage(err: unknown) -> string:\n  - Purpose: Retrieves the error message from the provided error object.\n  - Arguments:\n    - err (unknown): The error object to extract the message from.\n  - Returns:\n    - string: The error message to display.\n  - Exceptions:\n    - None\n\n  showErrorToast(err: unknown) -> void:\n  - Purpose: Displays a toast notification with the error message.\n  - Arguments:\n    - err (unknown): The error object to display.\n  - Returns:\n    - void\n  - Exceptions:\n    - None",
    "apps/web/lib/loadSnap.ts": "Page Title: loadRemoteSnapshot.ts\n\nModule Overview:\n\n  Purpose: This module is responsible for loading a remote snapshot of canvas data and creating a new store with the loaded snapshot.\n  \n  Dependencies: \n  - tldraw: The tldraw library for creating TL stores and loading snapshots.\n  - fetchers: The fetchers module for fetching canvas data.\n  - custom_nodes: Custom nodes for creating shapes in the canvas.\n\nFunctions:\n\n  loadRemoteSnapshot(id: string) -> Promise:\n  - Purpose: Loads a remote snapshot of canvas data and creates a new store with the loaded snapshot.\n  - Arguments:\n    - id (string): The ID of the snapshot to load.\n  - Returns:\n    - Promise: A promise that resolves with the new store containing the loaded snapshot.\n  - Exceptions:\n    - None",
    "apps/web/lib/searchParams.ts": "Page Title: searchParamsCache.js\n\nModule Overview:\n\n  Purpose: This module provides functionality for creating and managing search parameters caches for different sections of the application.\n  Dependencies: \n  - nuqs/server: Module for server-side functionality.\n  - zod: Library for data validation.\n\nClasses:\n\n  N/A\n\nFunctions:\n\n  createSearchParamsCache(config: object) -> object:\n  - Purpose: Creates a search parameters cache with the specified configuration.\n  - Arguments:\n    - config (object): Configuration object for the search parameters cache.\n  - Returns:\n    - object: The created search parameters cache object.\n  - Exceptions:\n    - N/A\n\n  parseAsInteger(value: any) -> number:\n  - Purpose: Parses the input value as an integer.\n  - Arguments:\n    - value (any): The value to be parsed.\n  - Returns:\n    - number: The parsed integer value.\n  - Exceptions:\n    - N/A\n\n  parseAsString(value: any) -> string:\n  - Purpose: Parses the input value as a string.\n  - Arguments:\n    - value (any): The value to be parsed.\n  - Returns:\n    - string: The parsed string value.\n  - Exceptions:\n    - N/A\n\n  parseAsBoolean(value: any) -> boolean:\n  - Purpose: Parses the input value as a boolean.\n  - Arguments:\n    - value (any): The value to be parsed.\n  - Returns:\n    - boolean: The parsed boolean value.\n  - Exceptions:\n    - N/A\n\n  parseAsArrayOf(parser: function) -> array:\n  - Purpose: Parses the input value as an array using the specified parser function.\n  - Arguments:\n    - parser (function): The parser function for each element in the array.\n  - Returns:\n    - array: The parsed array value.\n  - Exceptions:\n    - N/A\n\n  parseAsJson(parser: function) -> object:\n  - Purpose: Parses the input value as JSON using the specified parser function.\n  - Arguments:\n    - parser (function): The parser function for the JSON object.\n  - Returns:\n    - object: The parsed JSON object.\n  - Exceptions:\n    - N/A\n\nOverall, this file defines functions for parsing different types of data and creates search parameters caches for the home and chat sections of the application.",
    "apps/web/lib/unfirlsite.ts": "File Summary: unfurl.ts\n\nModule Overview:\n\n  Purpose: This module is responsible for extracting metadata (such as title, description, image, and favicon) from a given URL by parsing its HTML content.\n  Dependencies: \n  - cheerio: A fast, flexible, and lean implementation of core jQuery designed specifically for the server.\n  - fetch: A built-in JavaScript function for making HTTP requests.\n\nFunctions:\n\n  unfurl(url: string) -> { title: string | undefined, description: string | undefined, image: string | undefined, favicon: string | undefined }:\n  - Purpose: Extracts metadata (title, description, image, favicon) from the HTML content of a given URL.\n  - Arguments:\n    - url (string): The URL from which to extract metadata.\n  - Returns:\n    - An object containing the extracted metadata (title, description, image, favicon).\n  - Exceptions:\n    - Error: If there is an issue fetching the URL or if the content-type is not HTML.\n\nNote: The file uses the @ts-ignore directive to suppress TypeScript errors related to trusting certain meta tags.",
    "apps/web/lib/useKeyPress.ts": "File Summary: useKeyPress.ts\n\nModule Overview:\n\n  Purpose: This module provides a custom hook for detecting key presses with specific key combinations and executing a callback function when the conditions are met.\n  \n  Dependencies: \n  - react: The React library for building user interfaces.\n\nFunctions:\n\n  useKeyPress(key: string, callback: () => void) -> void:\n  - Purpose: Listens for a specific key press with the Alt key modifier and calls the provided callback function when the key combination is detected.\n  - Arguments:\n    - key (string): The key to listen for.\n    - callback (() => void): The function to execute when the key combination is detected.\n  - Returns:\n    - void\n  - Exceptions:\n    - None\n\nNote: This file does not contain any classes, only a custom hook function for key press detection.",
    "apps/web/lib/utils.ts": "File Summary: randomSentenceGenerator.ts\n\nModule Overview:\n\n  Purpose: This module provides a function to generate a random selection of sentences from a given input string, ensuring the total character count is at least 1000.\n  \n  Dependencies: None\n\nFunctions:\n\n  export function getRandomSentences(fullQuery: string): string:\n  - Purpose: Generates a random selection of sentences from the input string until the total character count is at least 1000.\n  - Arguments:\n    - fullQuery (string): The input string containing sentences.\n  - Returns:\n    - string: The randomly selected sentences with a total character count of at least 1000.\n  - Exceptions: None\n\nAdditional Notes: This file contains a helper function getRandomInt(min: number, max: number): number, which generates a random integer between the specified min and max values.",
    "apps/web/middleware.ts": "File Summary: nextServer.ts\n\nModule Overview:\n\n  Purpose: This module contains middleware functions for handling CORS headers and configuring routes for API endpoints in a Next.js application.\n  Dependencies: \n  - next/server: The Next.js server module for handling server-side logic.\n\nFunctions:\n\n  middleware(request: NextRequest) -> NextResponse:\n  - Purpose: Handles CORS headers for incoming requests and sets appropriate headers for responses.\n  - Arguments:\n    - request (NextRequest): The incoming request object.\n  - Returns:\n    - NextResponse: The response object with CORS headers set.\n  - Exceptions:\n    - None\n\n  config:\n  - Purpose: Defines the route matcher for API endpoints.\n  - Returns:\n    - Object: An object with a \"matcher\" property defining the route pattern.\n\nOverall, this file provides essential middleware functionality for managing CORS headers and configuring API routes in a Next.js application.",
    "apps/web/next-env.d.ts": "File Title: next.config.js\n\nModule Overview:\n\n  Purpose: This file is the configuration file for a Next.js application. It allows developers to customize various settings and behaviors of the application, such as webpack configuration, environment variables, and routing.\n\n  Dependencies: \n  - next: The Next.js framework.\n  - next/image-types/global: Global image types for Next.js.\n\nNote: This file should not be edited directly. Refer to the Next.js documentation for more information on how to configure your Next.js application.\n\nIf you are documenting a file without classes or functions, provide a brief overview of the file's purpose and contents.",
    "apps/web/postcss.config.js": "File Summary: postcss.config.js\n\nModule Overview:\n\n  Purpose: This module exports the configuration for PostCSS, a tool for transforming CSS with JavaScript plugins. It defines the settings and plugins to be used when processing CSS files within the application.\n\n  Dependencies: \n  - @repo/tailwind-config: The Tailwind CSS configuration module.\n\nFunctions:\n  \n  None\n\nClasses:\n\n  None\n\nThis file serves as the configuration for PostCSS in the application, specifying the plugins and settings to be used during the CSS transformation process. It relies on the Tailwind CSS configuration module for additional styling configurations.",
    "apps/web/sentry.client.config.ts": "File Summary: sentryClientConfig.js\n\nModule Overview:\n\n  Purpose: This file configures the initialization of Sentry on the client side for error monitoring and reporting.\n  Dependencies: \n  - @sentry/nextjs: The Sentry SDK for Next.js.\n\nClasses: N/A\n\nFunctions: N/A\n\nThis file initializes Sentry with the provided configuration options, including the DSN (Data Source Name) for error reporting, tracesSampleRate for controlling the sampling rate of performance traces, debug mode for console information, and replay settings for error and session sampling rates. The integrations option allows for additional features to be enabled.\n\nFor more information on configuring Sentry with Next.js, refer to the official documentation at https://docs.sentry.io/platforms/javascript/guides/nextjs/.",
    "apps/web/sentry.edge.config.ts": "File Summary: sentryConfig.js\n\nModule Overview:\n\n  Purpose: This file configures the initialization of Sentry for edge features such as middleware and edge routes within the application. The configuration added here will be used whenever one of the edge features is loaded, regardless of whether the application is running locally or in production.\n  \n  Dependencies: \n  - Sentry: The Sentry library for error tracking and monitoring.\n\nClasses: \nN/A\n\nFunctions: \nN/A\n\nOverall, this file is responsible for setting up Sentry for error tracking in edge features of the application. The configuration includes the Sentry DSN, tracesSampleRate, and debug options. Developers can refer to the Sentry documentation for more information on how to configure Sentry for Next.js applications.",
    "apps/web/sentry.server.config.ts": "File Summary: sentryConfig.js\n\nModule Overview:\n\n  Purpose: This file configures the initialization of Sentry on the server. The configuration added here will be used whenever the server handles a request.\n  Dependencies: \n  - @sentry/nextjs: The Sentry library for Next.js.\n\nClasses: N/A\n\nFunctions: N/A\n\nThis file initializes Sentry on the server, setting up the necessary configurations for error tracking and monitoring. The Sentry.init() function is called with the following parameters:\n- dsn: The Data Source Name (DSN) for the Sentry project.\n- tracesSampleRate: The rate at which traces are sampled for performance monitoring.\n- debug: A boolean value to print useful information to the console during setup.\n- spotlight: An optional feature to enable Spotlight for development environments.\n\nDevelopers can refer to the Sentry documentation for more information on configuring Sentry with Next.js: https://docs.sentry.io/platforms/javascript/guides/nextjs/",
    "apps/web/server/auth.ts": "File Summary: auth.js\n\nModule Overview:\n\n  Purpose: This module handles authentication and user sign-in/sign-out functionalities for the application.\n  Dependencies: \n  - NextAuth: A library for authentication in Next.js applications.\n  - DrizzleAdapter: An adapter for integrating authentication with a database.\n  - Google: A provider for Google authentication.\n  - db: A module for interacting with the database.\n\nClasses:\nN/A\n\nFunctions:\n\n  signIn() -> void:\n  - Purpose: Initiates the sign-in process for users.\n  - Arguments: None\n  - Returns: void\n  - Exceptions: None\n\n  signOut() -> void:\n  - Purpose: Logs out the current user.\n  - Arguments: None\n  - Returns: void\n  - Exceptions: None\n\n  auth() -> NextAuthResult:\n  - Purpose: Retrieves the authentication result for the current user session.\n  - Arguments: None\n  - Returns: NextAuthResult\n  - Exceptions: None\n\n  GET() -> void:\n  - Purpose: Handles HTTP GET requests for authentication.\n  - Arguments: None\n  - Returns: void\n  - Exceptions: None\n\n  POST() -> void:\n  - Purpose: Handles HTTP POST requests for authentication.\n  - Arguments: None\n  - Returns: void\n  - Exceptions: None\n\n  create_user(username: str, email: str) -> User:\n  - Purpose: Creates a new user account.\n  - Arguments:\n    - username (str): The desired username.\n    - email (str): The email address of the new user.\n  - Returns:\n    - User: The newly created user object\n  - Exceptions:\n    - None\n\n  delete_user(user: User) -> void:\n  - Purpose: Deletes a user account.\n  - Arguments:\n    - user (User): The user account to be deleted.\n  - Returns: void\n  - Exceptions:\n    - None\n\nThis file is responsible for setting up authentication providers, handling user sign-in/sign-out actions, and managing user sessions within the application.",
    "apps/web/server/db/index.ts": "File Summary: db.js\n\nModule Overview:\n\n  Purpose: This module initializes and configures the database connection using the Drizzle ORM library. It sets up the database schema and logger based on the environment settings.\n  \n  Dependencies: \n  - drizzle-orm/d1: The Drizzle ORM library for database operations.\n  - schema: The schema module for defining the database structure.\n\nClasses:\nNone\n\nFunctions:\n\n  db:\n  - Purpose: Initializes the database connection with the specified database and schema.\n  - Arguments:\n    - database (string): The database connection string.\n    - schema (object): The database schema definition.\n    - logger (boolean): Flag to enable logging in development mode.\n  - Returns:\n    - None\n  - Exceptions:\n    - None\n\nNote: This file primarily focuses on setting up the database connection and schema for the application.",
    "apps/web/server/db/schema.ts": "Module Overview:\n\nPurpose: This file defines database tables for user management, including user accounts, sessions, verification tokens, authenticators, stored content, spaces, chat threads, chat history, and canvas data.\n\nDependencies:\n- \"domain\": Importing the create function from the \"domain\" module.\n- \"drizzle-orm\": Importing relations and sql functions from the \"drizzle-orm\" module.\n- \"drizzle-orm/sqlite-core\": Importing index, int, primaryKey, sqliteTableCreator, text, integer functions from the \"drizzle-orm/sqlite-core\" module.\n- \"next-auth/adapters\": Importing the AdapterAccountType type from the \"next-auth/adapters\" module.\n\nClasses:\n- User: Represents user account information with attributes such as id, name, email, image, telegramId, and hasOnboarded status.\n- Account: Represents account information with attributes like userId, type, provider, providerAccountId, refresh_token, access_token, expires_at, token_type, scope, id_token, and session_state.\n- Session: Represents session information with attributes like sessionToken, userId, and expires.\n- VerificationToken: Represents verification token information with attributes like identifier, token, and expires.\n- Authenticator: Represents authenticator information with attributes like credentialID, userId, providerAccountId, credentialPublicKey, counter, credentialDeviceType, credentialBackedUp, and transports.\n- StoredContent: Represents stored content information with attributes like id, content, title, description, url, savedAt, baseUrl, ogImage, type, image, userId, and noteId.\n- ContentToSpace: Represents the relationship between content and space with attributes contentId and spaceId.\n- Space: Represents space information with attributes like id, name, user, createdAt, and numItems.\n- SpacesAccess: Represents access permissions for spaces with attributes spaceId and userEmail.\n- ChatThread: Represents chat thread information with attributes id, firstMessage, and userId.\n- ChatHistory: Represents chat history information with attributes threadId, question, answer, answerSources, answerJustification, and createdAt.\n- Canvas: Represents canvas information with attributes id, title, description, imageUrl, and userId.\n\nFunctions:\n- createTable: Creates a SQLite table with the specified name and columns.\n- $inferSelect: Infers the select type for a table.\n- primaryKey: Defines a primary key for a table.\n- index: Creates an index on a specified column.\n- references: Defines a foreign key reference to another table.\n- $defaultFn: Specifies a default function for a column.\n- $type: Specifies the type of a column.\n- notNull: Specifies that a column cannot be null.\n- default: Specifies a default value for a column.\n- unique: Specifies that a column must have unique values.\n- autoIncrement: Specifies that a column should auto-increment.\n\nThis file contains table creation functions, column definitions, and relationships between different entities for user management within the application.",
    "apps/web/server/encrypt.ts": "File Summary: encryptionUtils.ts\n\nModule Overview:\n\n  Purpose: This module provides functions for encrypting and decrypting text using a custom cipher algorithm.\n  Dependencies: \n  - process.env.BACKEND_SECURITY_KEY: Environment variable containing the security key for encryption.\n  - Math library for mathematical operations.\n\nFunctions:\n\n  convertStringToFixedNumber(input: string) -> number:\n  - Purpose: Converts a given string into a fixed number using a hashing algorithm.\n  - Arguments:\n    - input (string): The input string to be converted.\n  - Returns:\n    - number: The hashed fixed number.\n  \n  random(seed: number) -> number:\n  - Purpose: Generates a random number based on a given seed.\n  - Arguments:\n    - seed (number): The seed for random number generation.\n  - Returns:\n    - number: The generated random number.\n\n  shuffle(array: string[], seed: number) -> string[]:\n  - Purpose: Shuffles the elements of an array based on a given seed.\n  - Arguments:\n    - array (string[]): The array to be shuffled.\n    - seed (number): The seed for shuffling.\n  - Returns:\n    - string[]: The shuffled array.\n\n  cipher(text: string) -> string:\n  - Purpose: Encrypts a given text using the custom cipher algorithm.\n  - Arguments:\n    - text (string): The text to be encrypted.\n  - Returns:\n    - string: The encrypted text.\n\n  decipher(text: string) -> string:\n  - Purpose: Decrypts a given text using the custom cipher algorithm.\n  - Arguments:\n    - text (string): The text to be decrypted.\n  - Returns:\n    - string: The decrypted text.\n  - Exceptions:\n    - None\n\n  extend(text: string, length = 60) -> string:\n  - Purpose: Extends a given text to a specified length by adding random characters.\n  - Arguments:\n    - text (string): The text to be extended.\n    - length (number): The desired length of the extended text.\n  - Returns:\n    - string: The extended text.\n\nThis file implements a custom encryption algorithm using the convertStringToFixedNumber function for hashing, random number generation, shuffling, encryption, and decryption functions for text manipulation.",
    "apps/web/tailwind.config.ts": "File Summary: tailwind.config.js\n\nModule Overview:\n\n  Purpose: This module exports the configuration settings for the Tailwind CSS framework used in the application.\n  Dependencies: \n  - @repo/tailwind-config: The Tailwind CSS configuration module.\n\nClasses: N/A\n\nFunctions: N/A\n\nThis file serves as the central configuration file for Tailwind CSS, providing settings for customizing the design system of the application. Developers can modify this file to adjust colors, typography, spacing, and other design-related properties used throughout the application.",
    "packages/eslint-config/library.js": "Page Title: eslint_config.js\n\nModule Overview:\n\n  Purpose: This module defines the ESLint configuration for the project, including recommended rules, plugins, and settings.\n  \n  Dependencies: \n  - node:path: A Node.js module for working with file paths.\n  - eslint: The ESLint library for linting JavaScript code.\n  \nClasses:\nThis file does not define any classes.\n\nFunctions:\nThis file does not define any functions.\n\nOverall, this file serves as the central configuration for ESLint in the project, specifying rules, plugins, and settings to ensure consistent code quality and style across the codebase.",
    "packages/eslint-config/next.js": "Module Overview:\n\nPurpose: This module serves as the ESLint configuration file for the TypeScript codebase. It defines the linting rules and settings to ensure code quality and consistency within the project.\n\nDependencies: \n- node:path: A Node.js module for working with file paths.\n- eslint: The ESLint library for static code analysis.\n\nFunctions:\n- No functions are defined in this file.\n\nClasses:\n- No classes are defined in this file.\n\nOverall, this file is crucial for maintaining code quality by enforcing linting rules and settings specific to TypeScript code within the project.",
    "packages/eslint-config/react-internal.js": "File Summary: eslint-config.js\n\nModule Overview:\n\n  Purpose: This file provides a custom ESLint configuration tailored for internal libraries utilizing React.\n  Dependencies: \n  - eslint: The ESLint library for linting code.\n  - prettier: The Prettier library for code formatting.\n  - eslint-config-turbo: A custom ESLint configuration.\n\nClasses: N/A\n\nFunctions: N/A\n\nThis file serves as a configuration file for ESLint, extending recommended rules, Prettier formatting, and a custom Turbo ESLint configuration. It defines global variables for React and JSX, sets the environment to browser, and configures settings for TypeScript resolution. Additionally, it specifies ignore patterns for dotfiles, node_modules, and dist directories, and overrides ESLint to detect .tsx files.",
    "packages/shared-types/index.ts": "Module Overview:\n\nPurpose: This module defines various Zod schemas for data validation and conversion related to chat history and API data. It also includes a function to convert chat history data into a more compatible format.\n\nDependencies:\n- zod: A library for data validation and schema creation.\n\nClasses:\n\nSourceZod:\n- Purpose: Represents the schema for a single data source.\n- Attributes:\n  - type (string): The type of the data source.\n  - source (string): The source of the data.\n  - title (string): The title of the data.\n  - content (string): The content of the data.\n  - numChunks (number, optional, default: 1): The number of chunks the data is divided into.\n\nChatHistoryZod:\n- Purpose: Represents the schema for chat history data.\n- Attributes:\n  - question (string): The question asked in the chat.\n  - answer (object): The answer provided in the chat.\n  - proModeProcessing (object): Processing information for pro mode queries.\n\nModelCompatibleChatHistoryZod:\n- Purpose: Represents a more compatible schema for chat history data.\n- Attributes:\n  - role (string): The role of the chat participant.\n  - content (string): The content of the chat message.\n\naddFromAPIType:\n- Purpose: Represents the schema for data obtained from an API.\n- Attributes:\n  - pageContent (string): The content of the API response.\n  - url (string): The URL of the API request.\n  - type (string, default: \"page\"): The type of data.\n  - title (string, optional, default: \"Untitled\"): The title of the data.\n  - description (string, optional, default: \"\"): The description of the data.\n  - ogImage (string, optional): The Open Graph image.\n  - image (string, optional): The image associated with the data.\n  - spaces (array of strings, optional, default: []): Spaces related to the data.\n\nFunctions:\n\nconvertChatHistoryList(chatHistoryList: ChatHistory[]) -> ModelCompatibleChatHistory:\n- Purpose: Converts chat history data into a more compatible format.\n- Arguments:\n  - chatHistoryList (array of ChatHistory): The list of chat history data to convert.\n- Returns:\n  - ModelCompatibleChatHistory: The converted chat history data.\n- Exceptions:\n  - None\n\nsourcesZod:\n- Purpose: Represents the schema for sources obtained from an API.\n- Attributes:\n  - ids (array of strings, nullable): The IDs of the sources.\n  - metadata (array of any): Metadata related to the sources.\n  - normalizedData (array of any, optional): Normalized data.\n  - proModeListedQueries (array of strings, optional): Pro mode listed queries.\n\nSourcesFromApi:\n- Purpose: Represents the inferred type from the sourcesZod schema.\n\nOverall, this file provides schemas for data validation and conversion related to chat history and API data, along with a function to convert chat history data into a more compatible format.",
    "packages/shared-types/utils.ts": "Page Title: tweetUtils.ts\n\nModule Overview:\n\n  Purpose: This module provides utility functions for working with tweet data, including converting tweets to Markdown format and extracting raw tweet content.\n  \n  Dependencies: \n  - react-tweet/api: The Tweet class from the react-tweet library.\n\nFunctions:\n\n  tweetToMd(tweet: Tweet) -> string:\n  - Purpose: Converts a Tweet object to a Markdown format string.\n  - Arguments:\n    - tweet (Tweet): The Tweet object to be converted.\n  - Returns:\n    - string: The Markdown formatted string representing the tweet.\n  \n  getRawTweet(tweet: string) -> string:\n  - Purpose: Extracts the content inside the last <raw> tag from a tweet.\n  - Arguments:\n    - tweet (string): The tweet containing raw content.\n  - Returns:\n    - string: The raw content extracted from the tweet.\n  - Exceptions:\n    - None\n\nOverall, this file provides functions for formatting tweet data and extracting raw content from tweets.",
    "packages/tailwind-config/globals.css": "File Summary: tailwind.config.js\n\nModule Overview:\n\n  Purpose: This file defines the global styles and configurations for the Tailwind CSS framework used in the application.\n  Dependencies: None\n\nClasses: N/A\n\nFunctions: N/A\n\nFile Contents Overview:\n\nThis file contains the configuration settings for Tailwind CSS, including defining custom color variables, spacing, and utility classes. It also includes styles for specific elements like tables and code blocks. Additionally, it sets up scrollbar visibility and selection styles for the application. The file ensures consistent styling and design across the application by providing a centralized location for managing global styles.",
    "packages/tailwind-config/postcss.config.js": "Module Overview:\n\n  Purpose: This module exports an object containing configuration options for PostCSS plugins, specifically Tailwind CSS and Autoprefixer.\n\n  Dependencies: \n  - Tailwind CSS: A utility-first CSS framework for rapidly building custom designs.\n  - Autoprefixer: A tool that automatically adds vendor prefixes to CSS rules.\n\nClasses:\nThis module does not define any classes.\n\nFunctions:\nThis module does not define any functions.",
    "packages/tailwind-config/tailwind.config.ts": "Module Overview:\n\n  Purpose: This file defines the configuration for Tailwind CSS, a utility-first CSS framework for rapidly building custom designs. It specifies the dark mode settings, content paths, theme customization, and plugins used in the application.\n\n  Dependencies: \n  - tailwindcss: The main Tailwind CSS library.\n\nClasses:\nThis file does not contain any classes.\n\nFunctions:\nThis file does not contain any functions.\n\nOverall, this file serves as the central configuration file for Tailwind CSS in the application, defining various styling options, content paths, and plugins used for styling components.",
    "packages/ui/.eslintrc.js": "File Summary: eslint-config.js\n\nModule Overview:\n\n  Purpose: This module defines the ESLint configuration for the project, ensuring consistent code style and quality across the codebase.\n  Dependencies: \n  - eslint: The ESLint library for linting JavaScript code.\n  - @typescript-eslint/parser: The parser for TypeScript code.\n  - tsconfig.lint.json: The TypeScript configuration file for linting rules.\n\nClasses: N/A\n\nFunctions: N/A\n\nThis file exports an ESLint configuration object that specifies the root directory, extends a predefined configuration for React projects, and uses the TypeScript parser with specific parser options.",
    "packages/ui/components/cardClick.tsx": "Module Overview:\n\n  Purpose: The \"use client\" module provides components for displaying cards with interactive features, such as clicking and hovering effects.\n  \n  Dependencies: \n  - \"@repo/ui/lib/utils\": Utility functions for styling and layout.\n  - \"framer-motion\": Library for creating animations in React components.\n  - \"react\": JavaScript library for building user interfaces.\n\nFunctions:\n\n  CardClick:\n  - Purpose: Renders a clickable card component with interactive effects.\n  - Arguments:\n    - tab (number): The active tab index.\n    - handleClickIndex (function): Callback function to handle tab index changes.\n    - items (array): An array of objects containing title, description, and SVG icon for each card.\n  - Returns: JSX element representing the card component.\n  \n  Card:\n  - Purpose: Renders a card component with title, description, and SVG icon.\n  - Arguments:\n    - title (string): The title of the card.\n    - description (string): The description of the card.\n    - svg (React.ReactNode): The SVG icon for the card.\n  - Returns: JSX element representing the card component.",
    "packages/ui/components/icons.tsx": "File Summary: icons.tsx\n\nModule Overview:\n\nPurpose: This file contains React components for various icons used in the application.\nDependencies: \n- react: The React library for building user interfaces.\n\nComponents:\n\nGithub:\n- Purpose: Represents the Github icon.\n- Props:\n  - props: SVGProps<SVGSVGElement> - Props for the SVG element.\n- Attributes:\n  - viewBox: \"0 0 256 250\" - Defines the position and dimension of the view box.\n  - width: \"1em\" - Sets the width of the icon.\n  - height: \"1em\" - Sets the height of the icon.\n  - fill: \"currentColor\" - Sets the fill color of the icon.\n  - xmlns: \"http://www.w3.org/2000/svg\" - Specifies the XML namespace.\n  - preserveAspectRatio: \"xMidYMid\" - Defines how the aspect ratio is preserved.\n- Methods:\n  - None\n\nTwitter:\n- Purpose: Represents the Twitter icon.\n- Props:\n  - props: SVGProps<SVGSVGElement> - Props for the SVG element.\n- Attributes:\n  - viewBox: \"0 0 256 209\" - Defines the position and dimension of the view box.\n  - width: \"1em\" - Sets the width of the icon.\n  - height: \"1em\" - Sets the height of the icon.\n  - xmlns: \"http://www.w3.org/2000/svg\" - Specifies the XML namespace.\n  - preserveAspectRatio: \"xMidYMid\" - Defines how the aspect ratio is preserved.\n- Methods:\n  - None\n\nMedium:\n- Purpose: Represents the Medium icon.\n- Props:\n  - props: SVGProps<SVGSVGElement> - Props for the SVG element.\n- Attributes:\n  - width: \"52\" - Sets the width of the icon.\n  - height: \"52\" - Sets the height of the icon.\n  - viewBox: \"0 0 52 52\" - Defines the position and dimension of the view box.\n  - fill: \"none\" - Sets the fill color of the icon.\n  - xmlns: \"http://www.w3.org/2000/svg\" - Specifies the XML namespace.\n- Methods:\n  - None\n\nReddit:\n- Purpose: Represents the Reddit icon.\n- Props:\n  - props: SVGProps<SVGSVGElement> - Props for the SVG element.\n- Attributes:\n  - viewBox: \"0 0 216 216\" - Defines the position and dimension of the view box.\n  - width: \"1em\" - Sets the width of the icon.\n  - height: \"1em\" - Sets the height of the icon.\n  - xmlns: \"http://www.w3.org/2000/svg\" - Specifies the XML namespace.\n- Methods:\n  - None\n\nNotion:\n- Purpose: Represents the Notion icon.\n- Props:\n  - props: SVGProps<SVGSVGElement> - Props for the SVG element.\n- Attributes:\n  - width: \"1em\" - Sets the width of the icon.\n  - height: \"1em\" - Sets the height of the icon.\n  - viewBox: \"0 0 256 268\" - Defines the position and dimension of the view box.\n  - fill: \"#FFF\" - Sets the fill color of the icon.\n  - xmlns: \"http://www.w3.org/2000/svg\" - Specifies the XML namespace.\n- Methods:\n  - None\n\nX:\n- Purpose: Represents the X (close) icon.\n- Props:\n  - props: SVGProps<SVGSVGElement> - Props for the SVG element.\n- Attributes:\n  - xmlns: \"http://www.w3.org/2000/svg\" - Specifies the XML namespace.\n  - width: \"1em\" - Sets the width of the icon.\n  - height: \"1em\" - Sets the height of the icon.\n  - fill: \"none\" - Sets the fill color of the icon.\n  - viewBox: \"0 0 1200 1227\" - Defines the position and dimension of the view box.\n- Methods:\n  - None\n\nGoogle:\n- Purpose: Represents the Google icon.\n- Props:\n  - props: SVGProps<SVGSVGElement> - Props for the SVG element.\n- Attributes:\n  - width: \"1.3em\" - Sets the width of the icon.\n  - height: \"1.3em\" - Sets the height of the icon.\n  - viewBox: \"0 0 256 262\" - Defines the position and dimension of the view box.\n  - xmlns: \"http://www.w3.org/2000/svg\" - Specifies the XML namespace.\n- Methods:\n  - None",
    "packages/ui/hooks/use-callback-ref.ts": "File Summary: useCallbackRef.tsx\n\nModule Overview:\n\n  Purpose: This file contains a custom hook that converts a callback function to a ref in order to prevent re-renders or re-executing effects unnecessarily.\n  Dependencies: \n  - react: The React library for building user interfaces.\n\nFunctions:\n\n  useCallbackRef(callback: T | undefined) -> T:\n  - Purpose: Converts a callback function to a ref to avoid re-renders or re-executing effects.\n  - Arguments:\n    - callback (T | undefined): The callback function to be converted to a ref.\n  - Returns:\n    - T: The converted callback function as a ref.\n  - Exceptions:\n    - None\n\nNote: This file does not contain any classes.",
    "packages/ui/hooks/use-controllable-state.ts": "File Summary: useControllableState.tsx\n\nModule Overview:\n\n  Purpose: This module provides a custom hook for managing state in a controlled or uncontrolled manner, allowing developers to easily handle state changes in React components.\n  \n  Dependencies: \n  - @repo/ui/hooks/use-callback-ref: A custom hook for creating a callback ref in React components.\n\nFunctions:\n\n  useControllableState<T>:\n  - Purpose: A custom hook for managing state in a controlled or uncontrolled manner.\n  - Arguments:\n    - prop (T | undefined): The controlled state value.\n    - defaultProp (T | undefined): The default uncontrolled state value.\n    - onChange (state: T) => void: A callback function to handle state changes.\n  - Returns:\n    - [value, setValue] as const: An array containing the current state value and a function to update the state.\n  - Exceptions: None\n\n  useUncontrolledState<T>:\n  - Purpose: A helper function for managing uncontrolled state.\n  - Arguments:\n    - defaultProp (T | undefined): The default uncontrolled state value.\n    - onChange (state: T) => void: A callback function to handle state changes.\n  - Returns:\n    - uncontrolledState: A tuple containing the current uncontrolled state value and a function to update the state.\n  - Exceptions: None\n\nNote: This file provides essential functionality for managing state in React components, offering developers flexibility in handling state changes.",
    "packages/ui/icons/index.ts": "Module Overview:\n\nPurpose: This module exports a collection of icons used within the application for various functionalities such as adding, chatting, history, exploring, etc.\n\nDependencies: None\n\nClasses: None\n\nFunctions: None\n\nThis file serves as a central repository for importing and exporting various icon components used throughout the application. Developers can easily access and use these icons in different parts of the application by importing them from this file.",
    "packages/ui/lib/utils.ts": "File Summary: utils.ts\n\nModule Overview:\n\n  Purpose: This module provides utility functions for common tasks such as handling CSS classes, formatting bytes, generating absolute URLs, and composing event handlers.\n  Dependencies: \n  - clsx: A library for joining CSS classes together.\n  - tailwind-merge: A library for merging Tailwind CSS classes.\n\nFunctions:\n\n  cn(...inputs: ClassValue[]) -> string:\n  - Purpose: Combines and merges CSS classes using clsx and twMerge.\n  - Arguments:\n    - inputs (ClassValue[]): An array of CSS classes to be merged.\n  - Returns: \n    - string: The merged CSS classes as a string.\n\n  formatBytes(bytes: number, opts: { decimals?: number, sizeType?: \"accurate\" | \"normal\" } = {}) -> string:\n  - Purpose: Formats a given number of bytes into a human-readable size.\n  - Arguments:\n    - bytes (number): The number of bytes to be formatted.\n    - opts (object): Optional parameters for formatting.\n  - Returns:\n    - string: The formatted size with the appropriate unit.\n\n  absoluteUrl(path: string) -> string:\n  - Purpose: Generates an absolute URL using the NEXT_PUBLIC_APP_URL environment variable.\n  - Arguments:\n    - path (string): The path to be appended to the base URL.\n  - Returns:\n    - string: The absolute URL.\n\n  composeEventHandlers<E>(originalEventHandler?: (event: E) => void, ourEventHandler?: (event: E) => void, { checkForDefaultPrevented = true } = {}) -> (event: E) => void:\n  - Purpose: Composes two event handlers, executing them in sequence.\n  - Arguments:\n    - originalEventHandler (function): The original event handler.\n    - ourEventHandler (function): The custom event handler.\n    - checkForDefaultPrevented (boolean): Flag to check if the event's default action has been prevented.\n  - Returns:\n    - function: A composed event handler function.\n\nNote: The file also includes a reference to a source for the composeEventHandlers function.\n\nThis summary provides an overview of the utility functions in the utils.ts file, their purposes, arguments, return values, and potential exceptions. Developers can refer to this summary to understand the functionalities provided by this module.",
    "packages/ui/shadcn/accordion.tsx": "Module Overview:\n\n  Purpose: This module provides components for creating accordion UI elements in React applications.\n  Dependencies: \n  - React: A JavaScript library for building user interfaces.\n  - @radix-ui/react-accordion: A library for creating accessible accordion components.\n  - @heroicons/react: A library of free icons for React applications.\n  - @repo/ui/lib/utils: Utility functions for the UI components.\n\nClasses:\n\n  Accordion:\n  - Purpose: Represents the root component of the accordion.\n  - Attributes: None\n  - Methods: None\n\n  AccordionItem:\n  - Purpose: Represents an item within the accordion.\n  - Attributes:\n    - className (string): The CSS class name for styling the item.\n  - Methods: None\n\n  AccordionTrigger:\n  - Purpose: Represents the trigger element that toggles the accordion item.\n  - Attributes:\n    - className (string): The CSS class name for styling the trigger.\n    - children (ReactNode): The content displayed within the trigger.\n  - Methods: None\n\n  AccordionContent:\n  - Purpose: Represents the content displayed when the accordion item is open.\n  - Attributes:\n    - className (string): The CSS class name for styling the content.\n    - children (ReactNode): The content displayed within the content.\n  - Methods: None\n\nFunctions: None\n\nOverall, this file provides the necessary components for creating customizable and accessible accordion elements in React applications. Developers can use these components to easily implement accordion functionality in their UI designs.",
    "packages/ui/shadcn/badge.tsx": "Module Overview:\n\nPurpose: This module defines a Badge component that can be used to display various types of badges with different styles and variants within the application.\n\nDependencies:\n- React: A JavaScript library for building user interfaces.\n- class-variance-authority: A library for managing variant styles in components.\n- @repo/ui/lib/utils: Utility functions for UI components.\n\nClasses:\n\nBadge:\n- Purpose: Represents a badge component that can display different variants based on the provided props.\n- Attributes:\n  - className (string): Additional CSS classes to apply to the badge.\n  - variant (string): The variant style of the badge.\n- Methods:\n  - Badge({ className, variant, ...props }: BadgeProps) -> JSX.Element: Renders the badge component with the specified variant and additional props.\n\nFunctions:\n- badgeVariants: Generates variant styles for the badge component based on the provided configuration.\n  - Purpose: Creates variant styles for the badge component.\n  - Arguments: \n    - classNames (string): Base CSS classes for the badge.\n    - config (object): Configuration object defining variant styles.\n  - Returns: \n    - Function: A function that generates the appropriate variant style for the badge.\n",
    "packages/ui/shadcn/breadcrumb.tsx": "Module Overview:\n\n  Purpose: This module provides components for creating breadcrumb navigation in a web application.\n  Dependencies: \n  - React: A JavaScript library for building user interfaces.\n  - @radix-ui/react-slot: A library for managing slots in React components.\n  - lucide-react: A library of icons for use in React components.\n  - @repo/ui/lib/utils: Utility functions for styling and managing components.\n\nClasses:\n\n  Breadcrumb:\n  - Purpose: Represents the main breadcrumb navigation component.\n  - Attributes: None\n  - Methods: None\n\n  BreadcrumbList:\n  - Purpose: Represents a list of breadcrumb items.\n  - Attributes:\n    - className (string): Additional CSS classes for styling.\n  - Methods: None\n\n  BreadcrumbItem:\n  - Purpose: Represents an individual breadcrumb item.\n  - Attributes:\n    - className (string): Additional CSS classes for styling.\n  - Methods: None\n\n  BreadcrumbLink:\n  - Purpose: Represents a clickable link within a breadcrumb item.\n  - Attributes:\n    - asChild (boolean): Flag to determine if the link should be rendered as a child component.\n    - className (string): Additional CSS classes for styling.\n  - Methods: None\n\n  BreadcrumbPage:\n  - Purpose: Represents the current page in the breadcrumb navigation.\n  - Attributes:\n    - className (string): Additional CSS classes for styling.\n  - Methods: None\n\n  BreadcrumbSeparator:\n  - Purpose: Represents a separator between breadcrumb items.\n  - Attributes:\n    - children (ReactNode): Optional content to display as the separator.\n    - className (string): Additional CSS classes for styling.\n  - Methods: None\n\n  BreadcrumbEllipsis:\n  - Purpose: Represents an ellipsis icon for indicating additional breadcrumb items.\n  - Attributes:\n    - className (string): Additional CSS classes for styling.\n  - Methods: None\n\nFunctions: None\n\nOverall, this file provides a set of React components for creating breadcrumb navigation elements in a web application. Each component serves a specific role in constructing and styling the breadcrumb navigation, allowing developers to easily implement and customize breadcrumb functionality in their projects.",
    "packages/ui/shadcn/button.tsx": "File Summary: Button.tsx\n\nModule Overview:\n\n  Purpose: This module defines a Button component that can be used in the application for various UI interactions. It provides different variants and sizes for customization.\n  Dependencies: \n  - React: A JavaScript library for building user interfaces.\n  - @radix-ui/react-slot: A library for managing slots in React components.\n  - class-variance-authority: A library for defining and managing component variants.\n\nClasses:\n\n  Button:\n  - Purpose: Represents a customizable button component that can be used in the application.\n  - Attributes:\n    - className (string): Additional CSS classes for styling.\n    - variant (string): The variant of the button (e.g., default, destructive).\n    - size (string): The size of the button (e.g., default, sm, lg).\n    - asChild (boolean): Flag to render the button as a child component.\n  - Methods:\n    - None\n\nFunctions:\n  \n  buttonVariants(styles: object) -> function:\n  - Purpose: Generates a function that applies the specified styles to the button component based on the variant and size.\n  - Arguments:\n    - styles (object): The styles object containing variant and size configurations.\n    - Returns:\n      - function: A function that applies the styles to the button component.\n  - Exceptions:\n    - None\n\n  Button(props: ButtonProps) -> JSX.Element:\n  - Purpose: Renders the Button component with the specified props.\n  - Arguments:\n    - props (ButtonProps): The props for customizing the button component.\n    - Returns:\n      - JSX.Element: The rendered Button component.\n  - Exceptions:\n    - None\n\nOverall, this file provides a reusable Button component with customizable variants and sizes for use in the application's UI.",
    "packages/ui/shadcn/card.tsx": "Module Overview:\n\nPurpose: This module defines a set of reusable components for creating card UI elements in a React application.\n\nDependencies:\n- @repo/ui/lib/utils: A library providing utility functions for the UI components.\n\nClasses:\n\nCard:\n- Purpose: Represents a card component with a border, background color, and shadow.\n- Attributes:\n  - className (string): Additional CSS classes for styling.\n- Methods:\n  - None\n\nCardHeader:\n- Purpose: Represents the header section of a card component.\n- Attributes:\n  - className (string): Additional CSS classes for styling.\n- Methods:\n  - None\n\nCardTitle:\n- Purpose: Represents the title section of a card component.\n- Attributes:\n  - className (string): Additional CSS classes for styling.\n- Methods:\n  - None\n\nCardDescription:\n- Purpose: Represents the description section of a card component.\n- Attributes:\n  - className (string): Additional CSS classes for styling.\n- Methods:\n  - None\n\nCardContent:\n- Purpose: Represents the content section of a card component.\n- Attributes:\n  - className (string): Additional CSS classes for styling.\n- Methods:\n  - None\n\nCardFooter:\n- Purpose: Represents the footer section of a card component.\n- Attributes:\n  - className (string): Additional CSS classes for styling.\n- Methods:\n  - None\n\nFunctions:\n- None\n\nOverall, this file provides a set of React components for creating customizable card UI elements in a React application. Each component can be used to build different sections of a card, such as header, title, description, content, and footer.",
    "packages/ui/shadcn/combobox.tsx": "Module Overview:\n\n  Purpose: The \"use client\" module provides a Combobox component with the ability to create new options. It allows users to select from existing options or create new ones.\n  \n  Dependencies: \n  - React: A JavaScript library for building user interfaces.\n  - \"../lib/utils\": A utility library for common functions.\n  - \"./button\": A button component for user interactions.\n  - \"./command\": Components for creating interactive commands.\n\nClasses:\n\n  ComboboxWithCreate:\n  - Purpose: Represents a Combobox component with the ability to create new options.\n  - Attributes:\n    - options (Option[]): An array of options with value and label properties.\n    - onSelect (function): A function to handle option selection.\n    - onSubmit (function): A function to handle new option submission.\n    - placeholder (string): Placeholder text for the input field.\n    - emptyMessage (string): Message displayed when no options are found.\n    - createNewMessage (string): Message prefix for creating new options.\n    - className (string): Additional CSS class for styling.\n  - Methods:\n    - onChangeCapture(e: React.ChangeEvent<HTMLInputElement>): Updates the input value.\n    - useEffect(): Sets initial options when component mounts.\n\nFunctions: N/A\n\nOverall, the \"use client\" module provides a Combobox component with the ability to create new options, making it easier for users to select from existing options or create new ones.",
    "packages/ui/shadcn/command.tsx": "Module Overview:\n\n  Purpose: The \"use client\" module provides components for creating and managing commands within a user interface.\n  \n  Dependencies: \n  - React: A JavaScript library for building user interfaces.\n  - @radix-ui/react-dialog: A library for creating accessible dialogs.\n  - cmdk: A library for building command line interfaces.\n  - @repo/ui: Internal UI components library.\n  \nClasses:\n\n  Command:\n  - Purpose: Represents a command component that can be interacted with in the UI.\n  - Attributes:\n    - className (string): The CSS class name for styling the command component.\n  - Methods: N/A\n\n  CommandDialog:\n  - Purpose: Represents a dialog component for displaying commands.\n  - Attributes: N/A\n  - Methods: N/A\n\n  CommandInput:\n  - Purpose: Represents an input component for entering commands.\n  - Attributes:\n    - className (string): The CSS class name for styling the input component.\n  - Methods: N/A\n\n  CommandList:\n  - Purpose: Represents a list component for displaying a list of commands.\n  - Attributes:\n    - className (string): The CSS class name for styling the list component.\n  - Methods: N/A\n\n  CommandEmpty:\n  - Purpose: Represents an empty state component for when there are no commands to display.\n  - Attributes: N/A\n  - Methods: N/A\n\n  CommandGroup:\n  - Purpose: Represents a group component for grouping commands.\n  - Attributes:\n    - className (string): The CSS class name for styling the group component.\n  - Methods: N/A\n\n  CommandSeparator:\n  - Purpose: Represents a separator component for visually separating commands.\n  - Attributes:\n    - className (string): The CSS class name for styling the separator component.\n  - Methods: N/A\n\n  CommandItem:\n  - Purpose: Represents an item component within a list of commands.\n  - Attributes:\n    - className (string): The CSS class name for styling the item component.\n  - Methods: N/A\n\n  CommandShortcut:\n  - Purpose: Represents a shortcut component for displaying keyboard shortcuts.\n  - Attributes:\n    - className (string): The CSS class name for styling the shortcut component.\n  - Methods: N/A\n\nFunctions: N/A\n\nOverall, the \"use client\" module provides a set of components for creating and managing commands within a user interface, including dialogs, inputs, lists, groups, separators, items, and shortcuts. These components are designed to work together to create a cohesive command interface for users to interact with.",
    "packages/ui/shadcn/dialog.tsx": "Module Overview:\n\nPurpose: The \"use client\" module provides components for creating dialog boxes in a React application.\n\nDependencies:\n- React: A JavaScript library for building user interfaces.\n- DialogPrimitive: A library for creating accessible dialog components.\n- lucide-react: A library of icons for React components.\n- @repo/ui/lib/utils: Utility functions for the UI components.\n\nClasses:\n\nDialog:\n- Purpose: Represents the root element of a dialog box.\n- Attributes: None.\n- Methods: None.\n\nDialogTrigger:\n- Purpose: Represents the trigger element that opens the dialog box.\n- Attributes: None.\n- Methods: None.\n\nDialogPortal:\n- Purpose: Represents the portal element for rendering the dialog box.\n- Attributes: None.\n- Methods: None.\n\nDialogClose:\n- Purpose: Represents the close button for the dialog box.\n- Attributes: None.\n- Methods: None.\n\nDialogOverlay:\n- Purpose: Represents the overlay element that covers the background when the dialog is open.\n- Attributes: className (string) - CSS classes for styling.\n- Methods: None.\n\nDialogContent:\n- Purpose: Represents the content area of the dialog box.\n- Attributes: className (string) - CSS classes for styling, children (ReactNode) - content to display.\n- Methods: None.\n\nDialogHeader:\n- Purpose: Represents the header section of the dialog box.\n- Attributes: className (string) - CSS classes for styling.\n- Methods: None.\n\nDialogFooter:\n- Purpose: Represents the footer section of the dialog box.\n- Attributes: className (string) - CSS classes for styling.\n- Methods: None.\n\nDialogTitle:\n- Purpose: Represents the title of the dialog box.\n- Attributes: className (string) - CSS classes for styling.\n- Methods: None.\n\nDialogDescription:\n- Purpose: Represents the description text of the dialog box.\n- Attributes: className (string) - CSS classes for styling.\n- Methods: None.\n\nFunctions:\n\nNone.\n\nOverall, the \"use client\" module provides a set of components for creating customizable and accessible dialog boxes in a React application. Developers can easily integrate these components into their UI to enhance user interactions.",
    "packages/ui/shadcn/divider.tsx": "Module Overview:\n\n  Purpose: This module defines a Divider component that can be used to create a horizontal line to visually separate content on a webpage.\n  \n  Dependencies: \n  - @repo/ui/lib/utils: The module that provides the 'cn' utility function for generating CSS class names.\n\nFunctions:\n\n  Divider:\n  - Purpose: Represents a horizontal line divider component.\n  - Arguments:\n    - className (string): Optional CSS class name to be applied to the divider.\n  - Returns:\n    - JSX.Element: A div element representing the horizontal line divider.\n  - Exceptions:\n    - None\n\nOverall, this file provides a simple Divider component that can be easily customized with additional CSS classes to suit different design requirements.",
    "packages/ui/shadcn/drawer.tsx": "Module Overview:\n\n  Purpose: The \"use client\" module provides components for creating a drawer interface in a React application.\n  Dependencies: \n  - React: A JavaScript library for building user interfaces.\n  - vaul: A library for creating UI components.\n  - @repo/ui/lib/utils: Utility functions for UI components.\n\nClasses:\n\n  Drawer:\n  - Purpose: Represents the main drawer component.\n  - Attributes:\n    - shouldScaleBackground (boolean): Indicates whether the background should scale.\n  - Methods: N/A\n\n  DrawerOverlay:\n  - Purpose: Represents the overlay component for the drawer.\n  - Attributes: N/A\n  - Methods: N/A\n\n  DrawerContent:\n  - Purpose: Represents the content area within the drawer.\n  - Attributes: N/A\n  - Methods: N/A\n\n  DrawerHeader:\n  - Purpose: Represents the header section of the drawer.\n  - Attributes: N/A\n  - Methods: N/A\n\n  DrawerFooter:\n  - Purpose: Represents the footer section of the drawer.\n  - Attributes: N/A\n  - Methods: N/A\n\n  DrawerTitle:\n  - Purpose: Represents the title component within the drawer.\n  - Attributes: N/A\n  - Methods: N/A\n\n  DrawerDescription:\n  - Purpose: Represents the description component within the drawer.\n  - Attributes: N/A\n  - Methods: N/A\n\nFunctions: N/A\n\nOverall, the \"use client\" module provides a set of components for creating a customizable drawer interface in a React application. Developers can utilize these components to easily implement a drawer feature with various sections such as content, header, footer, title, and description.",
    "packages/ui/shadcn/dropdown-menu.tsx": "Module Overview:\n\nPurpose: The \"use client\" file is responsible for defining various components related to dropdown menus in a React application. These components include triggers, content, items, labels, separators, and shortcuts for dropdown menus.\n\nDependencies:\n- React: A JavaScript library for building user interfaces.\n- @radix-ui/react-dropdown-menu: A library for creating accessible dropdown menus.\n- lucide-react: A library of icons for use in React applications.\n- @repo/ui/lib/utils: Utility functions for the UI in the application.\n\nClasses:\n\nDropdownMenu:\n- Purpose: Represents the root element of a dropdown menu.\n- Attributes: None.\n- Methods: None.\n\nDropdownMenuTrigger:\n- Purpose: Represents the trigger element that opens the dropdown menu.\n- Attributes: None.\n- Methods: None.\n\nDropdownMenuContent:\n- Purpose: Represents the content area of the dropdown menu.\n- Attributes: sideOffset (number) - The offset from the side of the trigger element.\n- Methods: None.\n\nDropdownMenuItem:\n- Purpose: Represents an item within the dropdown menu.\n- Attributes: inset (boolean) - Indicates if the item is inset.\n- Methods: None.\n\nDropdownMenuCheckboxItem:\n- Purpose: Represents a checkbox item within the dropdown menu.\n- Attributes: checked (boolean) - Indicates if the checkbox is checked.\n- Methods: None.\n\nDropdownMenuRadioItem:\n- Purpose: Represents a radio item within the dropdown menu.\n- Attributes: None.\n- Methods: None.\n\nDropdownMenuLabel:\n- Purpose: Represents a label within the dropdown menu.\n- Attributes: inset (boolean) - Indicates if the label is inset.\n- Methods: None.\n\nDropdownMenuSeparator:\n- Purpose: Represents a separator within the dropdown menu.\n- Attributes: None.\n- Methods: None.\n\nDropdownMenuShortcut:\n- Purpose: Represents a shortcut within the dropdown menu.\n- Attributes: None.\n- Methods: None.\n\nFunctions:\n\ncreate_user(username: str, email: str) -> User:\n- Purpose: Creates a new user account.\n- Arguments:\n  - username (str): The desired username.\n  - email (str): The email address of the new user.\n- Returns:\n  - User: The newly created user object.\n- Exceptions:\n  - ValueError: If the username or email is invalid.\n\ndelete_user(user: User) -> None:\n- Purpose: Deletes a user account.\n- Arguments:\n  - user (User): The user account to be deleted.\n- Returns:\n  - None\n- Exceptions:\n  - PermissionError: If the user does not have the required permissions.\n  - DatabaseError: If there is an issue deleting the user.",
    "packages/ui/shadcn/form.tsx": "Module Overview:\n\nPurpose: This file contains components and utilities related to form handling in React applications. It provides a set of components for building forms with validation and error handling.\n\nDependencies:\n- React: A JavaScript library for building user interfaces.\n- react-hook-form: A library for managing form state and validation in React applications.\n- @radix-ui/react-label: A library for styling form labels.\n- @repo/ui: Custom UI components and utilities.\n\nClasses:\n\nFormField:\n- Purpose: Represents a form field component that integrates with react-hook-form for form state management.\n- Attributes: \n  - props.name: The name of the form field.\n- Methods: N/A\n\nFormItem:\n- Purpose: Represents a form item component that wraps form elements and provides context for form fields.\n- Attributes:\n  - id: A unique identifier for the form item.\n- Methods: N/A\n\nFormLabel:\n- Purpose: Represents a form label component that associates a label with a form field.\n- Attributes: \n  - error: Indicates if there is an error with the form field.\n  - formItemId: The ID of the associated form field.\n- Methods: N/A\n\nFormControl:\n- Purpose: Represents a form control component that manages form field accessibility and error messaging.\n- Attributes:\n  - error: Indicates if there is an error with the form field.\n  - formItemId: The ID of the associated form field.\n  - formDescriptionId: The ID of the form field description.\n  - formMessageId: The ID of the form field error message.\n- Methods: N/A\n\nFormDescription:\n- Purpose: Represents a form description component that provides additional information about a form field.\n- Attributes:\n  - formDescriptionId: The ID of the associated form field description.\n- Methods: N/A\n\nFormMessage:\n- Purpose: Represents a form message component that displays error messages for form fields.\n- Attributes:\n  - error: Indicates if there is an error with the form field.\n  - formMessageId: The ID of the form field error message.\n- Methods: N/A\n\nFunctions:\n\nuseFormField:\n- Purpose: Retrieves form field context and state for a form field component.\n- Arguments: N/A\n- Returns: An object containing form field context and state.\n- Exceptions: Throws an error if used outside of a FormField component.\n\nOverall, this file provides a comprehensive set of components and utilities for building forms in React applications with form state management, validation, and error handling capabilities.",
    "packages/ui/shadcn/input.tsx": "Module Overview:\n\nPurpose: The file is responsible for defining an Input component using React. This component is used for creating input fields in forms within the application.\n\nDependencies:\n- React: A JavaScript library for building user interfaces.\n- @repo/ui/lib/utils: A library for utility functions used in the UI components.\n\nClasses:\n\nInput:\n- Purpose: Represents an input field component for forms.\n- Attributes:\n  - className (string): Additional CSS classes for styling.\n  - type (string): The type of input field (e.g., text, password).\n- Methods:\n  - None\n\nFunctions:\n- None\n\nOverall, this file provides a reusable Input component that can be easily integrated into forms across the application.",
    "packages/ui/shadcn/label.tsx": "Module Overview:\n\n  Purpose: The \"use client\" module provides a React component for rendering a label with specific styling variants. It is used within the application to display labels with consistent styles.\n\n  Dependencies: \n  - React: A JavaScript library for building user interfaces.\n  - @radix-ui/react-label: A library for creating accessible labels in React components.\n  - class-variance-authority: A library for managing variant styles in React components.\n  - @repo/ui/lib/utils: Utility functions for styling and component management.\n\nClasses:\n\n  Label:\n  - Purpose: Represents a label component with customizable styling variants.\n  - Attributes: \n    - className (string): The CSS class name for the label component.\n    - props (object): Additional props to be passed to the label component.\n  - Methods:\n    - None\n\nFunctions:\n  None\n\nOverall, the \"use client\" module provides a reusable Label component that leverages variant styling and accessibility features for consistent label rendering in the application.",
    "packages/ui/shadcn/popover.tsx": "Module Overview:\n\n  Purpose: The \"use client\" module provides functionality for creating and managing popovers in a React application.\n  \n  Dependencies: \n  - React: A JavaScript library for building user interfaces.\n  - @radix-ui/react-popover: A library for creating accessible popovers.\n  - @repo/ui/lib/utils: Utility functions for the UI.\n\nClasses:\n\n  Popover:\n  - Purpose: Represents the root element of a popover.\n  \n  PopoverTrigger:\n  - Purpose: Represents the trigger element that activates the popover.\n  \n  PopoverContent:\n  - Purpose: Represents the content of the popover.\n  - Attributes:\n    - align (string): The alignment of the popover content.\n    - sideOffset (number): The offset from the trigger element.\n  - Methods:\n    - None\n\nFunctions:\n  None",
    "packages/ui/shadcn/progress.tsx": "Module Overview:\n\n  Purpose: The \"use client\" module is responsible for rendering a progress indicator component in a React application. It utilizes the ProgressPrimitive component from the @radix-ui/react-progress library to display a customizable progress bar.\n\n  Dependencies: \n  - React: A JavaScript library for building user interfaces.\n  - ProgressPrimitive: A component library for creating progress indicators.\n  - @repo/ui/lib/utils: Utility functions for styling and handling class names.\n\nClasses:\n\n  Progress:\n  - Purpose: Represents a progress indicator component that displays the progress of a task.\n  - Attributes:\n    - className (string): Additional CSS classes for styling the progress bar.\n    - value (number): The current progress value, ranging from 0 to 100.\n  - Methods:\n    - None\n\nFunctions:\n  None\n\nOverall, the \"use client\" module provides a reusable Progress component that can be easily integrated into React applications to visualize the progress of tasks.",
    "packages/ui/shadcn/scroll-area.tsx": "Module Overview:\n\n  Purpose: The \"use client\" module provides components for creating scrollable areas with custom scrollbars in React applications.\n  \n  Dependencies: \n  - React: A JavaScript library for building user interfaces.\n  - @radix-ui/react-scroll-area: A library for creating custom scroll areas in React.\n  - @repo/ui/lib/utils: Utility functions for styling and handling classes in React components.\n\nClasses:\n\n  ScrollArea:\n  - Purpose: Represents a scrollable area component with custom scrollbars.\n  - Attributes:\n    - className (string): Additional CSS classes for styling.\n    - children (ReactNode): The content to be displayed within the scroll area.\n  - Methods:\n    - N/A\n\n  ScrollBar:\n  - Purpose: Represents a custom scrollbar component for the scroll area.\n  - Attributes:\n    - className (string): Additional CSS classes for styling.\n    - orientation (string): The orientation of the scrollbar (vertical or horizontal).\n  - Methods:\n    - N/A\n\nFunctions:\n  N/A\n\nOverall, the \"use client\" module provides components for creating scrollable areas with custom scrollbars in React applications. The ScrollArea component represents the scrollable area itself, while the ScrollBar component represents the custom scrollbar within the scroll area. These components can be used to enhance the user experience when dealing with scrollable content in a React application.",
    "packages/ui/shadcn/select.tsx": "File Summary: \"use client\"\n\nModule Overview:\n\nPurpose: This file provides components for creating custom select dropdowns in React applications.\nDependencies:\n- React: A JavaScript library for building user interfaces.\n- @radix-ui/react-select: A library for building accessible select components.\n- lucide-react: A library of icons for use in React applications.\n- @repo/ui/lib/utils: Utility functions for styling and handling UI elements.\n\nClasses:\n\nSelectTrigger:\n- Purpose: Represents the trigger element for the select dropdown.\n- Attributes: \n  - className (string): CSS classes for styling.\n  - children (ReactNode): Child elements.\n- Methods: N/A\n\nSelectScrollUpButton:\n- Purpose: Represents the scroll up button for the select dropdown.\n- Attributes: \n  - className (string): CSS classes for styling.\n- Methods: N/A\n\nSelectScrollDownButton:\n- Purpose: Represents the scroll down button for the select dropdown.\n- Attributes: \n  - className (string): CSS classes for styling.\n- Methods: N/A\n\nSelectContent:\n- Purpose: Represents the content area of the select dropdown.\n- Attributes: \n  - className (string): CSS classes for styling.\n  - children (ReactNode): Child elements.\n  - position (string): Position of the content (default: \"popper\").\n- Methods: N/A\n\nSelectLabel:\n- Purpose: Represents the label for the select dropdown.\n- Attributes: \n  - className (string): CSS classes for styling.\n- Methods: N/A\n\nSelectItem:\n- Purpose: Represents an item in the select dropdown.\n- Attributes: \n  - className (string): CSS classes for styling.\n  - children (ReactNode): Child elements.\n- Methods: N/A\n\nSelectSeparator:\n- Purpose: Represents a separator in the select dropdown.\n- Attributes: \n  - className (string): CSS classes for styling.\n- Methods: N/A\n\nFunctions: N/A\n\nOverall, this file provides components for creating customizable select dropdowns in React applications, with various elements such as triggers, buttons, content, labels, items, and separators.",
    "packages/ui/shadcn/separator.tsx": "Module Overview:\n\n  Purpose: The \"use client\" module provides a React component for rendering a separator element, which can be used to visually separate content within the application.\n  \n  Dependencies: \n  - React: A JavaScript library for building user interfaces.\n  - @radix-ui/react-separator: A library for creating customizable separators.\n  - @repo/ui/lib/utils: Utility functions for common tasks.\n\nClasses:\n\n  Separator:\n  - Purpose: Represents a separator element that can be used to visually separate content.\n  - Attributes:\n    - className (string): Additional CSS classes to apply to the separator.\n    - orientation (string): The orientation of the separator (horizontal or vertical).\n    - decorative (boolean): Indicates if the separator is purely decorative.\n  - Methods:\n    - None\n\nFunctions:\n  None\n\nOverall, the \"use client\" module provides a reusable React component called Separator, which allows developers to easily add separators to their UI components for better visual organization.",
    "packages/ui/shadcn/skeleton.tsx": "Module Overview:\n\n  Purpose: The file defines a React component called Skeleton, which is used to display a loading animation placeholder for content.\n  \n  Dependencies: \n  - @repo/ui/lib/utils: The file imports the cn function from this library for handling CSS class names.\n\nFunctions:\n\n  Skeleton:\n  - Purpose: Renders a div element with a loading animation placeholder.\n  - Arguments:\n    - className (string): Additional CSS classes to be applied to the div element.\n    - props (React.HTMLAttributes<HTMLDivElement>): Additional HTML attributes to be applied to the div element.\n  - Returns:\n    - JSX.Element: The rendered div element with the loading animation.\n  - Exceptions:\n    - None\n\nExported:\n- Skeleton: The Skeleton component is exported for use in other parts of the application.",
    "packages/ui/shadcn/sonner.tsx": "Module Overview:\n\n  Purpose: The \"use client\" module is responsible for managing the display of toast notifications in the application. It utilizes the \"next-themes\" library for theme management and the \"sonner\" library for displaying toast notifications.\n\n  Dependencies: \n  - next-themes: Library for managing themes in Next.js applications.\n  - sonner: Library for displaying toast notifications.\n\nClasses:\n\n  Toaster:\n  - Purpose: Represents a component for displaying toast notifications.\n  - Attributes:\n    - theme (string): The current theme for the toast notifications.\n  - Methods:\n    - None\n\nFunctions:\n  None",
    "packages/ui/shadcn/switch.tsx": "Module Overview:\n\n  Purpose: The \"use client\" module provides a custom switch component for use in React applications.\n  \n  Dependencies: \n  - React: A JavaScript library for building user interfaces.\n  - @radix-ui/react-switch: A library for creating accessible switch components.\n  - @repo/ui/lib/utils: Utility functions for styling and handling components.\n\nClasses:\n\n  Switch:\n  - Purpose: Represents a custom switch component for toggling between two states.\n  - Attributes:\n    - className (string): Additional CSS classes for styling the switch component.\n  - Methods:\n    - None\n\nFunctions:\n  None\n\nOverall, the \"use client\" module provides a reusable switch component that can be easily integrated into React applications for toggling between different states.",
    "packages/ui/shadcn/tabs.tsx": "File Summary: \"use client\"\n\nModule Overview:\n\n  Purpose: This file provides components for creating tabs in a React application using the @radix-ui/react-tabs library.\n  Dependencies: \n  - React: A JavaScript library for building user interfaces.\n  - @radix-ui/react-tabs: A library for creating accessible tab components.\n  - @repo/ui/lib/utils: Utility functions for styling and handling components.\n\nClasses:\n\n  Tabs:\n  - Purpose: Represents the root component for the tabs.\n  - Attributes: None\n  - Methods: None\n\n  TabsList:\n  - Purpose: Represents the list of tabs.\n  - Attributes:\n    - className (string): The CSS class name for styling the component.\n  - Methods: None\n\n  TabsTrigger:\n  - Purpose: Represents the trigger element for each tab.\n  - Attributes:\n    - className (string): The CSS class name for styling the component.\n  - Methods: None\n\n  TabsContent:\n  - Purpose: Represents the content of each tab.\n  - Attributes:\n    - className (string): The CSS class name for styling the component.\n  - Methods: None\n\nFunctions: None\n\nOverall, this file provides components for creating tabbed interfaces in a React application, allowing developers to easily implement tab functionality in their projects.",
    "packages/ui/shadcn/textarea.tsx": "Module Overview:\n\nPurpose: The Textarea module provides a reusable component for rendering a textarea input field with customizable styling.\n\nDependencies:\n- React: The core library for building user interfaces in React applications.\n- @repo/ui/lib/utils: A utility library for common functions used in the UI components.\n\nClasses:\n\nTextarea:\n- Purpose: Represents a textarea input field component.\n- Attributes:\n  - className (string): Additional CSS classes to apply to the textarea element.\n  - props (TextareaProps): Props passed to the textarea element.\n- Methods:\n  - render() -> JSX.Element: Renders the textarea input field with the specified styling and properties.\n\nFunctions:\nNone\n\nOverall, the Textarea module serves as a convenient way to include a styled textarea input field in React applications, with the ability to customize its appearance and behavior through props.",
    "packages/ui/shadcn/theme-toggle.tsx": "File Summary: use client.js\n\nModule Overview:\n\n  Purpose: This module provides functionality for toggling between light and dark themes in the application.\n  Dependencies: \n  - next-app-theme/use-theme: A module for managing the application's theme.\n  - lucide-react: A library for displaying icons.\n\nFunctions:\n\n  ThemeToggle():\n  - Purpose: Renders a button that toggles between light and dark themes.\n  - Arguments: None\n  - Returns: JSX element representing the theme toggle button.\n  - Exceptions: None\n\nClasses: None",
    "packages/ui/shadcn/toast.tsx": "Module Overview:\n\nPurpose: The \"use client\" module provides components for displaying toast notifications in a React application.\n\nDependencies:\n- React: A JavaScript library for building user interfaces.\n- @radix-ui/react-toast: A library for creating accessible toast notifications.\n- class-variance-authority: A library for managing variant styles in components.\n- lucide-react: A library of icons for use in React applications.\n- @repo/ui/lib/utils: Utility functions for styling components.\n\nClasses:\n\nToastViewport:\n- Purpose: Represents the viewport for displaying toast notifications.\n- Attributes: \n  - className (string): The CSS class name for styling the viewport.\n- Methods: N/A\n\nToast:\n- Purpose: Represents a toast notification.\n- Attributes:\n  - className (string): The CSS class name for styling the toast.\n  - variant (string): The variant style of the toast.\n- Methods: N/A\n\nToastAction:\n- Purpose: Represents an action button within a toast notification.\n- Attributes:\n  - className (string): The CSS class name for styling the action button.\n- Methods: N/A\n\nToastClose:\n- Purpose: Represents a close button for dismissing a toast notification.\n- Attributes:\n  - className (string): The CSS class name for styling the close button.\n- Methods: N/A\n\nToastTitle:\n- Purpose: Represents the title of a toast notification.\n- Attributes:\n  - className (string): The CSS class name for styling the title.\n- Methods: N/A\n\nToastDescription:\n- Purpose: Represents the description text of a toast notification.\n- Attributes:\n  - className (string): The CSS class name for styling the description.\n- Methods: N/A\n\nFunctions: N/A\n\nOverall, the \"use client\" module provides components for creating and displaying customizable toast notifications in a React application.",
    "packages/ui/shadcn/toaster.tsx": "File Summary: use client\n\nModule Overview:\n\n  Purpose: This file provides a component called Toaster that displays toast notifications to users.\n  Dependencies: \n  - @repo/ui/shadcn/toast: Provides components for displaying toast notifications.\n  - @repo/ui/shadcn/use-toast: Provides a hook for managing toast notifications.\n\nClasses:\n- N/A\n\nFunctions:\n\n  Toaster():\n  - Purpose: Renders a Toaster component that displays toast notifications.\n  - Arguments: None\n  - Returns: JSX element\n  - Exceptions: None",
    "packages/ui/shadcn/tooltip.tsx": "Module Overview:\n\nPurpose: The \"use client\" module provides functionality for handling tooltips in the application.\n\nDependencies:\n- React: A JavaScript library for building user interfaces.\n- TooltipPrimitive: A library for creating tooltips in React applications.\n- @repo/ui/lib/utils: Utility functions for the UI components.\n\nClasses:\n\nTooltipProvider:\n- Purpose: Represents the provider component for tooltips.\n- Attributes: None\n- Methods: None\n\nTooltip:\n- Purpose: Represents the root component for tooltips.\n- Attributes: None\n- Methods: None\n\nTooltipTrigger:\n- Purpose: Represents the trigger component for tooltips.\n- Attributes: None\n- Methods: None\n\nTooltipContent:\n- Purpose: Represents the content component for tooltips.\n- Attributes:\n  - sideOffset (number): The offset value for the tooltip's position.\n- Methods: None\n\nFunctions: None\n\nOverall, the \"use client\" module provides components for creating and displaying tooltips in the application using the TooltipPrimitive library and React.",
    "packages/ui/shadcn/use-toast.ts": "File Summary: \"use client\"\n\nModule Overview:\n\n  Purpose: This file provides functionality for managing toast notifications in a React application.\n  Dependencies: \n  - React: JavaScript library for building user interfaces.\n  - @repo/ui/shadcn/toast: External library for toast notifications.\n\nFunctions:\n\n  genId():\n  - Purpose: Generates a unique ID for each toast notification.\n  - Arguments: None\n  - Returns: A unique ID as a string.\n\n  addToRemoveQueue(toastId: string):\n  - Purpose: Adds a toast ID to the removal queue after a delay.\n  - Arguments:\n    - toastId (string): The ID of the toast notification to be removed.\n  - Returns: None\n\n  dispatch(action: Action):\n  - Purpose: Dispatches an action to update the state of toast notifications.\n  - Arguments:\n    - action (Action): The action to be dispatched.\n  - Returns: None\n\n  toast(props: Toast):\n  - Purpose: Creates a new toast notification.\n  - Arguments:\n    - props (Toast): The properties of the toast notification.\n  - Returns: An object with ID, dismiss, and update functions.\n\n  useToast():\n  - Purpose: Custom React hook for managing toast notifications.\n  - Arguments: None\n  - Returns: An object with toast, dismiss, and state properties.\n\nClasses:\n\n  ToasterToast:\n  - Purpose: Represents a toast notification with specific properties.\n  - Attributes:\n    - id (string): The unique ID of the toast.\n    - title (React.ReactNode): The title of the toast.\n    - description (React.ReactNode): The description of the toast.\n    - action (ToastActionElement): The action associated with the toast.\n\n  State:\n  - Purpose: Represents the state of toast notifications.\n  - Attributes:\n    - toasts (ToasterToast[]): An array of toast notifications.\n\n  Action:\n  - Purpose: Represents different types of actions that can be dispatched.\n  - Attributes:\n    - type (string): The type of action.\n    - toast (ToasterToast): The toast notification associated with the action.\n\n  ActionType:\n  - Purpose: Represents the types of actions available.\n  - Attributes:\n    - ADD_TOAST\n    - UPDATE_TOAST\n    - DISMISS_TOAST\n    - REMOVE_TOAST\n\n  Toast:\n  - Purpose: Represents a simplified version of a toast notification.\n  - Attributes:\n    - title (React.ReactNode): The title of the toast.\n    - description (React.ReactNode): The description of the toast.\n    - action (ToastActionElement): The action associated with the toast.\n\nThis summary provides an overview of the \"use client\" file, including its purpose, dependencies, functions, and classes. Developers can refer to this summary to understand the functionality and structure of the file.",
    "packages/ui/tailwind.config.ts": "File Summary: tailwind.config.js\n\nModule Overview:\n\n  Purpose: This module exports the configuration settings for the Tailwind CSS framework used in the application.\n  Dependencies: \n  - @repo/tailwind-config: The Tailwind CSS configuration module.\n\nClasses: N/A\n\nFunctions: N/A\n\nThis file serves as the central configuration file for Tailwind CSS, providing settings for customizing the design system used in the application. Developers can modify this file to adjust colors, typography, spacing, and other design-related properties.",
    "packages/ui/turbo/generators/config.ts": "Module Overview:\n\n  Purpose: This file serves as a generator for adding a new React component to the internal UI library.\n  Dependencies: \n  - PlopTypes: Imported from \"@turbo/gen\" for defining the types used in the generator.\n\nFunctions:\n\n  generator(plop: PlopTypes.NodePlopAPI) -> void:\n  - Purpose: Defines a generator to add a new React component to the internal UI library.\n  - Arguments:\n    - plop (PlopTypes.NodePlopAPI): The Plop API object used to define the generator.\n  - Returns:\n    - void\n",
    "packages/ui/types.d.ts": "File Summary: declare module \"*.svg\"\n\nModule Overview:\n\n  Purpose: This module declares a module for importing SVG files in a React application. It defines the type of the imported SVG file as a React functional component that accepts SVG attributes.\n  \n  Dependencies: \n  - React: The React library is required for defining functional components.\n  - SVGElement: The SVGElement interface is used for SVG elements in the SVG file.\n\nClasses:\nThis file does not define any classes.\n\nFunctions:\nThis file does not define any functions.\n\nAdditional Information:\nThis file serves as a declaration module specifically for importing SVG files in a React application. It ensures that the imported SVG files are treated as React functional components with SVG attributes."
}